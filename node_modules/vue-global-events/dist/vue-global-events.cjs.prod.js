/*!
  * vue-global-events v2.1.0
  * (c) 2022 Damian Dulisz, Eduardo San Martin Morote
  * @license MIT
  */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vue = require('vue');

let _isIE;
function isIE() {
    return _isIE == null
        ? (_isIE = /msie|trident/.test(window.navigator.userAgent.toLowerCase()))
        : _isIE;
}

const EVENT_NAME_RE = /^on(\w+?)((?:Once|Capture|Passive)*)$/;
const MODIFIERS_SEPARATOR_RE = /[OCP]/g;
function extractEventOptions(modifiersRaw) {
    if (!modifiersRaw)
        return;
    // IE only supports capture option and it has to be a boolean
    // https://github.com/shentao/vue-global-events/issues/14
    if (isIE()) {
        return modifiersRaw.includes('Capture');
    }
    const modifiers = modifiersRaw
        .replace(MODIFIERS_SEPARATOR_RE, ',$&')
        .toLowerCase()
        // remove the initial comma
        .slice(1)
        .split(',');
    return modifiers.reduce((options, modifier) => {
        options[modifier] = true;
        return options;
    }, {});
}
const GlobalEventsImpl = vue.defineComponent({
    name: 'GlobalEvents',
    props: {
        target: {
            type: String,
            default: 'document',
        },
        filter: {
            type: Function,
            default: () => () => true,
        },
    },
    setup(props, { attrs }) {
        let activeListeners = Object.create(null);
        const isActive = vue.ref(true);
        vue.onActivated(() => {
            isActive.value = true;
        });
        vue.onDeactivated(() => {
            isActive.value = false;
        });
        vue.onMounted(() => {
            Object.keys(attrs)
                .filter((name) => name.startsWith('on'))
                .forEach((eventNameWithModifiers) => {
                const listener = attrs[eventNameWithModifiers];
                const listeners = Array.isArray(listener) ? listener : [listener];
                const match = eventNameWithModifiers.match(EVENT_NAME_RE);
                if (!match) {
                    return;
                }
                let [, eventName, modifiersRaw] = match;
                eventName = eventName.toLowerCase();
                const handlers = listeners.map((listener) => (event) => {
                    isActive.value &&
                        props.filter(event, listener, eventName) &&
                        listener(event);
                });
                const options = extractEventOptions(modifiersRaw);
                handlers.forEach((handler) => {
                    window[props.target].addEventListener(eventName, handler, options);
                });
                activeListeners[eventNameWithModifiers] = [
                    handlers,
                    eventName,
                    options,
                ];
            });
        });
        vue.onBeforeUnmount(() => {
            for (const eventNameWithModifiers in activeListeners) {
                const [handlers, eventName, options] = activeListeners[eventNameWithModifiers];
                handlers.forEach((handler) => {
                    window[props.target].removeEventListener(eventName, handler, options);
                });
            }
            activeListeners = {};
        });
        return () => null;
    },
});
// export the public type for h/tsx inference
// also to avoid inline import() in generated d.ts files
/**
 * Component of vue-lib.
 */
const GlobalEvents = GlobalEventsImpl;

exports.GlobalEvents = GlobalEvents;
