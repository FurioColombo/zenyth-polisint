{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Source } from \"../Source\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Clock } from \"../../core/clock/Clock\";\nimport { ToneBufferSource } from \"./ToneBufferSource\";\nimport { intervalToFrequencyRatio } from \"../../core/type/Conversions\";\nimport { assertRange } from \"../../core/util/Debug\";\n/**\n * GrainPlayer implements [granular synthesis](https://en.wikipedia.org/wiki/Granular_synthesis).\n * Granular Synthesis enables you to adjust pitch and playback rate independently. The grainSize is the\n * amount of time each small chunk of audio is played for and the overlap is the\n * amount of crossfading transition time between successive grains.\n * @category Source\n */\nexport class GrainPlayer extends Source {\n  constructor() {\n    super(optionsFromArguments(GrainPlayer.getDefaults(), arguments, [\"url\", \"onload\"]));\n    this.name = \"GrainPlayer\";\n    /**\n     * Internal loopStart value\n     */\n    this._loopStart = 0;\n    /**\n     * Internal loopStart value\n     */\n    this._loopEnd = 0;\n    /**\n     * All of the currently playing BufferSources\n     */\n    this._activeSources = [];\n    const options = optionsFromArguments(GrainPlayer.getDefaults(), arguments, [\"url\", \"onload\"]);\n    this.buffer = new ToneAudioBuffer({\n      onload: options.onload,\n      onerror: options.onerror,\n      reverse: options.reverse,\n      url: options.url\n    });\n    this._clock = new Clock({\n      context: this.context,\n      callback: this._tick.bind(this),\n      frequency: 1 / options.grainSize\n    });\n    this._playbackRate = options.playbackRate;\n    this._grainSize = options.grainSize;\n    this._overlap = options.overlap;\n    this.detune = options.detune;\n    // setup\n    this.overlap = options.overlap;\n    this.loop = options.loop;\n    this.playbackRate = options.playbackRate;\n    this.grainSize = options.grainSize;\n    this.loopStart = options.loopStart;\n    this.loopEnd = options.loopEnd;\n    this.reverse = options.reverse;\n    this._clock.on(\"stop\", this._onstop.bind(this));\n  }\n  static getDefaults() {\n    return Object.assign(Source.getDefaults(), {\n      onload: noOp,\n      onerror: noOp,\n      overlap: 0.1,\n      grainSize: 0.2,\n      playbackRate: 1,\n      detune: 0,\n      loop: false,\n      loopStart: 0,\n      loopEnd: 0,\n      reverse: false\n    });\n  }\n  /**\n   * Internal start method\n   */\n  _start(time, offset, duration) {\n    offset = defaultArg(offset, 0);\n    offset = this.toSeconds(offset);\n    time = this.toSeconds(time);\n    const grainSize = 1 / this._clock.frequency.getValueAtTime(time);\n    this._clock.start(time, offset / grainSize);\n    if (duration) {\n      this.stop(time + this.toSeconds(duration));\n    }\n  }\n  /**\n   * Stop and then restart the player from the beginning (or offset)\n   * @param  time When the player should start.\n   * @param  offset The offset from the beginning of the sample to start at.\n   * @param  duration How long the sample should play. If no duration is given,\n   * \t\t\t\t\tit will default to the full length of the sample (minus any offset)\n   */\n  restart(time, offset, duration) {\n    super.restart(time, offset, duration);\n    return this;\n  }\n  _restart(time, offset, duration) {\n    this._stop(time);\n    this._start(time, offset, duration);\n  }\n  /**\n   * Internal stop method\n   */\n  _stop(time) {\n    this._clock.stop(time);\n  }\n  /**\n   * Invoked when the clock is stopped\n   */\n  _onstop(time) {\n    // stop the players\n    this._activeSources.forEach(source => {\n      source.fadeOut = 0;\n      source.stop(time);\n    });\n    this.onstop(this);\n  }\n  /**\n   * Invoked on each clock tick. scheduled a new grain at this time.\n   */\n  _tick(time) {\n    // check if it should stop looping\n    const ticks = this._clock.getTicksAtTime(time);\n    const offset = ticks * this._grainSize;\n    this.log(\"offset\", offset);\n    if (!this.loop && offset > this.buffer.duration) {\n      this.stop(time);\n      return;\n    }\n    // at the beginning of the file, the fade in should be 0\n    const fadeIn = offset < this._overlap ? 0 : this._overlap;\n    // create a buffer source\n    const source = new ToneBufferSource({\n      context: this.context,\n      url: this.buffer,\n      fadeIn: fadeIn,\n      fadeOut: this._overlap,\n      loop: this.loop,\n      loopStart: this._loopStart,\n      loopEnd: this._loopEnd,\n      // compute the playbackRate based on the detune\n      playbackRate: intervalToFrequencyRatio(this.detune / 100)\n    }).connect(this.output);\n    source.start(time, this._grainSize * ticks);\n    source.stop(time + this._grainSize / this.playbackRate);\n    // add it to the active sources\n    this._activeSources.push(source);\n    // remove it when it's done\n    source.onended = () => {\n      const index = this._activeSources.indexOf(source);\n      if (index !== -1) {\n        this._activeSources.splice(index, 1);\n      }\n    };\n  }\n  /**\n   * The playback rate of the sample\n   */\n  get playbackRate() {\n    return this._playbackRate;\n  }\n  set playbackRate(rate) {\n    assertRange(rate, 0.001);\n    this._playbackRate = rate;\n    this.grainSize = this._grainSize;\n  }\n  /**\n   * The loop start time.\n   */\n  get loopStart() {\n    return this._loopStart;\n  }\n  set loopStart(time) {\n    if (this.buffer.loaded) {\n      assertRange(this.toSeconds(time), 0, this.buffer.duration);\n    }\n    this._loopStart = this.toSeconds(time);\n  }\n  /**\n   * The loop end time.\n   */\n  get loopEnd() {\n    return this._loopEnd;\n  }\n  set loopEnd(time) {\n    if (this.buffer.loaded) {\n      assertRange(this.toSeconds(time), 0, this.buffer.duration);\n    }\n    this._loopEnd = this.toSeconds(time);\n  }\n  /**\n   * The direction the buffer should play in\n   */\n  get reverse() {\n    return this.buffer.reverse;\n  }\n  set reverse(rev) {\n    this.buffer.reverse = rev;\n  }\n  /**\n   * The size of each chunk of audio that the\n   * buffer is chopped into and played back at.\n   */\n  get grainSize() {\n    return this._grainSize;\n  }\n  set grainSize(size) {\n    this._grainSize = this.toSeconds(size);\n    this._clock.frequency.setValueAtTime(this._playbackRate / this._grainSize, this.now());\n  }\n  /**\n   * The duration of the cross-fade between successive grains.\n   */\n  get overlap() {\n    return this._overlap;\n  }\n  set overlap(time) {\n    const computedTime = this.toSeconds(time);\n    assertRange(computedTime, 0);\n    this._overlap = computedTime;\n  }\n  /**\n   * If all the buffer is loaded\n   */\n  get loaded() {\n    return this.buffer.loaded;\n  }\n  dispose() {\n    super.dispose();\n    this.buffer.dispose();\n    this._clock.dispose();\n    this._activeSources.forEach(source => source.dispose());\n    return this;\n  }\n}","map":{"version":3,"mappings":"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","names":["Source","noOp","ToneAudioBuffer","defaultArg","optionsFromArguments","Clock","ToneBufferSource","intervalToFrequencyRatio","assertRange","GrainPlayer","constructor","getDefaults","arguments","options","buffer","onload","onerror","reverse","url","_clock","context","callback","_tick","bind","frequency","grainSize","_playbackRate","playbackRate","_grainSize","_overlap","overlap","detune","loop","loopStart","loopEnd","on","_onstop","Object","assign","_start","time","offset","duration","toSeconds","getValueAtTime","start","stop","restart","_restart","_stop","_activeSources","forEach","source","fadeOut","onstop","ticks","getTicksAtTime","log","fadeIn","_loopStart","_loopEnd","connect","output","push","onended","index","indexOf","splice","rate","loaded","rev","size","setValueAtTime","now","computedTime","dispose"],"sourceRoot":"","sources":["../../../../Tone/source/buffer/GrainPlayer.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}