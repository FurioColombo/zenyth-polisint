{"ast":null,"code":"import _regeneratorRuntime from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.reflect.has.js\";\nimport \"core-js/modules/es.reflect.to-string-tag.js\";\nimport { __awaiter } from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { assert } from \"../../core/util/Debug\";\nimport { theWindow } from \"../../core/context/AudioContext\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * A wrapper around the MediaRecorder API. Unlike the rest of Tone.js, this module does not offer\n * any sample-accurate scheduling because it is not a feature of the MediaRecorder API.\n * This is only natively supported in Chrome and Firefox.\n * For a cross-browser shim, install (audio-recorder-polyfill)[https://www.npmjs.com/package/audio-recorder-polyfill].\n * @example\n * const recorder = new Tone.Recorder();\n * const synth = new Tone.Synth().connect(recorder);\n * // start recording\n * recorder.start();\n * // generate a few notes\n * synth.triggerAttackRelease(\"C3\", 0.5);\n * synth.triggerAttackRelease(\"C4\", 0.5, \"+1\");\n * synth.triggerAttackRelease(\"C5\", 0.5, \"+2\");\n * // wait for the notes to end and stop the recording\n * setTimeout(async () => {\n * \t// the recorded audio is returned as a blob\n * \tconst recording = await recorder.stop();\n * \t// download the recording by creating an anchor element and blob url\n * \tconst url = URL.createObjectURL(recording);\n * \tconst anchor = document.createElement(\"a\");\n * \tanchor.download = \"recording.webm\";\n * \tanchor.href = url;\n * \tanchor.click();\n * }, 4000);\n * @category Component\n */\nexport var Recorder = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Recorder, _ToneAudioNode);\n  var _super = _createSuper(Recorder);\n  function Recorder() {\n    var _this;\n    _classCallCheck(this, Recorder);\n    _this = _super.call(this, optionsFromArguments(Recorder.getDefaults(), arguments));\n    _this.name = \"Recorder\";\n    var options = optionsFromArguments(Recorder.getDefaults(), arguments);\n    _this.input = new Gain({\n      context: _this.context\n    });\n    assert(Recorder.supported, \"Media Recorder API is not available\");\n    _this._stream = _this.context.createMediaStreamDestination();\n    _this.input.connect(_this._stream);\n    _this._recorder = new MediaRecorder(_this._stream.stream, {\n      mimeType: options.mimeType\n    });\n    return _this;\n  }\n  _createClass(Recorder, [{\n    key: \"mimeType\",\n    get:\n    /**\n     * The mime type is the format that the audio is encoded in. For Chrome\n     * that is typically webm encoded as \"vorbis\".\n     */\n    function get() {\n      return this._recorder.mimeType;\n    }\n    /**\n     * Test if your platform supports the Media Recorder API. If it's not available,\n     * try installing this (polyfill)[https://www.npmjs.com/package/audio-recorder-polyfill].\n     */\n  }, {\n    key: \"state\",\n    get:\n    /**\n     * Get the playback state of the Recorder, either \"started\", \"stopped\" or \"paused\"\n     */\n    function get() {\n      if (this._recorder.state === \"inactive\") {\n        return \"stopped\";\n      } else if (this._recorder.state === \"paused\") {\n        return \"paused\";\n      } else {\n        return \"started\";\n      }\n    }\n    /**\n     * Start the Recorder. Returns a promise which resolves\n     * when the recorder has started.\n     */\n  }, {\n    key: \"start\",\n    value: function start() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _this2 = this;\n        var startPromise;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              assert(this.state !== \"started\", \"Recorder is already started\");\n              startPromise = new Promise(function (done) {\n                var handleStart = function handleStart() {\n                  _this2._recorder.removeEventListener(\"start\", handleStart, false);\n                  done();\n                };\n                _this2._recorder.addEventListener(\"start\", handleStart, false);\n              });\n              this._recorder.start();\n              _context.next = 5;\n              return startPromise;\n            case 5:\n              return _context.abrupt(\"return\", _context.sent);\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\n     * Stop the recorder. Returns a promise with the recorded content until this point\n     * encoded as [[mimeType]]\n     */\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _this3 = this;\n        var dataPromise;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              assert(this.state !== \"stopped\", \"Recorder is not started\");\n              dataPromise = new Promise(function (done) {\n                var handleData = function handleData(e) {\n                  _this3._recorder.removeEventListener(\"dataavailable\", handleData, false);\n                  done(e.data);\n                };\n                _this3._recorder.addEventListener(\"dataavailable\", handleData, false);\n              });\n              this._recorder.stop();\n              _context2.next = 5;\n              return dataPromise;\n            case 5:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n    }\n    /**\n     * Pause the recorder\n     */\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      assert(this.state === \"started\", \"Recorder must be started\");\n      this._recorder.pause();\n      return this;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Recorder.prototype), \"dispose\", this).call(this);\n      this.input.dispose();\n      this._stream.disconnect();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return ToneAudioNode.getDefaults();\n    }\n  }, {\n    key: \"supported\",\n    get: function get() {\n      return theWindow !== null && Reflect.has(theWindow, \"MediaRecorder\");\n    }\n  }]);\n  return Recorder;\n}(ToneAudioNode);","map":{"version":3,"mappings":"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","names":["ToneAudioNode","Gain","assert","theWindow","optionsFromArguments","Recorder","getDefaults","arguments","options","input","context","supported","_stream","createMediaStreamDestination","connect","_recorder","MediaRecorder","stream","mimeType","state","startPromise","Promise","handleStart","removeEventListener","done","addEventListener","start","dataPromise","handleData","e","data","stop","pause","dispose","disconnect","Reflect","has"],"sourceRoot":"","sources":["../../../../Tone/component/channel/Recorder.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}