{"ast":null,"code":"import _regeneratorRuntime from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.function.bind.js\";\nimport \"core-js/modules/es.array.reverse.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { __awaiter, __decorate } from \"tslib\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isUndef } from \"../../core/util/TypeCheck\";\nimport { Source } from \"../Source\";\nimport { ToneBufferSource } from \"./ToneBufferSource\";\nimport { assertRange } from \"../../core/util/Debug\";\nimport { timeRange } from \"../../core/util/Decorator\";\n/**\n * Player is an audio file player with start, loop, and stop functions.\n * @example\n * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/gong_1.mp3\").toDestination();\n * // play as soon as the buffer is loaded\n * player.autostart = true;\n * @category Source\n */\nexport var Player = /*#__PURE__*/function (_Source) {\n  _inherits(Player, _Source);\n  var _super = _createSuper(Player);\n  function Player() {\n    var _this;\n    _classCallCheck(this, Player);\n    _this = _super.call(this, optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]));\n    _this.name = \"Player\";\n    /**\n     * All of the active buffer source nodes\n     */\n    _this._activeSources = new Set();\n    var options = optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]);\n    _this._buffer = new ToneAudioBuffer({\n      onload: _this._onload.bind(_assertThisInitialized(_this), options.onload),\n      onerror: options.onerror,\n      reverse: options.reverse,\n      url: options.url\n    });\n    _this.autostart = options.autostart;\n    _this._loop = options.loop;\n    _this._loopStart = options.loopStart;\n    _this._loopEnd = options.loopEnd;\n    _this._playbackRate = options.playbackRate;\n    _this.fadeIn = options.fadeIn;\n    _this.fadeOut = options.fadeOut;\n    return _this;\n  }\n  _createClass(Player, [{\n    key: \"load\",\n    value:\n    /**\n     * Load the audio file as an audio buffer.\n     * Decodes the audio asynchronously and invokes\n     * the callback once the audio buffer loads.\n     * Note: this does not need to be called if a url\n     * was passed in to the constructor. Only use this\n     * if you want to manually load a new url.\n     * @param url The url of the buffer to load. Filetype support depends on the browser.\n     */\n    function load(url) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this._buffer.load(url);\n            case 2:\n              this._onload();\n              return _context.abrupt(\"return\", this);\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\n     * Internal callback when the buffer is loaded.\n     */\n  }, {\n    key: \"_onload\",\n    value: function _onload() {\n      var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : noOp;\n      callback();\n      if (this.autostart) {\n        this.start();\n      }\n    }\n    /**\n     * Internal callback when the buffer is done playing.\n     */\n  }, {\n    key: \"_onSourceEnd\",\n    value: function _onSourceEnd(source) {\n      // invoke the onstop function\n      this.onstop(this);\n      // delete the source from the active sources\n      this._activeSources[\"delete\"](source);\n      if (this._activeSources.size === 0 && !this._synced && this._state.getValueAtTime(this.now()) === \"started\") {\n        // remove the 'implicitEnd' event and replace with an explicit end\n        this._state.cancel(this.now());\n        this._state.setStateAtTime(\"stopped\", this.now());\n      }\n    }\n    /**\n     * Play the buffer at the given startTime. Optionally add an offset\n     * and/or duration which will play the buffer from a position\n     * within the buffer for the given duration.\n     *\n     * @param  time When the player should start.\n     * @param  offset The offset from the beginning of the sample to start at.\n     * @param  duration How long the sample should play. If no duration is given, it will default to the full length of the sample (minus any offset)\n     */\n  }, {\n    key: \"start\",\n    value: function start(time, offset, duration) {\n      _get(_getPrototypeOf(Player.prototype), \"start\", this).call(this, time, offset, duration);\n      return this;\n    }\n    /**\n     * Internal start method\n     */\n  }, {\n    key: \"_start\",\n    value: function _start(startTime, offset, duration) {\n      // if it's a loop the default offset is the loopStart point\n      if (this._loop) {\n        offset = defaultArg(offset, this._loopStart);\n      } else {\n        // otherwise the default offset is 0\n        offset = defaultArg(offset, 0);\n      }\n      // compute the values in seconds\n      var computedOffset = this.toSeconds(offset);\n      // compute the duration which is either the passed in duration of the buffer.duration - offset\n      var origDuration = duration;\n      duration = defaultArg(duration, Math.max(this._buffer.duration - computedOffset, 0));\n      var computedDuration = this.toSeconds(duration);\n      // scale it by the playback rate\n      computedDuration = computedDuration / this._playbackRate;\n      // get the start time\n      startTime = this.toSeconds(startTime);\n      // make the source\n      var source = new ToneBufferSource({\n        url: this._buffer,\n        context: this.context,\n        fadeIn: this.fadeIn,\n        fadeOut: this.fadeOut,\n        loop: this._loop,\n        loopEnd: this._loopEnd,\n        loopStart: this._loopStart,\n        onended: this._onSourceEnd.bind(this),\n        playbackRate: this._playbackRate\n      }).connect(this.output);\n      // set the looping properties\n      if (!this._loop && !this._synced) {\n        // cancel the previous stop\n        this._state.cancel(startTime + computedDuration);\n        // if it's not looping, set the state change at the end of the sample\n        this._state.setStateAtTime(\"stopped\", startTime + computedDuration, {\n          implicitEnd: true\n        });\n      }\n      // add it to the array of active sources\n      this._activeSources.add(source);\n      // start it\n      if (this._loop && isUndef(origDuration)) {\n        source.start(startTime, computedOffset);\n      } else {\n        // subtract the fade out time\n        source.start(startTime, computedOffset, computedDuration - this.toSeconds(this.fadeOut));\n      }\n    }\n    /**\n     * Stop playback.\n     */\n  }, {\n    key: \"_stop\",\n    value: function _stop(time) {\n      var computedTime = this.toSeconds(time);\n      this._activeSources.forEach(function (source) {\n        return source.stop(computedTime);\n      });\n    }\n    /**\n     * Stop and then restart the player from the beginning (or offset)\n     * @param  time When the player should start.\n     * @param  offset The offset from the beginning of the sample to start at.\n     * @param  duration How long the sample should play. If no duration is given,\n     * \t\t\t\t\tit will default to the full length of the sample (minus any offset)\n     */\n  }, {\n    key: \"restart\",\n    value: function restart(time, offset, duration) {\n      _get(_getPrototypeOf(Player.prototype), \"restart\", this).call(this, time, offset, duration);\n      return this;\n    }\n  }, {\n    key: \"_restart\",\n    value: function _restart(time, offset, duration) {\n      this._stop(time);\n      this._start(time, offset, duration);\n    }\n    /**\n     * Seek to a specific time in the player's buffer. If the\n     * source is no longer playing at that time, it will stop.\n     * @param offset The time to seek to.\n     * @param when The time for the seek event to occur.\n     * @example\n     * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/gurgling_theremin_1.mp3\", () => {\n     * \tplayer.start();\n     * \t// seek to the offset in 1 second from now\n     * \tplayer.seek(0.4, \"+1\");\n     * }).toDestination();\n     */\n  }, {\n    key: \"seek\",\n    value: function seek(offset, when) {\n      var computedTime = this.toSeconds(when);\n      if (this._state.getValueAtTime(computedTime) === \"started\") {\n        var computedOffset = this.toSeconds(offset);\n        // if it's currently playing, stop it\n        this._stop(computedTime);\n        // restart it at the given time\n        this._start(computedTime, computedOffset);\n      }\n      return this;\n    }\n    /**\n     * Set the loop start and end. Will only loop if loop is set to true.\n     * @param loopStart The loop start time\n     * @param loopEnd The loop end time\n     * @example\n     * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/malevoices_aa2_F3.mp3\").toDestination();\n     * // loop between the given points\n     * player.setLoopPoints(0.2, 0.3);\n     * player.loop = true;\n     * player.autostart = true;\n     */\n  }, {\n    key: \"setLoopPoints\",\n    value: function setLoopPoints(loopStart, loopEnd) {\n      this.loopStart = loopStart;\n      this.loopEnd = loopEnd;\n      return this;\n    }\n    /**\n     * If loop is true, the loop will start at this position.\n     */\n  }, {\n    key: \"loopStart\",\n    get: function get() {\n      return this._loopStart;\n    },\n    set: function set(loopStart) {\n      this._loopStart = loopStart;\n      if (this.buffer.loaded) {\n        assertRange(this.toSeconds(loopStart), 0, this.buffer.duration);\n      }\n      // get the current source\n      this._activeSources.forEach(function (source) {\n        source.loopStart = loopStart;\n      });\n    }\n    /**\n     * If loop is true, the loop will end at this position.\n     */\n  }, {\n    key: \"loopEnd\",\n    get: function get() {\n      return this._loopEnd;\n    },\n    set: function set(loopEnd) {\n      this._loopEnd = loopEnd;\n      if (this.buffer.loaded) {\n        assertRange(this.toSeconds(loopEnd), 0, this.buffer.duration);\n      }\n      // get the current source\n      this._activeSources.forEach(function (source) {\n        source.loopEnd = loopEnd;\n      });\n    }\n    /**\n     * The audio buffer belonging to the player.\n     */\n  }, {\n    key: \"buffer\",\n    get: function get() {\n      return this._buffer;\n    },\n    set: function set(buffer) {\n      this._buffer.set(buffer);\n    }\n    /**\n     * If the buffer should loop once it's over.\n     * @example\n     * const player = new Tone.Player(\"https://tonejs.github.io/audio/drum-samples/breakbeat.mp3\").toDestination();\n     * player.loop = true;\n     * player.autostart = true;\n     */\n  }, {\n    key: \"loop\",\n    get: function get() {\n      return this._loop;\n    },\n    set: function set(loop) {\n      // if no change, do nothing\n      if (this._loop === loop) {\n        return;\n      }\n      this._loop = loop;\n      // set the loop of all of the sources\n      this._activeSources.forEach(function (source) {\n        source.loop = loop;\n      });\n      if (loop) {\n        // remove the next stopEvent\n        var stopEvent = this._state.getNextState(\"stopped\", this.now());\n        if (stopEvent) {\n          this._state.cancel(stopEvent.time);\n        }\n      }\n    }\n    /**\n     * Normal speed is 1. The pitch will change with the playback rate.\n     * @example\n     * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/femalevoices_aa2_A5.mp3\").toDestination();\n     * // play at 1/4 speed\n     * player.playbackRate = 0.25;\n     * // play as soon as the buffer is loaded\n     * player.autostart = true;\n     */\n  }, {\n    key: \"playbackRate\",\n    get: function get() {\n      return this._playbackRate;\n    },\n    set: function set(rate) {\n      this._playbackRate = rate;\n      var now = this.now();\n      // cancel the stop event since it's at a different time now\n      var stopEvent = this._state.getNextState(\"stopped\", now);\n      if (stopEvent && stopEvent.implicitEnd) {\n        this._state.cancel(stopEvent.time);\n        this._activeSources.forEach(function (source) {\n          return source.cancelStop();\n        });\n      }\n      // set all the sources\n      this._activeSources.forEach(function (source) {\n        source.playbackRate.setValueAtTime(rate, now);\n      });\n    }\n    /**\n     * If the buffer should be reversed\n     * @example\n     * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/chime_1.mp3\").toDestination();\n     * player.autostart = true;\n     * player.reverse = true;\n     */\n  }, {\n    key: \"reverse\",\n    get: function get() {\n      return this._buffer.reverse;\n    },\n    set: function set(rev) {\n      this._buffer.reverse = rev;\n    }\n    /**\n     * If the buffer is loaded\n     */\n  }, {\n    key: \"loaded\",\n    get: function get() {\n      return this._buffer.loaded;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Player.prototype), \"dispose\", this).call(this);\n      // disconnect all of the players\n      this._activeSources.forEach(function (source) {\n        return source.dispose();\n      });\n      this._activeSources.clear();\n      this._buffer.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Source.getDefaults(), {\n        autostart: false,\n        fadeIn: 0,\n        fadeOut: 0,\n        loop: false,\n        loopEnd: 0,\n        loopStart: 0,\n        onload: noOp,\n        onerror: noOp,\n        playbackRate: 1,\n        reverse: false\n      });\n    }\n  }]);\n  return Player;\n}(Source);\n__decorate([timeRange(0)], Player.prototype, \"fadeIn\", void 0);\n__decorate([timeRange(0)], Player.prototype, \"fadeOut\", void 0);","map":{"version":3,"mappings":"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","names":["ToneAudioBuffer","defaultArg","optionsFromArguments","noOp","isUndef","Source","ToneBufferSource","assertRange","timeRange","Player","getDefaults","arguments","Set","options","_buffer","onload","_onload","bind","onerror","reverse","url","autostart","_loop","loop","_loopStart","loopStart","_loopEnd","loopEnd","_playbackRate","playbackRate","fadeIn","fadeOut","load","callback","start","source","onstop","_activeSources","size","_synced","_state","getValueAtTime","now","cancel","setStateAtTime","time","offset","duration","startTime","computedOffset","toSeconds","origDuration","Math","max","computedDuration","context","onended","_onSourceEnd","connect","output","implicitEnd","add","computedTime","forEach","stop","_stop","_start","when","buffer","loaded","set","stopEvent","getNextState","rate","cancelStop","setValueAtTime","rev","dispose","clear","Object","assign","__decorate"],"sourceRoot":"","sources":["../../../../Tone/source/buffer/Player.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}