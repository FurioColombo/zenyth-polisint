{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-219a87d6\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = {\n  class: \"container\"\n};\nconst _hoisted_3 = {\n  class: \"container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Octave = _resolveComponent(\"Octave\");\n  const _component_MIDIKeyboard = _resolveComponent(\"MIDIKeyboard\");\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: \"span\",\n    onMouseleave: _cache[0] || (_cache[0] = (...args) => _ctx.handleMouseLeave && _ctx.handleMouseLeave(...args))\n  }, [_createElementVNode(\"div\", _hoisted_1, [_createVNode(_component_Octave, {\n    ref: \"oct1\",\n    octaveNumber: 1,\n    onVirtualKeyDown: $options.handleNoteDown,\n    onVirtualKeyUp: $options.handleNoteUp\n  }, null, 8 /* PROPS */, [\"onVirtualKeyDown\", \"onVirtualKeyUp\"])]), _createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_Octave, {\n    ref: \"oct2\",\n    octaveNumber: 2,\n    onVirtualKeyDown: $options.handleNoteDown,\n    onVirtualKeyUp: $options.handleNoteUp\n  }, null, 8 /* PROPS */, [\"onVirtualKeyDown\", \"onVirtualKeyUp\"])]), _createElementVNode(\"div\", _hoisted_3, [_createVNode(_component_Octave, {\n    ref: \"oct3\",\n    octaveNumber: 3,\n    onVirtualKeyDown: $options.handleNoteDown,\n    onVirtualKeyUp: $options.handleNoteUp\n  }, null, 8 /* PROPS */, [\"onVirtualKeyDown\", \"onVirtualKeyUp\"])]), _createVNode(_component_MIDIKeyboard, {\n    onMIDIDown: $options.handleMIDIDown,\n    onMIDIUp: $options.handleMIDIUp\n  }, null, 8 /* PROPS */, [\"onMIDIDown\", \"onMIDIUp\"])], 32 /* HYDRATE_EVENTS */);\n}","map":{"version":3,"mappings":";;;EAESA,KAAK,EAAC;AAAW;;EAQjBA,KAAK,EAAC;AAAW;;EAQjBA,KAAK,EAAC;AAAW;;;;uBAjBxBC,oBA0BM;IA1BDD,KAAK,EAAC,MAAM;IAAEE,YAAU,yCAAEC,uDAAgB;MAC7CC,oBAOM,OAPNC,UAOM,GANJC,aAKEC;IAJAC,GAAG,EAAC,MAAM;IACTC,YAAY,EAAE,CAAC;IACfC,gBAAc,EAAEC,uBAAc;IAC9BC,cAAY,EAAED;qEAGnBP,oBAOM,OAPNS,UAOM,GANJP,aAKEC;IAJAC,GAAG,EAAC,MAAM;IACTC,YAAY,EAAE,CAAC;IACfC,gBAAc,EAAEC,uBAAc;IAC9BC,cAAY,EAAED;qEAGnBP,oBAOM,OAPNU,UAOM,GANJR,aAKEC;IAJAC,GAAG,EAAC,MAAM;IACTC,YAAY,EAAE,CAAC;IACfC,gBAAc,EAAEC,uBAAc;IAC9BC,cAAY,EAAED;qEAGnBL,aAAkES;IAAnDC,UAAQ,EAAEL,uBAAc;IAAGM,QAAM,EAAEN","names":["class","_createElementBlock","onMouseleave","_ctx","_createElementVNode","_hoisted_1","_createVNode","_component_Octave","ref","octaveNumber","onVirtualKeyDown","$options","onVirtualKeyUp","_hoisted_2","_hoisted_3","_component_MIDIKeyboard","onMIDIDown","onMIDIUp"],"sourceRoot":"","sources":["/Users/guglielmofratticioli/Documents/POLIMI/FurioColombo.github.io/src/views/Synth/Keyboard/PianoKeyboard.vue"],"sourcesContent":["<template>\n  <div class=\"span\" @mouseleave=\"handleMouseLeave\">\n    <div class=\"container\">\n      <Octave\n        ref=\"oct1\"\n        :octaveNumber=\"1\"\n        @virtualKeyDown=\"handleNoteDown\"\n        @virtualKeyUp=\"handleNoteUp\"\n      />\n    </div>\n    <div class=\"container\">\n      <Octave\n        ref=\"oct2\"\n        :octaveNumber=\"2\"\n        @virtualKeyDown=\"handleNoteDown\"\n        @virtualKeyUp=\"handleNoteUp\"\n      />\n    </div>\n    <div class=\"container\">\n      <Octave\n        ref=\"oct3\"\n        :octaveNumber=\"3\"\n        @virtualKeyDown=\"handleNoteDown\"\n        @virtualKeyUp=\"handleNoteUp\"\n      />\n    </div>\n    <MIDIKeyboard @MIDIDown=\"handleMIDIDown\" @MIDIUp=\"handleMIDIUp\" />\n  </div>\n</template>\n\n<script>\nimport MIDIKeyboard from \"./MIDIKeyboard.vue\";\nimport Octave from \"./Octave.vue\";\nimport * as Tone from \"tone\";\n\n\nexport default {\n  name: \"PianoKeyboard\",\n  components: {\n    Octave,\n    MIDIKeyboard,\n  },\n  data() {\n    return {\n      //From here we can transpose the whole keyboard by octaves\n      ocTranspose: 1,\n      // Object to track which keys are currently being held down\n      keysDown: {},\n      keys: \"awsedftgyhujkolpòà\",\n      notes: [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"],\n      //Transposition amount (in octaves) for the computer keyboard\n      keyboardTranspose: 0,\n      mouseDown: false,\n    };\n  },\n  mounted() {\n    // Add keydown and keyup event listeners to the window object\n    window.addEventListener(\"keydown\", this.handleKeyDown);\n    window.addEventListener(\"keyup\", this.handleKeyUp);\n  },\n  beforeDestroy() {\n    // Remove keydown and keyup event listeners from the window object\n    window.removeEventListener(\"keydown\", this.handleKeyDown);\n    window.removeEventListener(\"keyup\", this.handleKeyUp);\n  },\n\n  methods: {\n    handleMouseUp(){\n      this.mouseDown = false\n    },\n    handleKeyDown(event) {\n      // If the key is not currently being held down, handle the keydown event\n      if (!this.keysDown[event.key] && this.keys.includes(event.key)) {\n        let note = this.notes[this.keys.indexOf(event.key) % 12];\n        let octave = parseInt(this.keys.indexOf(event.key) / 12, 10);\n        this.handleNoteDown(note, 2 + octave + this.keyboardTranspose, 100);\n        // Set keyDown flag to true\n        this.keysDown[event.key] = true;\n        // Change color on keyboard\n        if (\n          2 + octave + this.keyboardTranspose > 0 &&\n          2 + octave + this.keyboardTranspose < 4\n        )\n          this.$refs[\n            \"oct\" + (2 + octave + this.keyboardTranspose)\n          ].switchColorPress(note);\n      }\n      // Change octave of computer keyboard with z or x\n      if (!this.keysDown[event.key] && event.key == \"z\") {\n        this.keyboardTranspose = this.keyboardTranspose - 1;\n      }\n      if (!this.keysDown[event.key] && event.key == \"x\") {\n        this.keyboardTranspose = this.keyboardTranspose + 1;\n      }\n    },\n    handleKeyUp(event) {\n      // If the key is currently being held down, handle the keyup event\n      if (this.keysDown[event.key]) {\n        let note = this.notes[this.keys.indexOf(event.key) % 12];\n        let octave = parseInt(this.keys.indexOf(event.key) / 12, 10);\n        this.handleNoteUp(note, 2 + octave + this.keyboardTranspose);\n        // Set keyDown flag to false\n        this.keysDown[event.key] = false;\n        // Change color on keyboard\n        if (\n          2 + octave + this.keyboardTranspose > 0 &&\n          2 + octave + this.keyboardTranspose < 4\n        )\n          this.$refs[\n            \"oct\" + (2 + octave + this.keyboardTranspose)\n          ].switchColorRelease(note);\n      }\n    },\n    handleMIDIDown(note, octave, velocity) {\n      if (octave > 0 && octave < 4)\n        this.$refs[\"oct\" + octave].switchColorPress(note);\n      this.synths.list.forEach(synth => {\n        //console.log(\"Play note: \"+(note+octave)+\" at velocity: \"+velocity+\" from MIDI\")\n        synth.playNote(note+octave, velocity);\n      });\n      //play filter envelopes\n      for(let chain in this.filterChains){\n        for( let filter in this.filterChains[chain]){\n          this.filterChains[chain][filter].playNote()\n        }\n      }\n      this.$emit(\"noteDown\", note)\n    },\n    handleMIDIUp(note, octave) {\n      //console.log(\"MIDI released \"+note+octave)\n      if (octave > 0 && octave < 4)\n        this.$refs[\"oct\" + octave].switchColorRelease(note);\n      this.synths.list.forEach(synth => {\n        synth.stopNote(note+octave);\n      });\n      //stop filter envelopes\n      for(let chain in this.filterChains){\n        for( let filter in this.filterChains[chain]){\n          this.filterChains[chain][filter].stopNote()\n        }\n      }\n    },\n\n    handleNoteDown(note, octave, velocity = 100) {\n      let finalOctave = parseInt(octave) + this.ocTranspose;\n      //console.log(note+finalOctave+\" pressed\")\n      this.synths.list.forEach(synth => {\n        synth.playNote(note+finalOctave, velocity);\n        //console.log(synth)\n      });\n      \n      //play filter envelopes\n      for(let chain in this.filterChains){\n        for( let filter in this.filterChains[chain]){\n          this.filterChains[chain][filter].playNote()\n        }\n      }\n      this.$emit(\"noteDown\", note+finalOctave)\n    },\n    handleNoteUp(note, octave) {\n      let finalOctave = parseInt(octave) + this.ocTranspose;\n      //console.log(note+finalOctave+\" released\")\n      this.synths.list.forEach(synth => {\n        synth.stopNote(note+finalOctave);\n      });\n      //stop filter envelopes\n      for(let chain in this.filterChains){\n        for( let filter in this.filterChains[chain]){\n          this.filterChains[chain][filter].stopNote()\n        }\n      }\n    },\n  }\n  \n};\n</script>\n\n<style scoped>\n.container {\n  background-color: white;\n  width: 100%;\n  height: 100%;\n  box-sizing: border-box;\n  position: relative;\n  border-top: .1vw solid gray\n}\n\n.span {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-row: 3;\n  grid-column: span 3;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}