{"ast":null,"code":"export default {\n  data() {\n    return {\n      midiAccess: null,\n      midiInput: null,\n      notes: [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"],\n      lowestOctave: -2\n    };\n  },\n  mounted() {\n    navigator.requestMIDIAccess().then(midiAccess => {\n      if (midiAccess.inputs.size > 0) {\n        this.midiAccess = midiAccess;\n        this.midiInput = midiAccess.inputs.values().next().value;\n        //console.log(this.midiInput);\n        this.midiInput.addEventListener('midimessage', this.handleMidiMessage);\n      } else {\n        //console.log('There are no MIDI inputs available, if you need MIDI, reload the page with a MIDI keyboard connected');\n      }\n    });\n  },\n  methods: {\n    handleMidiMessage(event) {\n      let [status, note, velocity] = event.data;\n      let label = this.notes[note % 12];\n      let octave = this.lowestOctave + parseInt(note / 12, 10);\n      if (status == 144) {\n        //console.log(`Keydown: note=${label}, velocity=${velocity}`);\n        this.$emit(\"MIDIDown\", label, octave, velocity);\n      } else if (status == 128) {\n        //console.log(`Keyup: note=${label}, velocity=${velocity}`);\n        this.$emit(\"MIDIUp\", label, octave);\n      }\n    }\n  }\n};","map":{"version":3,"mappings":"AAIA,eAAgB;EACdA,IAAI,GAAG;IACL,OAAO;MACLC,UAAU,EAAE,IAAI;MAChBC,SAAS,EAAE,IAAI;MACfC,KAAK,EAAE,CAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAE,CAAG;MAC1EC,YAAY,EAAE,CAAC;IACjB,CAAC;EACH,CAAC;EACDC,OAAO,GAAG;IACRC,SAAS,CAACC,iBAAiB,EAAC,CACzBC,IAAI,CAAEP,UAAU,IAAK;MACpB,IAAGA,UAAU,CAACQ,MAAM,CAACC,IAAI,GAAC,CAAC,EAAC;QACxB,IAAI,CAACT,UAAS,GAAIA,UAAU;QAC5B,IAAI,CAACC,SAAQ,GAAID,UAAU,CAACQ,MAAM,CAACE,MAAM,EAAE,CAACC,IAAI,EAAE,CAACC,KAAK;QACxD;QACA,IAAI,CAACX,SAAS,CAACY,gBAAgB,CAAC,aAAa,EAAE,IAAI,CAACC,iBAAiB;MACzE,CAAC,MAAI;QACD;MAAA;IAGN,CAAC,CAAC;EACN,CAAC;EACDC,OAAO,EAAE;IACPD,iBAAiB,CAACE,KAAK,EAAC;MACpB,IAAI,CAACC,MAAM,EAAEC,IAAI,EAAEC,QAAQ,IAAIH,KAAK,CAACjB,IAAI;MACzC,IAAIqB,KAAI,GAAI,IAAI,CAAClB,KAAK,CAACgB,IAAI,GAAC,EAAE;MAC9B,IAAIG,MAAK,GAAK,IAAI,CAAClB,YAAY,GAACmB,QAAQ,CAACJ,IAAI,GAAC,EAAE,EAAC,EAAE,CAAC;MACpD,IAAID,MAAK,IAAK,GAAG,EAAE;QACf;QACA,IAAI,CAACM,KAAK,CAAC,UAAU,EAAEH,KAAK,EAAEC,MAAM,EAAEF,QAAQ,CAAC;MACnD,OAAO,IAAIF,MAAK,IAAK,GAAG,EAAE;QACtB;QACA,IAAI,CAACM,KAAK,CAAC,QAAQ,EAAEH,KAAK,EAAEC,MAAM,CAAC;MACvC;IACJ;EACF;AACF,CAAC","names":["data","midiAccess","midiInput","notes","lowestOctave","mounted","navigator","requestMIDIAccess","then","inputs","size","values","next","value","addEventListener","handleMidiMessage","methods","event","status","note","velocity","label","octave","parseInt","$emit"],"sourceRoot":"","sources":["/Users/guglielmofratticioli/Documents/POLIMI/FurioColombo.github.io/src/views/Synth/Keyboard/MIDIKeyboard.vue"],"sourcesContent":["<template>\n</template>\n\n<script>\nexport default ({\n  data() {\n    return {\n      midiAccess: null,\n      midiInput: null,\n      notes: [ \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\" ],\n      lowestOctave: -2,\n    };\n  },\n  mounted() {\n    navigator.requestMIDIAccess()\n      .then((midiAccess) => {\n        if(midiAccess.inputs.size>0){\n            this.midiAccess = midiAccess;\n            this.midiInput = midiAccess.inputs.values().next().value;\n            //console.log(this.midiInput);\n            this.midiInput.addEventListener('midimessage', this.handleMidiMessage)\n        }else{\n            //console.log('There are no MIDI inputs available, if you need MIDI, reload the page with a MIDI keyboard connected');\n        }\n        \n      });\n  },\n  methods: {\n    handleMidiMessage(event){\n        let [status, note, velocity] = event.data;\n        let label = this.notes[note%12]\n        let octave = (this.lowestOctave+parseInt(note/12,10))\n        if (status == 144) {\n            //console.log(`Keydown: note=${label}, velocity=${velocity}`);\n            this.$emit(\"MIDIDown\", label, octave, velocity);\n        } else if (status == 128) {\n            //console.log(`Keyup: note=${label}, velocity=${velocity}`);\n            this.$emit(\"MIDIUp\", label, octave);\n        }\n    },\n  },\n});\n</script>\n\n<style>\n\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}