{"ast":null,"code":"import _classCallCheck from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n/**\n * Panner is an equal power Left/Right Panner. It is a wrapper around the StereoPannerNode.\n * @example\n * return Tone.Offline(() => {\n * // move the input signal from right to left\n * \tconst panner = new Tone.Panner(1).toDestination();\n * \tpanner.pan.rampTo(-1, 0.5);\n * \tconst osc = new Tone.Oscillator(100).connect(panner).start();\n * }, 0.5, 2);\n * @category Component\n */\nexport var Panner = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Panner, _ToneAudioNode);\n  var _super = _createSuper(Panner);\n  function Panner() {\n    var _this;\n    _classCallCheck(this, Panner);\n    _this = _super.call(this, Object.assign(optionsFromArguments(Panner.getDefaults(), arguments, [\"pan\"])));\n    _this.name = \"Panner\";\n    /**\n     * the panner node\n     */\n    _this._panner = _this.context.createStereoPanner();\n    _this.input = _this._panner;\n    _this.output = _this._panner;\n    var options = optionsFromArguments(Panner.getDefaults(), arguments, [\"pan\"]);\n    _this.pan = new Param({\n      context: _this.context,\n      param: _this._panner.pan,\n      value: options.pan,\n      minValue: -1,\n      maxValue: 1\n    });\n    // this is necessary for standardized-audio-context\n    // doesn't make any difference for the native AudioContext\n    // https://github.com/chrisguttandin/standardized-audio-context/issues/647\n    _this._panner.channelCount = options.channelCount;\n    _this._panner.channelCountMode = \"explicit\";\n    // initial value\n    readOnly(_assertThisInitialized(_this), \"pan\");\n    return _this;\n  }\n  _createClass(Panner, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Panner.prototype), \"dispose\", this).call(this);\n      this._panner.disconnect();\n      this.pan.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        pan: 0,\n        channelCount: 1\n      });\n    }\n  }]);\n  return Panner;\n}(ToneAudioNode);","map":{"version":3,"mappings":";;;;;;;;AAAA,SAASA,KAAK,QAAQ,0BAA0B;AAChD,SAASC,aAAa,QAA8B,kCAAkC;AAEtF,SAASC,oBAAoB,QAAQ,0BAA0B;AAC/D,SAASC,QAAQ,QAAQ,2BAA2B;AAOpD;;;;;;;;;;;AAWA,WAAaC,MAAO;EAAA;EAAA;EA+BnB;IAAA;IAAA;IACC,0BAAMC,MAAM,CAACC,MAAM,CAACJ,oBAAoB,CAACE,MAAM,CAACG,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;IA9B3E,UAAI,GAAW,QAAQ;IAEhC;;;IAGQ,aAAO,GAAqB,MAAKC,OAAO,CAACC,kBAAkB,EAAE;IAC5D,WAAK,GAAqB,MAAKC,OAAO;IACtC,YAAM,GAAqB,MAAKA,OAAO;IAwB/C,IAAMC,OAAO,GAAGV,oBAAoB,CAACE,MAAM,CAACG,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,KAAK,CAAC,CAAC;IAE9E,MAAKK,GAAG,GAAG,IAAIb,KAAK,CAAC;MACpBS,OAAO,EAAE,MAAKA,OAAO;MACrBK,KAAK,EAAE,MAAKH,OAAO,CAACE,GAAG;MACvBE,KAAK,EAAEH,OAAO,CAACC,GAAG;MAClBG,QAAQ,EAAE,CAAC,CAAC;MACZC,QAAQ,EAAE;KACV,CAAC;IAEF;IACA;IACA;IACA,MAAKN,OAAO,CAACO,YAAY,GAAGN,OAAO,CAACM,YAAY;IAChD,MAAKP,OAAO,CAACQ,gBAAgB,GAAG,UAAU;IAE1C;IACAhB,QAAQ,gCAAO,KAAK,CAAC;IAAC;EACvB;EAAC;IAAA;IAAA,OASD,mBAAO;MACN;MACA,IAAI,CAACQ,OAAO,CAACS,UAAU,EAAE;MACzB,IAAI,CAACP,GAAG,CAACQ,OAAO,EAAE;MAClB,OAAO,IAAI;IACZ;EAAC;IAAA;IAAA,OAZD,uBAAkB;MACjB,OAAOhB,MAAM,CAACC,MAAM,CAACL,aAAa,CAACM,WAAW,EAAE,EAAE;QACjDM,GAAG,EAAE,CAAC;QACNK,YAAY,EAAE;OACd,CAAC;IACH;EAAC;EAAA;AAAA,EA1D0BjB,aAAgC","names":["Param","ToneAudioNode","optionsFromArguments","readOnly","Panner","Object","assign","getDefaults","arguments","context","createStereoPanner","_panner","options","pan","param","value","minValue","maxValue","channelCount","channelCountMode","disconnect","dispose"],"sourceRoot":"","sources":["../../../../Tone/component/channel/Panner.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}