{"ast":null,"code":"import _classCallCheck from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { FeedbackEffect } from \"./FeedbackEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Delay } from \"../core/context/Delay\";\nimport { CrossFade } from \"../component/channel/CrossFade\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { intervalToFrequencyRatio } from \"../core/type/Conversions\";\n/**\n * PitchShift does near-realtime pitch shifting to the incoming signal.\n * The effect is achieved by speeding up or slowing down the delayTime\n * of a DelayNode using a sawtooth wave.\n * Algorithm found in [this pdf](http://dsp-book.narod.ru/soundproc.pdf).\n * Additional reference by [Miller Pucket](http://msp.ucsd.edu/techniques/v0.11/book-html/node115.html).\n * @category Effect\n */\nexport var PitchShift = /*#__PURE__*/function (_FeedbackEffect) {\n  _inherits(PitchShift, _FeedbackEffect);\n  var _super = _createSuper(PitchShift);\n  function PitchShift() {\n    var _this;\n    _classCallCheck(this, PitchShift);\n    _this = _super.call(this, optionsFromArguments(PitchShift.getDefaults(), arguments, [\"pitch\"]));\n    _this.name = \"PitchShift\";\n    var options = optionsFromArguments(PitchShift.getDefaults(), arguments, [\"pitch\"]);\n    _this._frequency = new Signal({\n      context: _this.context\n    });\n    _this._delayA = new Delay({\n      maxDelay: 1,\n      context: _this.context\n    });\n    _this._lfoA = new LFO({\n      context: _this.context,\n      min: 0,\n      max: 0.1,\n      type: \"sawtooth\"\n    }).connect(_this._delayA.delayTime);\n    _this._delayB = new Delay({\n      maxDelay: 1,\n      context: _this.context\n    });\n    _this._lfoB = new LFO({\n      context: _this.context,\n      min: 0,\n      max: 0.1,\n      type: \"sawtooth\",\n      phase: 180\n    }).connect(_this._delayB.delayTime);\n    _this._crossFade = new CrossFade({\n      context: _this.context\n    });\n    _this._crossFadeLFO = new LFO({\n      context: _this.context,\n      min: 0,\n      max: 1,\n      type: \"triangle\",\n      phase: 90\n    }).connect(_this._crossFade.fade);\n    _this._feedbackDelay = new Delay({\n      delayTime: options.delayTime,\n      context: _this.context\n    });\n    _this.delayTime = _this._feedbackDelay.delayTime;\n    readOnly(_assertThisInitialized(_this), \"delayTime\");\n    _this._pitch = options.pitch;\n    _this._windowSize = options.windowSize;\n    // connect the two delay lines up\n    _this._delayA.connect(_this._crossFade.a);\n    _this._delayB.connect(_this._crossFade.b);\n    // connect the frequency\n    _this._frequency.fan(_this._lfoA.frequency, _this._lfoB.frequency, _this._crossFadeLFO.frequency);\n    // route the input\n    _this.effectSend.fan(_this._delayA, _this._delayB);\n    _this._crossFade.chain(_this._feedbackDelay, _this.effectReturn);\n    // start the LFOs at the same time\n    var now = _this.now();\n    _this._lfoA.start(now);\n    _this._lfoB.start(now);\n    _this._crossFadeLFO.start(now);\n    // set the initial value\n    _this.windowSize = _this._windowSize;\n    return _this;\n  }\n  _createClass(PitchShift, [{\n    key: \"pitch\",\n    get:\n    /**\n     * Repitch the incoming signal by some interval (measured in semi-tones).\n     * @example\n     * const pitchShift = new Tone.PitchShift().toDestination();\n     * const osc = new Tone.Oscillator().connect(pitchShift).start().toDestination();\n     * pitchShift.pitch = -12; // down one octave\n     * pitchShift.pitch = 7; // up a fifth\n     */\n    function get() {\n      return this._pitch;\n    },\n    set: function set(interval) {\n      this._pitch = interval;\n      var factor = 0;\n      if (interval < 0) {\n        this._lfoA.min = 0;\n        this._lfoA.max = this._windowSize;\n        this._lfoB.min = 0;\n        this._lfoB.max = this._windowSize;\n        factor = intervalToFrequencyRatio(interval - 1) + 1;\n      } else {\n        this._lfoA.min = this._windowSize;\n        this._lfoA.max = 0;\n        this._lfoB.min = this._windowSize;\n        this._lfoB.max = 0;\n        factor = intervalToFrequencyRatio(interval) - 1;\n      }\n      this._frequency.value = factor * (1.2 / this._windowSize);\n    }\n    /**\n     * The window size corresponds roughly to the sample length in a looping sampler.\n     * Smaller values are desirable for a less noticeable delay time of the pitch shifted\n     * signal, but larger values will result in smoother pitch shifting for larger intervals.\n     * A nominal range of 0.03 to 0.1 is recommended.\n     */\n  }, {\n    key: \"windowSize\",\n    get: function get() {\n      return this._windowSize;\n    },\n    set: function set(size) {\n      this._windowSize = this.toSeconds(size);\n      this.pitch = this._pitch;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(PitchShift.prototype), \"dispose\", this).call(this);\n      this._frequency.dispose();\n      this._delayA.dispose();\n      this._delayB.dispose();\n      this._lfoA.dispose();\n      this._lfoB.dispose();\n      this._crossFade.dispose();\n      this._crossFadeLFO.dispose();\n      this._feedbackDelay.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(FeedbackEffect.getDefaults(), {\n        pitch: 0,\n        windowSize: 0.1,\n        delayTime: 0,\n        feedback: 0\n      });\n    }\n  }]);\n  return PitchShift;\n}(FeedbackEffect);","map":{"version":3,"mappings":"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","names":["FeedbackEffect","optionsFromArguments","LFO","Delay","CrossFade","Signal","readOnly","intervalToFrequencyRatio","PitchShift","getDefaults","arguments","options","_frequency","context","_delayA","maxDelay","_lfoA","min","max","type","connect","delayTime","_delayB","_lfoB","phase","_crossFade","_crossFadeLFO","fade","_feedbackDelay","_pitch","pitch","_windowSize","windowSize","a","b","fan","frequency","effectSend","chain","effectReturn","now","start","interval","factor","value","size","toSeconds","dispose","Object","assign","feedback"],"sourceRoot":"","sources":["../../../Tone/effect/PitchShift.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}