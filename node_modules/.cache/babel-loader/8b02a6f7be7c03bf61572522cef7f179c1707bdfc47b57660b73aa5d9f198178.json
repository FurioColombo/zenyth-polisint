{"ast":null,"code":"import { isSVGTag } from '@vue/shared';\nimport MyEffect from \"@/views/Synth/Effects/MyFx\";\nimport { Gain } from \"tone\";\nvar types = ['none', 'reverb', 'delay', 'distortion', 'vibrato', 'pan', 'chorus'];\nvar Fx_colors = ['transparent', 'lightblue', 'deepskyblue', 'red', 'orange', 'darkorchid', 'yellow'];\nexport default {\n  props: [\"chainId\", \"id\", \"ref\"],\n  data: function data() {\n    return {\n      modulation: 0,\n      is_down: false,\n      typeId: 0,\n      volume: 0,\n      //variables to solve\n      //dragging and clicking interference\n      startX: 0,\n      startY: 0,\n      endX: 0,\n      endY: 0,\n      threshold: 2 // adjust as needed\n    };\n  },\n  mounted: function mounted() {\n    // gesture listeners\n    document.addEventListener(\"mouseup\", this.onMouseup);\n    document.addEventListener(\"mousemove\", this.onMousemove);\n    // init effect as bypass (a gain node)\n    this.effect = new MyEffect({\n      typeId: types[this.typeId],\n      modulation: this.modulation\n    });\n    // this.effect = this.fxHelper.generateToneFx('none');\n    // create the effect in the global fx matrix\n    this.fxChains[this.chainId][this.id] = this.effect;\n    // console.log(\"fx chain: \" + this.chainId + \" - fx id: \" + this.id)\n    // console.log(this.chainId, \" \", this.id)\n\n    // notify parent that each filter has been created\n    if (this.chainId === this.nFxChains - 1 && this.id === this.nFxXchain) {\n      this.$emit(\"fxMounted\");\n    }\n  },\n  computed: {\n    computedGlowStyle: function computedGlowStyle() {\n      return {\n        opacity: (this.modulation + 0.3) * 100 + \"%\",\n        background: Fx_colors[this.typeId]\n      };\n    },\n    iconDiv: function iconDiv() {\n      var color = 'black';\n      if (this.chainId === 0) color = this.colors.purple.medium;\n      if (this.chainId === 1) color = this.colors.green.medium;\n      if (this.chainId === 2) color = this.colors.pink.medium;\n      return {\n        color: color\n      };\n    },\n    iconDivBlack: function iconDivBlack() {\n      var color = 'black';\n      return {\n        color: color\n      };\n    },\n    onIconEnter: function onIconEnter() {\n      this.$refs['plus'].style.color = 'black';\n    },\n    onIconLeave: function onIconLeave() {\n      var color = 'black';\n      if (this.chainId === 0) color = this.colors.purple.medium;\n      if (this.chainId === 1) color = this.colors.green.medium;\n      if (this.chainId === 2) color = this.colors.pink.medium;\n      this.$refs['plus'].style.color = color;\n    }\n    /*     onIconLeave(){\r\n          let color = 'black'\r\n          if(this.chainId === 0 ) color = this.colors.purple.medium\r\n          if(this.chainId === 1 ) color = this.colors.green.medium\r\n          if(this.chainId === 2 ) color = this.colors.pink.medium\r\n          this.$refs['plus'].style.color = color\r\n        } */\n  },\n  components: {\n    isSVGTag: isSVGTag\n  },\n  methods: {\n    // ------------------ USER INTERACTIONS -----------------------\n    nextFx: function nextFx() {\n      //calculate distance between mouseDown and mouseUp, if it is more than threshold pixels, then it is a drag\n      var distance = Math.sqrt(Math.pow(this.endX - this.startX, 2) + Math.pow(this.endY - this.startY, 2));\n      if (distance <= this.threshold) {\n        if (!this.is_down) {\n          // change fx type and index\n          this.typeId = this.generateNextTypeIndex();\n          var fxType = types[this.typeId];\n          //console.log(fxType)\n\n          this.changeFxType(fxType);\n        }\n      }\n    },\n    changeFxType: function changeFxType(fxType) {\n      // disconnect old effect\n      this.effect.disconnect();\n      this.effect.dispose();\n\n      // create new effect\n      this.effect = new MyEffect({\n        type: fxType,\n        modulation: this.modulation\n      });\n      this.effect.setFxParams({\n        type: fxType,\n        mod: this.modulation\n      });\n\n      // attach new fx in the global fx matrix\n      // init effect\n      this.fxChains[this.chainId][this.id] = this.effect;\n      // connect effect\n      this.fxChains[this.chainId][this.id - 1].connect(this.fxChains[this.chainId][this.id].getToneReference());\n      if (this.fxChains[this.chainId][this.id + 1] instanceof MyEffect) {\n        this.fxChains[this.chainId][this.id].connect(this.fxChains[this.chainId][this.id + 1].getToneReference());\n      } else if (this.fxChains[this.chainId][this.id + 1] instanceof Gain) {\n        this.fxChains[this.chainId][this.id].connect(this.fxChains[this.chainId][this.id + 1]);\n      }\n      //console.log(this.fxChains)\n\n      /* // debug global fx matrix\r\n      this.fxChains.forEach((chain) => {\r\n        chain.forEach((fx) => {\r\n          if (fx instanceof MyEffect){\r\n            console.log(fx.getToneReference())\r\n          } else { console.log(fx) }\r\n        })\r\n      })*/\n    },\n    generateRandomTypeIndex: function generateRandomTypeIndex() {\n      return Math.round(Math.random() * 10 + 1) % types.length;\n    },\n    generateNextTypeIndex: function generateNextTypeIndex() {\n      return (this.typeId + 1) % types.length;\n    },\n    setToBypass: function setToBypass() {\n      this.typeId = 0;\n      this.changeFxType('none');\n\n      //console.log(\"set fx in position \" + this.chainId + \" - \" + this.id + \" to bypass\")\n    },\n    fxDown: function fxDown(e) {\n      //save mouseDown position\n      this.startX = e.clientX;\n      this.startY = e.clientY;\n      if (!this.is_down) this.is_down = true;\n    },\n    onMouseup: function onMouseup(e) {\n      //save mouseUp position\n      this.endX = e.clientX;\n      this.endY = e.clientY;\n      if (this.is_down) this.is_down = false;\n    },\n    onMousemove: function onMousemove(event) {\n      if (this.is_down) {\n        if (event.movementY < 0) {\n          this.modulation = Math.min(this.modulation - event.movementY / 100, 1);\n        } else {\n          this.modulation = Math.max(this.modulation - event.movementY / 100, 0);\n        }\n        this.effect.setFxParams({\n          fx: this.effect,\n          typeId: this.typeId,\n          mod: this.modulation\n        });\n\n        // console.log(this.modulation);\n      }\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["isSVGTag","MyEffect","Gain","types","Fx_colors","props","data","modulation","is_down","typeId","volume","startX","startY","endX","endY","threshold","mounted","document","addEventListener","onMouseup","onMousemove","effect","fxChains","chainId","id","nFxChains","nFxXchain","$emit","computed","computedGlowStyle","opacity","background","iconDiv","color","colors","purple","medium","green","pink","iconDivBlack","onIconEnter","$refs","style","onIconLeave","components","methods","nextFx","distance","Math","sqrt","pow","generateNextTypeIndex","fxType","changeFxType","disconnect","dispose","type","setFxParams","mod","connect","getToneReference","generateRandomTypeIndex","round","random","length","setToBypass","fxDown","e","clientX","clientY","event","movementY","min","max","fx"],"sourceRoot":"","sources":["C:\\Home\\Projects\\Programmazione\\WebStorm\\myZenythPolisinT\\zenyth_polisint\\src\\views\\Synth\\Effects\\FxCell.vue"],"sourcesContent":["<template>\r\n  <div class=\"cell\" @click=\"nextFx\" @click.shift=\"setToBypass\" @mousedown=\"fxDown\">\r\n    <div class=\"icon\">\r\n      <div v-if=\"this.typeId === 0\" ref=\"plus\" :style=\"this.iconDiv\" @mouseover=\"this.onIconEnter\" @mouseout=\"onIconLeave\"> +</div>\r\n      <img v-if=\"this.typeId === 1\" src=\"@/icons/blizzard.svg\" alt=\"\">\r\n      <img v-if=\"this.typeId === 2\" src=\"@/icons/drop.svg\" alt=\"\">\r\n      <img v-if=\"this.typeId === 3\" src=\"@/icons/fire.svg\" alt=\"\">\r\n      <img v-if=\"this.typeId === 4\" src=\"@/icons/moon.svg\" alt=\"\">\r\n      <img v-if=\"this.typeId === 5\" src=\"@/icons/wind.svg\" alt=\"\">\r\n      <img v-if=\"this.typeId === 6\" src=\"@/icons/tornado.svg\" alt=\"\">\r\n    </div>\r\n    <div class=\"glow\" :style=\"computedGlowStyle\" @mousedown=\"fxDown\">\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { isSVGTag } from '@vue/shared';\r\nimport MyEffect from \"@/views/Synth/Effects/MyFx\";\r\nimport {Gain} from \"tone\";\r\n\r\nconst types = ['none', 'reverb', 'delay', 'distortion', 'vibrato', 'pan', 'chorus'];\r\nconst Fx_colors = ['transparent', 'lightblue', 'deepskyblue', 'red', 'orange', 'darkorchid', 'yellow'];\r\nexport default {\r\n  props: [\"chainId\", \"id\", \"ref\"],\r\n\r\n  data() {\r\n    return {\r\n      modulation: 0,\r\n      is_down: false,\r\n      typeId: 0,\r\n      volume: 0,\r\n\r\n      //variables to solve\r\n      //dragging and clicking interference\r\n      startX: 0,\r\n      startY: 0,\r\n      endX: 0,\r\n      endY: 0,\r\n      threshold: 2, // adjust as needed\r\n    };\r\n  },\r\n  mounted() {\r\n    // gesture listeners\r\n    document.addEventListener(\"mouseup\", this.onMouseup);\r\n    document.addEventListener(\"mousemove\", this.onMousemove);\r\n    // init effect as bypass (a gain node)\r\n    this.effect = new MyEffect({ typeId: types[this.typeId], modulation: this.modulation })\r\n    // this.effect = this.fxHelper.generateToneFx('none');\r\n    // create the effect in the global fx matrix\r\n    this.fxChains[this.chainId][this.id] = this.effect;\r\n    // console.log(\"fx chain: \" + this.chainId + \" - fx id: \" + this.id)\r\n    // console.log(this.chainId, \" \", this.id)\r\n\r\n    // notify parent that each filter has been created\r\n    if (this.chainId === this.nFxChains - 1 && this.id === this.nFxXchain) {\r\n      this.$emit(\"fxMounted\")\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    computedGlowStyle() {\r\n      return {\r\n        opacity: (this.modulation + 0.3) * 100 + \"%\",\r\n        background: Fx_colors[this.typeId]\r\n      }\r\n    },\r\n    iconDiv() {\r\n      let color = 'black'\r\n      if (this.chainId === 0) color = this.colors.purple.medium\r\n      if (this.chainId === 1) color = this.colors.green.medium\r\n      if (this.chainId === 2) color = this.colors.pink.medium\r\n      return {\r\n        color: color,\r\n      }\r\n    },\r\n    iconDivBlack(){\r\n      let color = 'black'\r\n      return {\r\n        color: color,\r\n      }\r\n    },\r\n    onIconEnter() {\r\n      this.$refs['plus'].style.color = 'black'\r\n    },\r\n    onIconLeave() {\r\n      let color = 'black'\r\n      if (this.chainId === 0) color = this.colors.purple.medium\r\n      if (this.chainId === 1) color = this.colors.green.medium\r\n      if (this.chainId === 2) color = this.colors.pink.medium\r\n      this.$refs['plus'].style.color = color\r\n    }\r\n    /*     onIconLeave(){\r\n          let color = 'black'\r\n          if(this.chainId === 0 ) color = this.colors.purple.medium\r\n          if(this.chainId === 1 ) color = this.colors.green.medium\r\n          if(this.chainId === 2 ) color = this.colors.pink.medium\r\n          this.$refs['plus'].style.color = color\r\n        } */\r\n  },\r\n\r\n  components: { isSVGTag },\r\n\r\n  methods: {\r\n    // ------------------ USER INTERACTIONS -----------------------\r\n    nextFx() {\r\n      //calculate distance between mouseDown and mouseUp, if it is more than threshold pixels, then it is a drag\r\n      const distance = Math.sqrt(\r\n        Math.pow(this.endX - this.startX, 2) +\r\n        Math.pow(this.endY - this.startY, 2)\r\n      );\r\n\r\n      if (distance <= this.threshold) {\r\n        if (!this.is_down) {\r\n          // change fx type and index\r\n          this.typeId = this.generateNextTypeIndex();\r\n          let fxType = types[this.typeId]\r\n          //console.log(fxType)\r\n\r\n          this.changeFxType(fxType)\r\n        }\r\n      }\r\n\r\n    },\r\n\r\n    changeFxType(fxType) {\r\n      // disconnect old effect\r\n      this.effect.disconnect();\r\n      this.effect.dispose();\r\n\r\n      // create new effect\r\n      this.effect = new MyEffect({ type: fxType, modulation: this.modulation })\r\n      this.effect.setFxParams({ type: fxType, mod: this.modulation })\r\n\r\n      // attach new fx in the global fx matrix\r\n      // init effect\r\n      this.fxChains[this.chainId][this.id] = this.effect;\r\n      // connect effect\r\n      this.fxChains[this.chainId][this.id-1].connect(this.fxChains[this.chainId][this.id].getToneReference());\r\n      if(this.fxChains[this.chainId][this.id+1] instanceof MyEffect) {\r\n        this.fxChains[this.chainId][this.id].connect(this.fxChains[this.chainId][this.id + 1].getToneReference())\r\n      } else if(this.fxChains[this.chainId][this.id+1] instanceof Gain){\r\n        this.fxChains[this.chainId][this.id].connect(this.fxChains[this.chainId][this.id + 1])\r\n      }\r\n      //console.log(this.fxChains)\r\n\r\n      /* // debug global fx matrix\r\n      this.fxChains.forEach((chain) => {\r\n        chain.forEach((fx) => {\r\n          if (fx instanceof MyEffect){\r\n            console.log(fx.getToneReference())\r\n          } else { console.log(fx) }\r\n        })\r\n      })*/\r\n    },\r\n\r\n    generateRandomTypeIndex() {\r\n      return Math.round(Math.random() * 10 + 1) % types.length\r\n    },\r\n\r\n    generateNextTypeIndex() {\r\n      return (this.typeId + 1) % types.length;\r\n    },\r\n\r\n    setToBypass() {\r\n      this.typeId = 0;\r\n      this.changeFxType('none')\r\n\r\n      //console.log(\"set fx in position \" + this.chainId + \" - \" + this.id + \" to bypass\")\r\n    },\r\n\r\n    fxDown(e) {\r\n      //save mouseDown position\r\n      this.startX = e.clientX;\r\n      this.startY = e.clientY;\r\n\r\n      if (!this.is_down)\r\n        this.is_down = true;\r\n    },\r\n    onMouseup(e) {\r\n      //save mouseUp position\r\n      this.endX = e.clientX;\r\n      this.endY = e.clientY;\r\n      if (this.is_down)\r\n        this.is_down = false;\r\n    },\r\n    onMousemove(event) {\r\n      if (this.is_down) {\r\n        if (event.movementY < 0) {\r\n          this.modulation = Math.min(this.modulation - event.movementY / 100, 1);\r\n        } else {\r\n          this.modulation = Math.max(this.modulation - event.movementY / 100, 0);\r\n        }\r\n        this.effect.setFxParams({ fx: this.effect, typeId: this.typeId, mod: this.modulation })\r\n\r\n        // console.log(this.modulation);\r\n      }\r\n    }\r\n  },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.cell {\r\n  position: relative;\r\n  height: 85%;\r\n  background-color: transparent;\r\n  display: flex;\r\n  margin: 10%;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.icon {\r\n  display: flex;\r\n  aspect-ratio: 1/1;\r\n  position: absolute;\r\n  z-index: 2;\r\n  background-color: transparent;\r\n}\r\n\r\n.icon div {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 1.5vw;\r\n  height: 100%;\r\n  aspect-ratio: 1/1;\r\n  background-color: transparent;\r\n}\r\n\r\n.icon img {\r\n  width: 1.5vw;\r\n  aspect-ratio: 1/1;\r\n  opacity: 80%;\r\n  -webkit-user-drag: none;\r\n}\r\n\r\n.glow {\r\n  border-radius: 5%;\r\n  flex: 1;\r\n  height: 100%;\r\n  width: 100%;\r\n  position: absolute;\r\n  z-index: 1;\r\n  background-color: red;\r\n}\r\n\r\n.glow div {\r\n  height: 100%;\r\n  width: 100%;\r\n  opacity: 100%;\r\n  color: black;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 2vw;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}