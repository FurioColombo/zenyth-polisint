{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, normalizeStyle as _normalizeStyle } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_VolEnvelope = _resolveComponent(\"VolEnvelope\");\n  const _component_Envelope = _resolveComponent(\"Envelope\");\n  const _component_Lfo = _resolveComponent(\"Lfo\");\n  const _component_ModSelector = _resolveComponent(\"ModSelector\");\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: \"modHost\",\n    style: _normalizeStyle($options.modHost)\n  }, [_createVNode(_component_VolEnvelope, {\n    ref: \"volEnvelope\"\n  }, null, 512 /* NEED_PATCH */), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.envList, modulator => {\n    return _openBlock(), _createBlock(_component_Envelope, {\n      key: modulator.id,\n      id: modulator.id,\n      ref_for: true,\n      ref: \"envelopes\",\n      onIsDraggableUpdate: $options.handleDraggableUpdate\n    }, null, 8 /* PROPS */, [\"id\", \"onIsDraggableUpdate\"]);\n  }), 128 /* KEYED_FRAGMENT */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.lfoList, modulator => {\n    return _openBlock(), _createBlock(_component_Lfo, {\n      key: modulator.id,\n      id: modulator.id,\n      ref_for: true,\n      ref: \"lfos\"\n    }, null, 8 /* PROPS */, [\"id\"]);\n  }), 128 /* KEYED_FRAGMENT */)), _createVNode(_component_ModSelector, {\n    onSelection: $options.changeSelection,\n    ref: \"modSelector\"\n  }, null, 8 /* PROPS */, [\"onSelection\"])], 4 /* STYLE */);\n}","map":{"version":3,"mappings":";;;;;;uBACEA,oBAuBM;IAvBDC,KAAK,EAAC,SAAS;IAAEC,KAAK,kBAAEC,gBAAO;MACjCC,aAAgCC;IAAnBC,GAAG,EAAC;EAAa,mDAC/BN,oBAQWO,6BAPWC,aAAO,EAApBC,SAAS;yBAGfC,aAG2CC;WALtCF,SAAS,CAACG,EAAE;MAGfA,EAAE,EAAEH,SAAS,CAACG,EAAE;;MACjBN,GAAG,EAAC,WAAW;MAChBO,mBAAiB,EAAEV;;qDAEtBH,oBAQWO,6BAPaC,aAAO,EAApBC,SAAS;yBAIjBC,aAEeI;WALRL,SAAS,CAACG,EAAE;MAIfA,EAAE,EAAEH,SAAS,CAACG,EAAE;;MACjBN,GAAG,EAAC;;kCAEVF,aAEqBW;IADlBC,WAAS,EAAEb,wBAAe;IAC3BG,GAAG,EAAC","names":["_createElementBlock","class","style","$options","_createVNode","_component_VolEnvelope","ref","_Fragment","$data","modulator","_createBlock","_component_Envelope","id","onIsDraggableUpdate","_component_Lfo","_component_ModSelector","onSelection"],"sourceRoot":"","sources":["/Users/guglielmofratticioli/Documents/POLIMI/FurioColombo.github.io/src/views/Synth/Modulators/ModHost.vue"],"sourcesContent":["<template>\n  <div class=\"modHost\" :style=\"modHost\">\n     <VolEnvelope ref=\"volEnvelope\"/>\n    <template\n      v-for=\"modulator in envList\"\n      :key=\"modulator.id\">\n\n       <Envelope\n        :id=\"modulator.id\"\n        ref=\"envelopes\"\n      @isDraggableUpdate=\"handleDraggableUpdate\"/>\n    </template>\n    <template\n        v-for=\"modulator in lfoList\"\n        :key=\"modulator.id\">\n\n\n       <Lfo\n          :id=\"modulator.id\"\n          ref=\"lfos\"/>\n    </template>\n    <ModSelector\n      @selection=\"changeSelection\"\n      ref=\"modSelector\"/>\n  </div>\n</template>\n\n<script>\nimport * as Tone from \"tone\";\nimport Envelope from \"./Envelope.vue\";\nimport Lfo from \"./Lfo.vue\";\nimport VolEnvelope from \"./VolEnvelope.vue\";\nimport ModSelector from \"./ModSelector.vue\";\nimport { isProxy, toRaw } from 'vue';\n\nexport default {\n  components: {\n    VolEnvelope,\n    Envelope,\n    Lfo,\n    ModSelector,\n  },\n  data() {\n    return {\n      name: \"modHost\",\n      //number of total modulators\n\n      //visible modulator\n      selection: 'volEnvelope',\n      selectionType: null,\n\n      //list of modulators\n      envList: [],\n      lfoList: [],\n    };\n  },\n  created() {\n    //create arrays of modulators\n    for (let i = 1; i < this.nEnvelopes+1; i++) {\n      this.envList.push({ id: i, ref: i });\n    }\n    for (let i = 1; i < this.nLfo+1; i++) {\n      this.lfoList.push({ id: i, ref: i });\n    }\n    //console.log(toRaw(this.modulatorList));\n  },\n  mounted() {\n    //unhide main volume modulator\n    this.$refs.volEnvelope.unHide();\n    //console.log(this.$refs.volEnvelope)\n\n    //listens to link and unlink events\n    document.addEventListener(\"link\", this.handleLink)\n    document.addEventListener(\"unLink\", this.handleUnlink)\n  },\n  computed: {\n    modHost() {\n      return{\n        background: this.colors.gray.glow,\n      }\n    }\n  },\n  methods: {\n    handleDraggableUpdate(isDraggable){\n      this.$refs.modSelector.isDraggableUpdate(isDraggable)\n    },\n    handleNewOsc(){\n      //initialize volEnvelope on all synth when a new oscillator is added\n      this.$refs.volEnvelope.handleNewOsc();\n    },\n    handleMouseUp(e){\n      if(this.selection==='volEnvelope'){\n        this.$refs.volEnvelope.handleMouseUp(e)\n      }else{\n        if(this.selectionType===\"envelope\"){\n          toRaw(toRaw(this.$refs.envelopes)[this.selection-1]).handleMouseUp(e);\n        }\n        if(this.selectionType===\"lfo\"){\n          toRaw(toRaw(this.$refs.lfos)[this.selection-1]).handleMouseUp(e);\n        }\n      }\n    },\n    handleMouseMove(e){\n      if(this.selection==='volEnvelope'){\n        this.$refs.volEnvelope.handleMouseMove(e)\n      }else{\n        if(this.selectionType===\"envelope\"){\n          toRaw(toRaw(this.$refs.envelopes)[this.selection-1]).handleMouseMove(e);\n        }\n        if(this.selectionType===\"lfo\"){\n          toRaw(toRaw(this.$refs.lfos)[this.selection-1]).handleMouseMove(e);\n        }\n      }\n    },\n    changeSelection(id, type) {\n      //console.log(\"selected \"+id)\n      //console.log(this.$refs)\n\n      //hide old modulator\n      if(this.selection==='volEnvelope'){\n        this.$refs.volEnvelope.hide()\n      }else{\n        if(this.selectionType===\"envelope\"){\n          toRaw(toRaw(this.$refs.envelopes)[this.selection-1]).hide();\n        }\n        if(this.selectionType===\"lfo\"){\n          toRaw(toRaw(this.$refs.lfos)[this.selection-1]).hide();\n          toRaw(toRaw(this.$refs.lfos)[this.selection-1]).stopOscilloscope();\n        }\n      }\n\n\n      //show new modulator\n      if(id==='volEnvelope'){\n        this.$refs.volEnvelope.unHide()\n      }else{\n        if(type===\"envelope\"){\n          toRaw(toRaw(this.$refs.envelopes)[id-1]).unHide();\n        }\n        if(type===\"lfo\"){\n          toRaw(toRaw(this.$refs.lfos)[id-1]).unHide();\n        }\n      }\n\n\n      this.selection = id;\n      this.selectionType = type;\n      \n    },\n\n    //handlers for drag and drop\n    handleLink(event){\n      console.log(\"link\")\n      let data = event.detail\n      //console.log(data)\n      //console.log(this.synths)\n      this.$refs[data.modulator.type+\"s\"][data.modulator.id-1].link(data.object, data.target, data.color)\n    },\n    handleUnlink(event){\n      console.log(\"unLink\")\n      let data = event.detail\n      this.$refs[data.modulator.type+\"s\"][data.modulator.id-1].unLink(data.object, data.target)\n\n    }\n\n  },\n};\n</script>\n\n<style scoped>\n.modHost {\n  grid-column: span 2; /* takes 2 spaces horizontally*/\n  position: relative;\n  display: grid;\n  grid-template-rows: 80% 20%;\n  grid-template-columns: 100%;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}