{"ast":null,"code":"import _objectSpread from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar DEFAULT_OPTIONS = {\n  attack: 0.003,\n  channelCount: 2,\n  channelCountMode: 'clamped-max',\n  channelInterpretation: 'speakers',\n  knee: 30,\n  ratio: 12,\n  release: 0.25,\n  threshold: -24\n};\nexport var createDynamicsCompressorNodeConstructor = function createDynamicsCompressorNodeConstructor(audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) {\n  return /*#__PURE__*/function (_audioNodeConstructor) {\n    _inherits(DynamicsCompressorNode, _audioNodeConstructor);\n    var _super = _createSuper(DynamicsCompressorNode);\n    function DynamicsCompressorNode(context, options) {\n      var _this;\n      _classCallCheck(this, DynamicsCompressorNode);\n      var nativeContext = getNativeContext(context);\n      var mergedOptions = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n      var nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeContext, mergedOptions);\n      var isOffline = isNativeOfflineAudioContext(nativeContext);\n      var dynamicsCompressorNodeRenderer = isOffline ? createDynamicsCompressorNodeRenderer() : null;\n      _this = _super.call(this, context, false, nativeDynamicsCompressorNode, dynamicsCompressorNodeRenderer);\n      _this._attack = createAudioParam(_assertThisInitialized(_this), isOffline, nativeDynamicsCompressorNode.attack);\n      _this._knee = createAudioParam(_assertThisInitialized(_this), isOffline, nativeDynamicsCompressorNode.knee);\n      _this._nativeDynamicsCompressorNode = nativeDynamicsCompressorNode;\n      _this._ratio = createAudioParam(_assertThisInitialized(_this), isOffline, nativeDynamicsCompressorNode.ratio);\n      _this._release = createAudioParam(_assertThisInitialized(_this), isOffline, nativeDynamicsCompressorNode.release);\n      _this._threshold = createAudioParam(_assertThisInitialized(_this), isOffline, nativeDynamicsCompressorNode.threshold);\n      setAudioNodeTailTime(_assertThisInitialized(_this), 0.006);\n      return _this;\n    }\n    _createClass(DynamicsCompressorNode, [{\n      key: \"attack\",\n      get: function get() {\n        return this._attack;\n      }\n      // Bug #108: Safari allows a channelCount of three and above which is why the getter and setter needs to be overwritten here.\n    }, {\n      key: \"channelCount\",\n      get: function get() {\n        return this._nativeDynamicsCompressorNode.channelCount;\n      },\n      set: function set(value) {\n        var previousChannelCount = this._nativeDynamicsCompressorNode.channelCount;\n        this._nativeDynamicsCompressorNode.channelCount = value;\n        if (value > 2) {\n          this._nativeDynamicsCompressorNode.channelCount = previousChannelCount;\n          throw createNotSupportedError();\n        }\n      }\n      /*\n       * Bug #109: Only Chrome and Firefox disallow a channelCountMode of 'max' yet which is why the getter and setter needs to be\n       * overwritten here.\n       */\n    }, {\n      key: \"channelCountMode\",\n      get: function get() {\n        return this._nativeDynamicsCompressorNode.channelCountMode;\n      },\n      set: function set(value) {\n        var previousChannelCount = this._nativeDynamicsCompressorNode.channelCountMode;\n        this._nativeDynamicsCompressorNode.channelCountMode = value;\n        if (value === 'max') {\n          this._nativeDynamicsCompressorNode.channelCountMode = previousChannelCount;\n          throw createNotSupportedError();\n        }\n      }\n    }, {\n      key: \"knee\",\n      get: function get() {\n        return this._knee;\n      }\n    }, {\n      key: \"ratio\",\n      get: function get() {\n        return this._ratio;\n      }\n    }, {\n      key: \"reduction\",\n      get: function get() {\n        // Bug #111: Safari returns an AudioParam instead of a number.\n        if (typeof this._nativeDynamicsCompressorNode.reduction.value === 'number') {\n          return this._nativeDynamicsCompressorNode.reduction.value;\n        }\n        return this._nativeDynamicsCompressorNode.reduction;\n      }\n    }, {\n      key: \"release\",\n      get: function get() {\n        return this._release;\n      }\n    }, {\n      key: \"threshold\",\n      get: function get() {\n        return this._threshold;\n      }\n    }]);\n    return DynamicsCompressorNode;\n  }(audioNodeConstructor);\n};","map":{"version":3,"mappings":"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","names":["DEFAULT_OPTIONS","attack","channelCount","channelCountMode","channelInterpretation","knee","ratio","release","threshold","createDynamicsCompressorNodeConstructor","audioNodeConstructor","createAudioParam","createDynamicsCompressorNodeRenderer","createNativeDynamicsCompressorNode","createNotSupportedError","getNativeContext","isNativeOfflineAudioContext","setAudioNodeTailTime","context","options","nativeContext","mergedOptions","nativeDynamicsCompressorNode","isOffline","dynamicsCompressorNodeRenderer","_attack","_knee","_nativeDynamicsCompressorNode","_ratio","_release","_threshold","value","previousChannelCount","reduction"],"sourceRoot":"","sources":["../../../src/factories/dynamics-compressor-node-constructor.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}