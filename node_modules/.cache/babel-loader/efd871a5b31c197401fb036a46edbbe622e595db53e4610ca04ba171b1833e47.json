{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createElementVNode as _createElementVNode, normalizeStyle as _normalizeStyle, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nvar _withScopeId = function _withScopeId(n) {\n  return _pushScopeId(\"data-v-201d3402\"), n = n(), _popScopeId(), n;\n};\nvar _hoisted_1 = {\n  \"class\": \"knobs\"\n};\nvar _hoisted_2 = [\"onMousedown\"];\nvar _hoisted_3 = /*#__PURE__*/_withScopeId(function () {\n  return /*#__PURE__*/_createElementVNode(\"div\", {\n    \"class\": \"knob_fader_background\"\n  }, null, -1 /* HOISTED */);\n});\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.knobList, function (knob) {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: knob.id,\n      ref_for: true,\n      ref: knob.ref,\n      \"class\": \"knob\",\n      onMousedown: function onMousedown($event) {\n        return $options.mouseDown(knob.id);\n      }\n    }, [_hoisted_3, knob.isOn === true ? (_openBlock(), _createElementBlock(\"div\", {\n      key: 0,\n      \"class\": \"knob_fader\",\n      style: _normalizeStyle($options.computedFaderStyle(knob.id))\n    }, null, 4 /* STYLE */)) : _createCommentVNode(\"v-if\", true)], 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_2);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"mappings":";;;;;EACO,SAAM;AAAO;;;sBAEdA,oBAAyC;IAApC,SAAM;EAAuB;AAAA;;;uBAFtCC,oBAKM,OALNC,UAKM,sBAJJD,oBAGME,6BAHcC,cAAQ,YAAhBC,IAAI;yBAAhBJ,oBAGM;MAHyBK,GAAG,EAAED,IAAI,CAACE,EAAE;;MAAGC,GAAG,EAAEH,IAAI,CAACG,GAAG;MAAE,SAAM,MAAM;MAAEC,WAAS;QAAA,OAAEC,kBAAS,CAACL,IAAI,CAACE,EAAE;MAAA;QACrGI,UAAyC,EAC9BN,IAAI,CAACO,IAAI,2BAApBX,oBAA2F;;MAA9D,SAAM,YAAY;MAAEY,KAAK,kBAAEH,2BAAkB,CAACL,IAAI,CAACE,EAAE","names":["_createElementVNode","_createElementBlock","_hoisted_1","_Fragment","$data","knob","key","id","ref","onMousedown","$options","_hoisted_3","isOn","style"],"sourceRoot":"","sources":["C:\\Home\\Projects\\Programmazione\\WebStorm\\myZenythPolisinT\\zenyth_polisint\\src\\views\\Synth\\Modulators\\Knobs.vue"],"sourcesContent":["<template>\r\n  <div class=\"knobs\">\r\n    <div v-for=\"knob in knobList\" :key=\"knob.id\" :ref=\"knob.ref\" class=\"knob\" @mousedown=\"mouseDown(knob.id)\">\r\n      <div class=\"knob_fader_background\"></div>\r\n      <div v-if=\"knob.isOn===true\" class=\"knob_fader\" :style=\"computedFaderStyle(knob.id)\"></div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { toRaw } from 'vue';\r\nexport default {\r\n  props: [\"type\", \"id\", \"parameters\"],\r\n  name: \"Knobs\",\r\n  data() {\r\n    return {\r\n      knobList: [],\r\n      freeKnobs: this.nKnobs,\r\n      isMouseDown: false,\r\n      selectedKnobId: \"\",\r\n    }\r\n  },\r\n  mounted() {\r\n    for (let i = 0; i < this.nKnobs; i++) {\r\n      this.knobList.push({id: i, ref: \"knob\" + i, isOn:false, amount: 0, object: null, target: null});\r\n    }\r\n\r\n    //Set available state (isDraggable)\r\n    this.isDraggable[this.type][this.id] = true\r\n\r\n  },\r\n  methods: {\r\n    updateParameters(parameters=this.parameters){\r\n     // console.log(\"UPDATING PARAMETERS\", parameters)\r\n      for(let i=0; i<this.nKnobs; i++){\r\n        if(this.knobList[i].isOn) {\r\n          this.knobList[i].object.setModulatorParameters(this.type, this.knobList[i].target, parameters)\r\n          break\r\n        }\r\n      }\r\n    },\r\n\r\n    knobText(id){\r\n      if(this.knobList[id].isOn===true){\r\n        return this.knobList[id].amount\r\n      }else{\r\n        return \"yo\"\r\n      }\r\n    },\r\n\r\n    addLink(object, target, color, parameters=this.parameters){\r\n      for(let i=0; i<this.nKnobs; i++){\r\n        if(!this.knobList[i].isOn) {\r\n          this.knobList[i].color = color\r\n          this.knobList[i].isOn = true;\r\n          this.knobList[i].amount= 0.5;\r\n          this.knobList[i].object = object\r\n          this.knobList[i].target = target\r\n          this.freeKnobs -= 1;\r\n\r\n          //set modulator amount at object\r\n          console.log(\"ADDING LINK\")\r\n          console.log(parameters)\r\n          object.setModulatorParameters(this.type, target, parameters)\r\n          object.setModulatorAmount(this.type, target, this.knobList[i].amount)\r\n          break;\r\n        }\r\n      }\r\n      if (this.freeKnobs === 0) this.isDraggable[this.type][this.id] = false\r\n      this.$emit(\"isDraggableUpdate\", this.isDraggable)\r\n      //todo: event to set isDraggable inside modSelector NOT WORKING\r\n    },\r\n\r\n    removeLink(object, target){\r\n      //console.log(\"REMOVING LINK TO\"+target)\r\n      //console.log(object)\r\n\r\n      this.knobList.forEach((knob) => {\r\n        knob.amount = knob.amount+0.01\r\n        knob.amount = knob.amount-0.01\r\n        knob = toRaw(knob)\r\n        if (knob.object === object && knob.target === target) {\r\n          knob.object.setModulatorAmount(this.type, target, 0)\r\n          //remove info from knob\r\n          knob.amount = 0\r\n          knob.isOn = false\r\n          knob.object = null\r\n          knob.target = null\r\n        }\r\n      })\r\n      this.freeKnobs++;\r\n      this.isDraggable[this.type][this.id] = true\r\n    },\r\n\r\n    handleMouseMove(e) {\r\n\r\n      if(this.isMouseDown &&  this.knobList[this.selectedKnobId].isOn){\r\n        this.knobList[this.selectedKnobId].amount = this.knobList[this.selectedKnobId].amount - Math.floor(e.movementY) / 100;\r\n        this.knobList[this.selectedKnobId].amount = Math.max(this.knobList[this.selectedKnobId].amount, 0)\r\n        this.knobList[this.selectedKnobId].amount = Math.min(this.knobList[this.selectedKnobId].amount, 1)\r\n        this.knobList[this.selectedKnobId].object.setModulatorAmount(this.type, this.knobList[this.selectedKnobId].target, this.knobList[this.selectedKnobId].amount)\r\n\r\n      }\r\n\r\n    },\r\n\r\n    mouseDown(knobId){\r\n      this.isMouseDown = true;\r\n      this.selectedKnobId = knobId;\r\n    },\r\n\r\n    computedFaderStyle(id) {\r\n      let rawKnobAmount = this.knobList[id].amount\r\n        return {\r\n          backgroundColor: this.knobList[id].color,\r\n          height: (rawKnobAmount * 100).toString() + \"%\"\r\n        }\r\n    },\r\n\r\n    handleMouseUp() {\r\n      this.isMouseDown = false;\r\n    },\r\n  },\r\n  computed: {\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.knobs {\r\n  margin: 2%;\r\n  border-radius: 0.3vw;\r\n  box-sizing: border-box;\r\n  position: relative;\r\n  display: grid;\r\n  grid-template-rows: repeat(3, 1fr);\r\n  column-gap: 1vw;\r\n  row-gap: 1vw;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  align-content: center;\r\n  justify-content: center;\r\n  align-items: stretch;\r\n  justify-items: center;\r\n  padding: 4%;\r\n  border: 0.06vw solid black;\r\n}\r\n\r\n.knob {\r\n  aspect-ratio: 1/1;\r\n  clip-path: circle(50%);\r\n  position: relative;\r\n  vertical-align: bottom;\r\n  background-color: whitesmoke;\r\n  display: grid;\r\n}\r\n\r\n.knob_fader {\r\n  position: absolute;\r\n  height: 0%;\r\n  box-sizing: border-box;\r\n  align-self: end;\r\n  width: 100%;\r\n  background-color: transparent;\r\n  border-bottom-left-radius: 0.4vw;\r\n  border-bottom-right-radius: 0.4vw;\r\n  background-clip: content-box;\r\n  padding: 0.1vw;\r\n  z-index: 101;\r\n}\r\n\r\n.knob_fader_background {\r\n  clip-path: circle(50%);\r\n  box-sizing: border-box;\r\n  aspect-ratio: 1/1;\r\n  height: 100%;\r\n  background-color: transparent;\r\n  border: 0.1vw solid black;\r\n  border-radius: 50%;\r\n  z-index: 102;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}