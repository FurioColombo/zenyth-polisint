{"ast":null,"code":"import _classCallCheck from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Solo } from \"./Solo\";\nimport { PanVol } from \"./PanVol\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Gain } from \"../../core/context/Gain\";\n/**\n * Channel provides a channel strip interface with volume, pan, solo and mute controls.\n * See [[PanVol]] and [[Solo]]\n * @example\n * // pan the incoming signal left and drop the volume 12db\n * const channel = new Tone.Channel(-0.25, -12);\n * @category Component\n */\nexport var Channel = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Channel, _ToneAudioNode);\n  var _super = _createSuper(Channel);\n  function Channel() {\n    var _this;\n    _classCallCheck(this, Channel);\n    _this = _super.call(this, optionsFromArguments(Channel.getDefaults(), arguments, [\"volume\", \"pan\"]));\n    _this.name = \"Channel\";\n    var options = optionsFromArguments(Channel.getDefaults(), arguments, [\"volume\", \"pan\"]);\n    _this._solo = _this.input = new Solo({\n      solo: options.solo,\n      context: _this.context\n    });\n    _this._panVol = _this.output = new PanVol({\n      context: _this.context,\n      pan: options.pan,\n      volume: options.volume,\n      mute: options.mute,\n      channelCount: options.channelCount\n    });\n    _this.pan = _this._panVol.pan;\n    _this.volume = _this._panVol.volume;\n    _this._solo.connect(_this._panVol);\n    readOnly(_assertThisInitialized(_this), [\"pan\", \"volume\"]);\n    return _this;\n  }\n  _createClass(Channel, [{\n    key: \"solo\",\n    get:\n    /**\n     * Solo/unsolo the channel. Soloing is only relative to other [[Channels]] and [[Solo]] instances\n     */\n    function get() {\n      return this._solo.solo;\n    },\n    set: function set(solo) {\n      this._solo.solo = solo;\n    }\n    /**\n     * If the current instance is muted, i.e. another instance is soloed,\n     * or the channel is muted\n     */\n  }, {\n    key: \"muted\",\n    get: function get() {\n      return this._solo.muted || this.mute;\n    }\n    /**\n     * Mute/unmute the volume\n     */\n  }, {\n    key: \"mute\",\n    get: function get() {\n      return this._panVol.mute;\n    },\n    set: function set(mute) {\n      this._panVol.mute = mute;\n    }\n    /**\n     * Get the gain node belonging to the bus name. Create it if\n     * it doesn't exist\n     * @param name The bus name\n     */\n  }, {\n    key: \"_getBus\",\n    value: function _getBus(name) {\n      if (!Channel.buses.has(name)) {\n        Channel.buses.set(name, new Gain({\n          context: this.context\n        }));\n      }\n      return Channel.buses.get(name);\n    }\n    /**\n     * Send audio to another channel using a string. `send` is a lot like\n     * [[connect]], except it uses a string instead of an object. This can\n     * be useful in large applications to decouple sections since [[send]]\n     * and [[receive]] can be invoked separately in order to connect an object\n     * @param name The channel name to send the audio\n     * @param volume The amount of the signal to send.\n     * \tDefaults to 0db, i.e. send the entire signal\n     * @returns Returns the gain node of this connection.\n     */\n  }, {\n    key: \"send\",\n    value: function send(name) {\n      var volume = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var bus = this._getBus(name);\n      var sendKnob = new Gain({\n        context: this.context,\n        units: \"decibels\",\n        gain: volume\n      });\n      this.connect(sendKnob);\n      sendKnob.connect(bus);\n      return sendKnob;\n    }\n    /**\n     * Receive audio from a channel which was connected with [[send]].\n     * @param name The channel name to receive audio from.\n     */\n  }, {\n    key: \"receive\",\n    value: function receive(name) {\n      var bus = this._getBus(name);\n      bus.connect(this);\n      return this;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Channel.prototype), \"dispose\", this).call(this);\n      this._panVol.dispose();\n      this.pan.dispose();\n      this.volume.dispose();\n      this._solo.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        pan: 0,\n        volume: 0,\n        mute: false,\n        solo: false,\n        channelCount: 1\n      });\n    }\n  }]);\n  return Channel;\n}(ToneAudioNode);\n/**\n * Store the send/receive channels by name.\n */\nChannel.buses = new Map();","map":{"version":3,"mappings":"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","names":["ToneAudioNode","optionsFromArguments","Solo","PanVol","readOnly","Gain","Channel","getDefaults","arguments","options","_solo","input","solo","context","_panVol","output","pan","volume","mute","channelCount","connect","muted","name","buses","has","set","get","bus","_getBus","sendKnob","units","gain","dispose","Object","assign","Map"],"sourceRoot":"","sources":["../../../../Tone/component/channel/Channel.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}