{"ast":null,"code":"import _regeneratorRuntime from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.weak-map.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createAnalyserNodeRendererFactory = function createAnalyserNodeRendererFactory(createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeAnalyserNodes = new WeakMap();\n    var createAnalyserNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(proxy, nativeOfflineAudioContext) {\n        var nativeAnalyserNode, nativeAnalyserNodeIsOwnedByContext, options;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              nativeAnalyserNode = getNativeAudioNode(proxy); // If the initially used nativeAnalyserNode was not constructed on the same OfflineAudioContext it needs to be created again.\n              nativeAnalyserNodeIsOwnedByContext = isOwnedByContext(nativeAnalyserNode, nativeOfflineAudioContext);\n              if (!nativeAnalyserNodeIsOwnedByContext) {\n                options = {\n                  channelCount: nativeAnalyserNode.channelCount,\n                  channelCountMode: nativeAnalyserNode.channelCountMode,\n                  channelInterpretation: nativeAnalyserNode.channelInterpretation,\n                  fftSize: nativeAnalyserNode.fftSize,\n                  maxDecibels: nativeAnalyserNode.maxDecibels,\n                  minDecibels: nativeAnalyserNode.minDecibels,\n                  smoothingTimeConstant: nativeAnalyserNode.smoothingTimeConstant\n                };\n                nativeAnalyserNode = createNativeAnalyserNode(nativeOfflineAudioContext, options);\n              }\n              renderedNativeAnalyserNodes.set(nativeOfflineAudioContext, nativeAnalyserNode);\n              _context.next = 6;\n              return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAnalyserNode);\n            case 6:\n              return _context.abrupt(\"return\", nativeAnalyserNode);\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return function createAnalyserNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    return {\n      render: function render(proxy, nativeOfflineAudioContext) {\n        var renderedNativeAnalyserNode = renderedNativeAnalyserNodes.get(nativeOfflineAudioContext);\n        if (renderedNativeAnalyserNode !== undefined) {\n          return Promise.resolve(renderedNativeAnalyserNode);\n        }\n        return createAnalyserNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,gBAAgB,QAAQ,gCAAgC;AAIjE,OAAO,IAAMC,iCAAiC,GAAwC,SAAzEA,iCAAiC,CAC1CC,wBAAwB,EACxBC,kBAAkB,EAClBC,uBAAuB,EACvB;EACA,OAAO,YAAmE;IACtE,IAAMC,2BAA2B,GAAG,IAAIC,OAAO,EAAmD;IAElG,IAAMC,kBAAkB;MAAA,sEAAG,iBAAOC,KAAuB,EAAEC,yBAAqD;QAAA;QAAA;UAAA;YAAA;cACxGC,kBAAkB,GAAGP,kBAAkB,CAAyBK,KAAK,CAAC,EAE1E;cACMG,kCAAkC,GAAGX,gBAAgB,CAACU,kBAAkB,EAAED,yBAAyB,CAAC;cAE1G,IAAI,CAACE,kCAAkC,EAAE;gBAC/BC,OAAO,GAAG;kBACZC,YAAY,EAAEH,kBAAkB,CAACG,YAAY;kBAC7CC,gBAAgB,EAAEJ,kBAAkB,CAACI,gBAAgB;kBACrDC,qBAAqB,EAAEL,kBAAkB,CAACK,qBAAqB;kBAC/DC,OAAO,EAAEN,kBAAkB,CAACM,OAAO;kBACnCC,WAAW,EAAEP,kBAAkB,CAACO,WAAW;kBAC3CC,WAAW,EAAER,kBAAkB,CAACQ,WAAW;kBAC3CC,qBAAqB,EAAET,kBAAkB,CAACS;iBAC7C;gBAEDT,kBAAkB,GAAGR,wBAAwB,CAACO,yBAAyB,EAAEG,OAAO,CAAC;;cAGrFP,2BAA2B,CAACe,GAAG,CAACX,yBAAyB,EAAEC,kBAAkB,CAAC;cAAC;cAAA,OAEzEN,uBAAuB,CAACI,KAAK,EAAEC,yBAAyB,EAAEC,kBAAkB,CAAC;YAAA;cAAA,iCAE5EA,kBAAkB;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA,CAC5B;MAAA,gBAzBKH,kBAAkB;QAAA;MAAA;IAAA,GAyBvB;IAED,OAAO;MACHc,MAAM,kBAACb,KAAuB,EAAEC,yBAAqD;QACjF,IAAMa,0BAA0B,GAAGjB,2BAA2B,CAACkB,GAAG,CAACd,yBAAyB,CAAC;QAE7F,IAAIa,0BAA0B,KAAKE,SAAS,EAAE;UAC1C,OAAOC,OAAO,CAACC,OAAO,CAACJ,0BAA0B,CAAC;;QAGtD,OAAOf,kBAAkB,CAACC,KAAK,EAAEC,yBAAyB,CAAC;MAC/D;KACH;EACL,CAAC;AACL,CAAC","names":["isOwnedByContext","createAnalyserNodeRendererFactory","createNativeAnalyserNode","getNativeAudioNode","renderInputsOfAudioNode","renderedNativeAnalyserNodes","WeakMap","createAnalyserNode","proxy","nativeOfflineAudioContext","nativeAnalyserNode","nativeAnalyserNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","fftSize","maxDecibels","minDecibels","smoothingTimeConstant","set","render","renderedNativeAnalyserNode","get","undefined","Promise","resolve"],"sourceRoot":"","sources":["../../../src/factories/analyser-node-renderer-factory.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}