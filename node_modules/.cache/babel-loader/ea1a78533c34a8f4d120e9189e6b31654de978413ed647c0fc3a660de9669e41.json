{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array-buffer.slice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.float32-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.find-last.js\";\nimport \"core-js/modules/es.typed-array.find-last-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport var createNativeWaveShaperNodeFactory = function createNativeWaveShaperNodeFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeWaveShaperNodeFaker, isDCCurve, monitorConnections, nativeAudioContextConstructor, overwriteAccessors) {\n  return function (nativeContext, options) {\n    var nativeWaveShaperNode = nativeContext.createWaveShaper();\n    /*\n     * Bug #119: Safari does not correctly map the values.\n     * @todo Unfortunately there is no way to test for this behavior in a synchronous fashion which is why testing for the existence of\n     * the webkitAudioContext is used as a workaround here. Testing for the automationRate property is necessary because this workaround\n     * isn't necessary anymore since v14.0.2 of Safari.\n     */\n    if (nativeAudioContextConstructor !== null && nativeAudioContextConstructor.name === 'webkitAudioContext' && nativeContext.createGain().gain.automationRate === undefined) {\n      return createNativeWaveShaperNodeFaker(nativeContext, options);\n    }\n    assignNativeAudioNodeOptions(nativeWaveShaperNode, options);\n    var curve = options.curve === null || options.curve instanceof Float32Array ? options.curve : new Float32Array(options.curve);\n    // Bug #104: Chrome and Edge will throw an InvalidAccessError when the curve has less than two samples.\n    if (curve !== null && curve.length < 2) {\n      throw createInvalidStateError();\n    }\n    // Only values of type Float32Array can be assigned to the curve property.\n    assignNativeAudioNodeOption(nativeWaveShaperNode, {\n      curve: curve\n    }, 'curve');\n    assignNativeAudioNodeOption(nativeWaveShaperNode, options, 'oversample');\n    var disconnectNativeAudioBufferSourceNode = null;\n    var isConnected = false;\n    overwriteAccessors(nativeWaveShaperNode, 'curve', function (get) {\n      return function () {\n        return get.call(nativeWaveShaperNode);\n      };\n    }, function (set) {\n      return function (value) {\n        set.call(nativeWaveShaperNode, value);\n        if (isConnected) {\n          if (isDCCurve(value) && disconnectNativeAudioBufferSourceNode === null) {\n            disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, nativeWaveShaperNode);\n          } else if (!isDCCurve(value) && disconnectNativeAudioBufferSourceNode !== null) {\n            disconnectNativeAudioBufferSourceNode();\n            disconnectNativeAudioBufferSourceNode = null;\n          }\n        }\n        return value;\n      };\n    });\n    var whenConnected = function whenConnected() {\n      isConnected = true;\n      if (isDCCurve(nativeWaveShaperNode.curve)) {\n        disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, nativeWaveShaperNode);\n      }\n    };\n    var whenDisconnected = function whenDisconnected() {\n      isConnected = false;\n      if (disconnectNativeAudioBufferSourceNode !== null) {\n        disconnectNativeAudioBufferSourceNode();\n        disconnectNativeAudioBufferSourceNode = null;\n      }\n    };\n    return monitorConnections(nativeWaveShaperNode, whenConnected, whenDisconnected);\n  };\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,2BAA2B,QAAQ,4CAA4C;AACxF,SAASC,4BAA4B,QAAQ,6CAA6C;AAG1F,OAAO,IAAMC,iCAAiC,GAAwC,SAAzEA,iCAAiC,CAC1CC,0CAA0C,EAC1CC,uBAAuB,EACvBC,+BAA+B,EAC/BC,SAAS,EACTC,kBAAkB,EAClBC,6BAA6B,EAC7BC,kBAAkB,EAClB;EACA,OAAO,UAACC,aAAa,EAAEC,OAAO,EAAI;IAC9B,IAAMC,oBAAoB,GAAGF,aAAa,CAACG,gBAAgB,EAAE;IAE7D;;;;;;IAMA,IACIL,6BAA6B,KAAK,IAAI,IACtCA,6BAA6B,CAACM,IAAI,KAAK,oBAAoB,IAC3DJ,aAAa,CAACK,UAAU,EAAE,CAACC,IAAI,CAACC,cAAc,KAAKC,SAAS,EAC9D;MACE,OAAOb,+BAA+B,CAACK,aAAa,EAAEC,OAAO,CAAC;;IAGlEV,4BAA4B,CAACW,oBAAoB,EAAED,OAAO,CAAC;IAE3D,IAAMQ,KAAK,GAAGR,OAAO,CAACQ,KAAK,KAAK,IAAI,IAAIR,OAAO,CAACQ,KAAK,YAAYC,YAAY,GAAGT,OAAO,CAACQ,KAAK,GAAG,IAAIC,YAAY,CAACT,OAAO,CAACQ,KAAK,CAAC;IAE/H;IACA,IAAIA,KAAK,KAAK,IAAI,IAAIA,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE;MACpC,MAAMjB,uBAAuB,EAAE;;IAGnC;IACAJ,2BAA2B,CAACY,oBAAoB,EAAE;MAAEO,KAAK,EAALA;IAAK,CAAE,EAAE,OAAO,CAAC;IACrEnB,2BAA2B,CAACY,oBAAoB,EAAED,OAAO,EAAE,YAAY,CAAC;IAExE,IAAIW,qCAAqC,GAAwB,IAAI;IACrE,IAAIC,WAAW,GAAG,KAAK;IAEvBd,kBAAkB,CACdG,oBAAoB,EACpB,OAAO,EACP,UAACY,GAAG;MAAA,OAAK;QAAA,OAAMA,GAAG,CAACC,IAAI,CAACb,oBAAoB,CAAC;MAAA;IAAA,GAC7C,UAACc,GAAG;MAAA,OAAK,UAACC,KAAK,EAAI;QACfD,GAAG,CAACD,IAAI,CAACb,oBAAoB,EAAEe,KAAK,CAAC;QAErC,IAAIJ,WAAW,EAAE;UACb,IAAIjB,SAAS,CAACqB,KAAK,CAAC,IAAIL,qCAAqC,KAAK,IAAI,EAAE;YACpEA,qCAAqC,GAAGnB,0CAA0C,CAC9EO,aAAa,EACbE,oBAAoB,CACvB;WACJ,MAAM,IAAI,CAACN,SAAS,CAACqB,KAAK,CAAC,IAAIL,qCAAqC,KAAK,IAAI,EAAE;YAC5EA,qCAAqC,EAAE;YACvCA,qCAAqC,GAAG,IAAI;;;QAIpD,OAAOK,KAAK;MAChB,CAAC;IAAA,EACJ;IAED,IAAMC,aAAa,GAAG,SAAhBA,aAAa,GAAQ;MACvBL,WAAW,GAAG,IAAI;MAElB,IAAIjB,SAAS,CAACM,oBAAoB,CAACO,KAAK,CAAC,EAAE;QACvCG,qCAAqC,GAAGnB,0CAA0C,CAACO,aAAa,EAAEE,oBAAoB,CAAC;;IAE/H,CAAC;IACD,IAAMiB,gBAAgB,GAAG,SAAnBA,gBAAgB,GAAQ;MAC1BN,WAAW,GAAG,KAAK;MAEnB,IAAID,qCAAqC,KAAK,IAAI,EAAE;QAChDA,qCAAqC,EAAE;QACvCA,qCAAqC,GAAG,IAAI;;IAEpD,CAAC;IAED,OAAOf,kBAAkB,CAACK,oBAAoB,EAAEgB,aAAa,EAAEC,gBAAgB,CAAC;EACpF,CAAC;AACL,CAAC","names":["assignNativeAudioNodeOption","assignNativeAudioNodeOptions","createNativeWaveShaperNodeFactory","createConnectedNativeAudioBufferSourceNode","createInvalidStateError","createNativeWaveShaperNodeFaker","isDCCurve","monitorConnections","nativeAudioContextConstructor","overwriteAccessors","nativeContext","options","nativeWaveShaperNode","createWaveShaper","name","createGain","gain","automationRate","undefined","curve","Float32Array","length","disconnectNativeAudioBufferSourceNode","isConnected","get","call","set","value","whenConnected","whenDisconnected"],"sourceRoot":"","sources":["../../../src/factories/native-wave-shaper-node-factory.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}