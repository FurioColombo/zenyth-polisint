{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.match.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.url.js\";\nimport \"core-js/modules/web.url-search-params.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.join.js\";\n/*\n * This massive regex tries to cover all the following cases.\n *\n * import './path';\n * import defaultImport from './path';\n * import { namedImport } from './path';\n * import { namedImport as renamendImport } from './path';\n * import * as namespaceImport from './path';\n * import defaultImport, { namedImport } from './path';\n * import defaultImport, { namedImport as renamendImport } from './path';\n * import defaultImport, * as namespaceImport from './path';\n */\nvar IMPORT_STATEMENT_REGEX = /^import(?:(?:[\\s]+[\\w]+|(?:[\\s]+[\\w]+[\\s]*,)?[\\s]*\\{[\\s]*[\\w]+(?:[\\s]+as[\\s]+[\\w]+)?(?:[\\s]*,[\\s]*[\\w]+(?:[\\s]+as[\\s]+[\\w]+)?)*[\\s]*}|(?:[\\s]+[\\w]+[\\s]*,)?[\\s]*\\*[\\s]+as[\\s]+[\\w]+)[\\s]+from)?(?:[\\s]*)(\"([^\"\\\\]|\\\\.)+\"|'([^'\\\\]|\\\\.)+')(?:[\\s]*);?/; // tslint:disable-line:max-line-length\nexport var splitImportStatements = function splitImportStatements(source, url) {\n  var importStatements = [];\n  var sourceWithoutImportStatements = source.replace(/^[\\s]+/, '');\n  var result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);\n  while (result !== null) {\n    var unresolvedUrl = result[1].slice(1, -1);\n    var importStatementWithResolvedUrl = result[0].replace(/([\\s]+)?;?$/, '').replace(unresolvedUrl, new URL(unresolvedUrl, url).toString());\n    importStatements.push(importStatementWithResolvedUrl);\n    sourceWithoutImportStatements = sourceWithoutImportStatements.slice(result[0].length).replace(/^[\\s]+/, '');\n    result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);\n  }\n  return [importStatements.join(';'), sourceWithoutImportStatements];\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAAA;;;;;;;;;;;;AAYA,IAAMA,sBAAsB,GAAG,sPAAsP,CAAC,CAAC;AAEvR,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAqB,CAAIC,MAAc,EAAEC,GAAW,EAAsB;EACnF,IAAMC,gBAAgB,GAAG,EAAE;EAE3B,IAAIC,6BAA6B,GAAGH,MAAM,CAACI,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;EAChE,IAAIC,MAAM,GAAGF,6BAA6B,CAACG,KAAK,CAACR,sBAAsB,CAAC;EAExE,OAAOO,MAAM,KAAK,IAAI,EAAE;IACpB,IAAME,aAAa,GAAGF,MAAM,CAAC,CAAC,CAAC,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAE5C,IAAMC,8BAA8B,GAAGJ,MAAM,CAAC,CAAC,CAAC,CAC3CD,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC,CAC1BA,OAAO,CAACG,aAAa,EAAE,IAAIG,GAAG,CAACH,aAAa,EAAEN,GAAG,CAAC,CAACU,QAAQ,EAAE,CAAC;IACnET,gBAAgB,CAACU,IAAI,CAACH,8BAA8B,CAAC;IAErDN,6BAA6B,GAAGA,6BAA6B,CAACK,KAAK,CAACH,MAAM,CAAC,CAAC,CAAC,CAACQ,MAAM,CAAC,CAACT,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;IAC3GC,MAAM,GAAGF,6BAA6B,CAACG,KAAK,CAACR,sBAAsB,CAAC;;EAGxE,OAAO,CAACI,gBAAgB,CAACY,IAAI,CAAC,GAAG,CAAC,EAAEX,6BAA6B,CAAC;AACtE,CAAC","names":["IMPORT_STATEMENT_REGEX","splitImportStatements","source","url","importStatements","sourceWithoutImportStatements","replace","result","match","unresolvedUrl","slice","importStatementWithResolvedUrl","URL","toString","push","length","join"],"sourceRoot":"","sources":["../../../src/helpers/split-import-statements.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}