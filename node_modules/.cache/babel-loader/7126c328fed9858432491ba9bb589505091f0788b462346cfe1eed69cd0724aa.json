{"ast":null,"code":"import _classCallCheck from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport { isAudioNode, isAudioParam } from \"../util/AdvancedTypeCheck\";\nimport { isDefined } from \"../util/TypeCheck\";\nimport { Param } from \"./Param\";\nimport { ToneWithContext } from \"./ToneWithContext\";\nimport { assert, warn } from \"../util/Debug\";\n/**\n * ToneAudioNode is the base class for classes which process audio.\n */\nexport var ToneAudioNode = /*#__PURE__*/function (_ToneWithContext) {\n  _inherits(ToneAudioNode, _ToneWithContext);\n  var _super = _createSuper(ToneAudioNode);\n  function ToneAudioNode() {\n    var _this;\n    _classCallCheck(this, ToneAudioNode);\n    _this = _super.apply(this, arguments);\n    /**\n     * The name of the class\n     */\n    _this.name = \"ToneAudioNode\";\n    /**\n     * List all of the node that must be set to match the ChannelProperties\n     */\n    _this._internalChannels = [];\n    return _this;\n  }\n  /**\n   * The number of inputs feeding into the AudioNode.\n   * For source nodes, this will be 0.\n   * @example\n   * const node = new Tone.Gain();\n   * console.log(node.numberOfInputs);\n   */\n  _createClass(ToneAudioNode, [{\n    key: \"numberOfInputs\",\n    get: function get() {\n      if (isDefined(this.input)) {\n        if (isAudioParam(this.input) || this.input instanceof Param) {\n          return 1;\n        } else {\n          return this.input.numberOfInputs;\n        }\n      } else {\n        return 0;\n      }\n    }\n    /**\n     * The number of outputs of the AudioNode.\n     * @example\n     * const node = new Tone.Gain();\n     * console.log(node.numberOfOutputs);\n     */\n  }, {\n    key: \"numberOfOutputs\",\n    get: function get() {\n      if (isDefined(this.output)) {\n        return this.output.numberOfOutputs;\n      } else {\n        return 0;\n      }\n    }\n    //-------------------------------------\n    // AUDIO PROPERTIES\n    //-------------------------------------\n    /**\n     * Used to decide which nodes to get/set properties on\n     */\n  }, {\n    key: \"_isAudioNode\",\n    value: function _isAudioNode(node) {\n      return isDefined(node) && (node instanceof ToneAudioNode || isAudioNode(node));\n    }\n    /**\n     * Get all of the audio nodes (either internal or input/output) which together\n     * make up how the class node responds to channel input/output\n     */\n  }, {\n    key: \"_getInternalNodes\",\n    value: function _getInternalNodes() {\n      var nodeList = this._internalChannels.slice(0);\n      if (this._isAudioNode(this.input)) {\n        nodeList.push(this.input);\n      }\n      if (this._isAudioNode(this.output)) {\n        if (this.input !== this.output) {\n          nodeList.push(this.output);\n        }\n      }\n      return nodeList;\n    }\n    /**\n     * Set the audio options for this node such as channelInterpretation\n     * channelCount, etc.\n     * @param options\n     */\n  }, {\n    key: \"_setChannelProperties\",\n    value: function _setChannelProperties(options) {\n      var nodeList = this._getInternalNodes();\n      nodeList.forEach(function (node) {\n        node.channelCount = options.channelCount;\n        node.channelCountMode = options.channelCountMode;\n        node.channelInterpretation = options.channelInterpretation;\n      });\n    }\n    /**\n     * Get the current audio options for this node such as channelInterpretation\n     * channelCount, etc.\n     */\n  }, {\n    key: \"_getChannelProperties\",\n    value: function _getChannelProperties() {\n      var nodeList = this._getInternalNodes();\n      assert(nodeList.length > 0, \"ToneAudioNode does not have any internal nodes\");\n      // use the first node to get properties\n      // they should all be the same\n      var node = nodeList[0];\n      return {\n        channelCount: node.channelCount,\n        channelCountMode: node.channelCountMode,\n        channelInterpretation: node.channelInterpretation\n      };\n    }\n    /**\n     * channelCount is the number of channels used when up-mixing and down-mixing\n     * connections to any inputs to the node. The default value is 2 except for\n     * specific nodes where its value is specially determined.\n     */\n  }, {\n    key: \"channelCount\",\n    get: function get() {\n      return this._getChannelProperties().channelCount;\n    },\n    set: function set(channelCount) {\n      var props = this._getChannelProperties();\n      // merge it with the other properties\n      this._setChannelProperties(Object.assign(props, {\n        channelCount: channelCount\n      }));\n    }\n    /**\n     * channelCountMode determines how channels will be counted when up-mixing and\n     * down-mixing connections to any inputs to the node.\n     * The default value is \"max\". This attribute has no effect for nodes with no inputs.\n     * * \"max\" - computedNumberOfChannels is the maximum of the number of channels of all connections to an input. In this mode channelCount is ignored.\n     * * \"clamped-max\" - computedNumberOfChannels is determined as for \"max\" and then clamped to a maximum value of the given channelCount.\n     * * \"explicit\" - computedNumberOfChannels is the exact value as specified by the channelCount.\n     */\n  }, {\n    key: \"channelCountMode\",\n    get: function get() {\n      return this._getChannelProperties().channelCountMode;\n    },\n    set: function set(channelCountMode) {\n      var props = this._getChannelProperties();\n      // merge it with the other properties\n      this._setChannelProperties(Object.assign(props, {\n        channelCountMode: channelCountMode\n      }));\n    }\n    /**\n     * channelInterpretation determines how individual channels will be treated\n     * when up-mixing and down-mixing connections to any inputs to the node.\n     * The default value is \"speakers\".\n     */\n  }, {\n    key: \"channelInterpretation\",\n    get: function get() {\n      return this._getChannelProperties().channelInterpretation;\n    },\n    set: function set(channelInterpretation) {\n      var props = this._getChannelProperties();\n      // merge it with the other properties\n      this._setChannelProperties(Object.assign(props, {\n        channelInterpretation: channelInterpretation\n      }));\n    }\n    //-------------------------------------\n    // CONNECTIONS\n    //-------------------------------------\n    /**\n     * connect the output of a ToneAudioNode to an AudioParam, AudioNode, or ToneAudioNode\n     * @param destination The output to connect to\n     * @param outputNum The output to connect from\n     * @param inputNum The input to connect to\n     */\n  }, {\n    key: \"connect\",\n    value: function connect(destination) {\n      var outputNum = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var inputNum = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      _connect(this, destination, outputNum, inputNum);\n      return this;\n    }\n    /**\n     * Connect the output to the context's destination node.\n     * @example\n     * const osc = new Tone.Oscillator(\"C2\").start();\n     * osc.toDestination();\n     */\n  }, {\n    key: \"toDestination\",\n    value: function toDestination() {\n      this.connect(this.context.destination);\n      return this;\n    }\n    /**\n     * Connect the output to the context's destination node.\n     * See [[toDestination]]\n     * @deprecated\n     */\n  }, {\n    key: \"toMaster\",\n    value: function toMaster() {\n      warn(\"toMaster() has been renamed toDestination()\");\n      return this.toDestination();\n    }\n    /**\n     * disconnect the output\n     */\n  }, {\n    key: \"disconnect\",\n    value: function disconnect(destination) {\n      var outputNum = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var inputNum = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      _disconnect(this, destination, outputNum, inputNum);\n      return this;\n    }\n    /**\n     * Connect the output of this node to the rest of the nodes in series.\n     * @example\n     * const player = new Tone.Player(\"https://tonejs.github.io/audio/drum-samples/handdrum-loop.mp3\");\n     * player.autostart = true;\n     * const filter = new Tone.AutoFilter(4).start();\n     * const distortion = new Tone.Distortion(0.5);\n     * // connect the player to the filter, distortion and then to the master output\n     * player.chain(filter, distortion, Tone.Destination);\n     */\n  }, {\n    key: \"chain\",\n    value: function chain() {\n      for (var _len = arguments.length, nodes = new Array(_len), _key = 0; _key < _len; _key++) {\n        nodes[_key] = arguments[_key];\n      }\n      connectSeries.apply(void 0, [this].concat(nodes));\n      return this;\n    }\n    /**\n     * connect the output of this node to the rest of the nodes in parallel.\n     * @example\n     * const player = new Tone.Player(\"https://tonejs.github.io/audio/drum-samples/conga-rhythm.mp3\");\n     * player.autostart = true;\n     * const pitchShift = new Tone.PitchShift(4).toDestination();\n     * const filter = new Tone.Filter(\"G5\").toDestination();\n     * // connect a node to the pitch shift and filter in parallel\n     * player.fan(pitchShift, filter);\n     */\n  }, {\n    key: \"fan\",\n    value: function fan() {\n      var _this2 = this;\n      for (var _len2 = arguments.length, nodes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        nodes[_key2] = arguments[_key2];\n      }\n      nodes.forEach(function (node) {\n        return _this2.connect(node);\n      });\n      return this;\n    }\n    /**\n     * Dispose and disconnect\n     */\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(ToneAudioNode.prototype), \"dispose\", this).call(this);\n      if (isDefined(this.input)) {\n        if (this.input instanceof ToneAudioNode) {\n          this.input.dispose();\n        } else if (isAudioNode(this.input)) {\n          this.input.disconnect();\n        }\n      }\n      if (isDefined(this.output)) {\n        if (this.output instanceof ToneAudioNode) {\n          this.output.dispose();\n        } else if (isAudioNode(this.output)) {\n          this.output.disconnect();\n        }\n      }\n      this._internalChannels = [];\n      return this;\n    }\n  }]);\n  return ToneAudioNode;\n}(ToneWithContext);\n//-------------------------------------\n// CONNECTIONS\n//-------------------------------------\n/**\n * connect together all of the arguments in series\n * @param nodes\n */\nexport function connectSeries() {\n  for (var _len3 = arguments.length, nodes = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    nodes[_key3] = arguments[_key3];\n  }\n  var first = nodes.shift();\n  nodes.reduce(function (prev, current) {\n    if (prev instanceof ToneAudioNode) {\n      prev.connect(current);\n    } else if (isAudioNode(prev)) {\n      _connect(prev, current);\n    }\n    return current;\n  }, first);\n}\n/**\n * Connect two nodes together so that signal flows from the\n * first node to the second. Optionally specify the input and output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nfunction _connect(srcNode, dstNode) {\n  var outputNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var inputNumber = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  assert(isDefined(srcNode), \"Cannot connect from undefined node\");\n  assert(isDefined(dstNode), \"Cannot connect to undefined node\");\n  if (dstNode instanceof ToneAudioNode || isAudioNode(dstNode)) {\n    assert(dstNode.numberOfInputs > 0, \"Cannot connect to node with no inputs\");\n  }\n  assert(srcNode.numberOfOutputs > 0, \"Cannot connect from node with no outputs\");\n  // resolve the input of the dstNode\n  while (dstNode instanceof ToneAudioNode || dstNode instanceof Param) {\n    if (isDefined(dstNode.input)) {\n      dstNode = dstNode.input;\n    }\n  }\n  while (srcNode instanceof ToneAudioNode) {\n    if (isDefined(srcNode.output)) {\n      srcNode = srcNode.output;\n    }\n  }\n  // make the connection\n  if (isAudioParam(dstNode)) {\n    srcNode.connect(dstNode, outputNumber);\n  } else {\n    srcNode.connect(dstNode, outputNumber, inputNumber);\n  }\n}\n/**\n * Disconnect a node from all nodes or optionally include a destination node and input/output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nexport { _connect as connect };\nfunction _disconnect(srcNode, dstNode) {\n  var outputNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var inputNumber = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  // resolve the destination node\n  if (isDefined(dstNode)) {\n    while (dstNode instanceof ToneAudioNode) {\n      dstNode = dstNode.input;\n    }\n  }\n  // resolve the src node\n  while (!isAudioNode(srcNode)) {\n    if (isDefined(srcNode.output)) {\n      srcNode = srcNode.output;\n    }\n  }\n  if (isAudioParam(dstNode)) {\n    srcNode.disconnect(dstNode, outputNumber);\n  } else if (isAudioNode(dstNode)) {\n    srcNode.disconnect(dstNode, outputNumber, inputNumber);\n  } else {\n    srcNode.disconnect();\n  }\n}\nexport { _disconnect as disconnect };","map":{"version":3,"mappings":"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","names":["isAudioNode","isAudioParam","isDefined","Param","ToneWithContext","assert","warn","ToneAudioNode","input","numberOfInputs","output","numberOfOutputs","node","nodeList","_internalChannels","slice","_isAudioNode","push","options","_getInternalNodes","forEach","channelCount","channelCountMode","channelInterpretation","length","_getChannelProperties","props","_setChannelProperties","Object","assign","destination","outputNum","inputNum","connect","context","toDestination","disconnect","nodes","connectSeries","dispose","first","shift","reduce","prev","current","srcNode","dstNode","outputNumber","inputNumber"],"sourceRoot":"","sources":["../../../../Tone/core/context/ToneAudioNode.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}