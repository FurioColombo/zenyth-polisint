{"ast":null,"code":"import { ToneWithContext } from \"../context/ToneWithContext\";\nimport { Timeline } from \"./Timeline\";\nimport { onContextClose, onContextInit } from \"../context/ContextInitialization\";\n/**\n * Draw is useful for synchronizing visuals and audio events.\n * Callbacks from Tone.Transport or any of the Tone.Event classes\n * always happen _before_ the scheduled time and are not synchronized\n * to the animation frame so they are not good for triggering tightly\n * synchronized visuals and sound. Draw makes it easy to schedule\n * callbacks using the AudioContext time and uses requestAnimationFrame.\n * @example\n * Tone.Transport.schedule((time) => {\n * \t// use the time argument to schedule a callback with Draw\n * \tTone.Draw.schedule(() => {\n * \t\t// do drawing or DOM manipulation here\n * \t\tconsole.log(time);\n * \t}, time);\n * }, \"+0.5\");\n * Tone.Transport.start();\n * @category Core\n */\nexport class Draw extends ToneWithContext {\n  constructor() {\n    super(...arguments);\n    this.name = \"Draw\";\n    /**\n     * The duration after which events are not invoked.\n     */\n    this.expiration = 0.25;\n    /**\n     * The amount of time before the scheduled time\n     * that the callback can be invoked. Default is\n     * half the time of an animation frame (0.008 seconds).\n     */\n    this.anticipation = 0.008;\n    /**\n     * All of the events.\n     */\n    this._events = new Timeline();\n    /**\n     * The draw loop\n     */\n    this._boundDrawLoop = this._drawLoop.bind(this);\n    /**\n     * The animation frame id\n     */\n    this._animationFrame = -1;\n  }\n  /**\n   * Schedule a function at the given time to be invoked\n   * on the nearest animation frame.\n   * @param  callback  Callback is invoked at the given time.\n   * @param  time      The time relative to the AudioContext time to invoke the callback.\n   * @example\n   * Tone.Transport.scheduleRepeat(time => {\n   * \tTone.Draw.schedule(() => console.log(time), time);\n   * }, 1);\n   * Tone.Transport.start();\n   */\n  schedule(callback, time) {\n    this._events.add({\n      callback,\n      time: this.toSeconds(time)\n    });\n    // start the draw loop on the first event\n    if (this._events.length === 1) {\n      this._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n    }\n    return this;\n  }\n  /**\n   * Cancel events scheduled after the given time\n   * @param  after  Time after which scheduled events will be removed from the scheduling timeline.\n   */\n  cancel(after) {\n    this._events.cancel(this.toSeconds(after));\n    return this;\n  }\n  /**\n   * The draw loop\n   */\n  _drawLoop() {\n    const now = this.context.currentTime;\n    while (this._events.length && this._events.peek().time - this.anticipation <= now) {\n      const event = this._events.shift();\n      if (event && now - event.time <= this.expiration) {\n        event.callback();\n      }\n    }\n    if (this._events.length > 0) {\n      this._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n    }\n  }\n  dispose() {\n    super.dispose();\n    this._events.dispose();\n    cancelAnimationFrame(this._animationFrame);\n    return this;\n  }\n}\n//-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\nonContextInit(context => {\n  context.draw = new Draw({\n    context\n  });\n});\nonContextClose(context => {\n  context.draw.dispose();\n});","map":{"version":3,"mappings":"AAAA,SAASA,eAAe,QAAgC,4BAA4B;AAEpF,SAASC,QAAQ,QAAuB,YAAY;AACpD,SAASC,cAAc,EAAEC,aAAa,QAAQ,kCAAkC;AAMhF;;;;;;;;;;;;;;;;;;AAkBA,OAAM,MAAOC,IAAK,SAAQJ,eAAuC;EAAjEK;;IAEU,SAAI,GAAW,MAAM;IAE9B;;;IAGA,eAAU,GAAY,IAAI;IAE1B;;;;;IAKA,iBAAY,GAAY,KAAK;IAE7B;;;IAGQ,YAAO,GAAwB,IAAIJ,QAAQ,EAAE;IAErD;;;IAGQ,mBAAc,GAAG,IAAI,CAACK,SAAS,CAACC,IAAI,CAAC,IAAI,CAAC;IAElD;;;IAGQ,oBAAe,GAAG,CAAC,CAAC;EAwD7B;EAtDC;;;;;;;;;;;EAWAC,QAAQ,CAACC,QAAoB,EAAEC,IAAU;IACxC,IAAI,CAACC,OAAO,CAACC,GAAG,CAAC;MAChBH,QAAQ;MACRC,IAAI,EAAE,IAAI,CAACG,SAAS,CAACH,IAAI;KACzB,CAAC;IACF;IACA,IAAI,IAAI,CAACC,OAAO,CAACG,MAAM,KAAK,CAAC,EAAE;MAC9B,IAAI,CAACC,eAAe,GAAGC,qBAAqB,CAAC,IAAI,CAACC,cAAc,CAAC;;IAElE,OAAO,IAAI;EACZ;EAEA;;;;EAIAC,MAAM,CAACC,KAAY;IAClB,IAAI,CAACR,OAAO,CAACO,MAAM,CAAC,IAAI,CAACL,SAAS,CAACM,KAAK,CAAC,CAAC;IAC1C,OAAO,IAAI;EACZ;EAEA;;;EAGQb,SAAS;IAChB,MAAMc,GAAG,GAAG,IAAI,CAACC,OAAO,CAACC,WAAW;IACpC,OAAO,IAAI,CAACX,OAAO,CAACG,MAAM,IAAK,IAAI,CAACH,OAAO,CAACY,IAAI,EAAgB,CAACb,IAAI,GAAG,IAAI,CAACc,YAAY,IAAIJ,GAAG,EAAE;MACjG,MAAMK,KAAK,GAAG,IAAI,CAACd,OAAO,CAACe,KAAK,EAAE;MAClC,IAAID,KAAK,IAAIL,GAAG,GAAGK,KAAK,CAACf,IAAI,IAAI,IAAI,CAACiB,UAAU,EAAE;QACjDF,KAAK,CAAChB,QAAQ,EAAE;;;IAGlB,IAAI,IAAI,CAACE,OAAO,CAACG,MAAM,GAAG,CAAC,EAAE;MAC5B,IAAI,CAACC,eAAe,GAAGC,qBAAqB,CAAC,IAAI,CAACC,cAAc,CAAC;;EAEnE;EAEAW,OAAO;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACjB,OAAO,CAACiB,OAAO,EAAE;IACtBC,oBAAoB,CAAC,IAAI,CAACd,eAAe,CAAC;IAC1C,OAAO,IAAI;EACZ;;AAGD;AACA;AACA;AAEAZ,aAAa,CAACkB,OAAO,IAAG;EACvBA,OAAO,CAACS,IAAI,GAAG,IAAI1B,IAAI,CAAC;IAAEiB;EAAO,CAAE,CAAC;AACrC,CAAC,CAAC;AAEFnB,cAAc,CAACmB,OAAO,IAAG;EACxBA,OAAO,CAACS,IAAI,CAACF,OAAO,EAAE;AACvB,CAAC,CAAC","names":["ToneWithContext","Timeline","onContextClose","onContextInit","Draw","constructor","_drawLoop","bind","schedule","callback","time","_events","add","toSeconds","length","_animationFrame","requestAnimationFrame","_boundDrawLoop","cancel","after","now","context","currentTime","peek","anticipation","event","shift","expiration","dispose","cancelAnimationFrame","draw"],"sourceRoot":"","sources":["../../../../Tone/core/util/Draw.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}