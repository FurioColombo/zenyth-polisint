{"ast":null,"code":"import { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Filter } from \"../filter/Filter\";\n/**\n * Split the incoming signal into three bands (low, mid, high)\n * with two crossover frequency controls.\n * ```\n *            +----------------------+\n *          +-> input < lowFrequency +------------------> low\n *          | +----------------------+\n *          |\n *          | +--------------------------------------+\n * input ---+-> lowFrequency < input < highFrequency +--> mid\n *          | +--------------------------------------+\n *          |\n *          | +-----------------------+\n *          +-> highFrequency < input +-----------------> high\n *            +-----------------------+\n * ```\n * @category Component\n */\nexport class MultibandSplit extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]));\n    this.name = \"MultibandSplit\";\n    /**\n     * the input\n     */\n    this.input = new Gain({\n      context: this.context\n    });\n    /**\n     * no output node, use either low, mid or high outputs\n     */\n    this.output = undefined;\n    /**\n     * The low band.\n     */\n    this.low = new Filter({\n      context: this.context,\n      frequency: 0,\n      type: \"lowpass\"\n    });\n    /**\n     * the lower filter of the mid band\n     */\n    this._lowMidFilter = new Filter({\n      context: this.context,\n      frequency: 0,\n      type: \"highpass\"\n    });\n    /**\n     * The mid band output.\n     */\n    this.mid = new Filter({\n      context: this.context,\n      frequency: 0,\n      type: \"lowpass\"\n    });\n    /**\n     * The high band output.\n     */\n    this.high = new Filter({\n      context: this.context,\n      frequency: 0,\n      type: \"highpass\"\n    });\n    this._internalChannels = [this.low, this.mid, this.high];\n    const options = optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]);\n    this.lowFrequency = new Signal({\n      context: this.context,\n      units: \"frequency\",\n      value: options.lowFrequency\n    });\n    this.highFrequency = new Signal({\n      context: this.context,\n      units: \"frequency\",\n      value: options.highFrequency\n    });\n    this.Q = new Signal({\n      context: this.context,\n      units: \"positive\",\n      value: options.Q\n    });\n    this.input.fan(this.low, this.high);\n    this.input.chain(this._lowMidFilter, this.mid);\n    // the frequency control signal\n    this.lowFrequency.fan(this.low.frequency, this._lowMidFilter.frequency);\n    this.highFrequency.fan(this.mid.frequency, this.high.frequency);\n    // the Q value\n    this.Q.connect(this.low.Q);\n    this.Q.connect(this._lowMidFilter.Q);\n    this.Q.connect(this.mid.Q);\n    this.Q.connect(this.high.Q);\n    readOnly(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      Q: 1,\n      highFrequency: 2500,\n      lowFrequency: 400\n    });\n  }\n  /**\n   * Clean up.\n   */\n  dispose() {\n    super.dispose();\n    writable(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n    this.low.dispose();\n    this._lowMidFilter.dispose();\n    this.mid.dispose();\n    this.high.dispose();\n    this.lowFrequency.dispose();\n    this.highFrequency.dispose();\n    this.Q.dispose();\n    return this;\n  }\n}","map":{"version":3,"mappings":"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","names":["Gain","ToneAudioNode","optionsFromArguments","readOnly","writable","Signal","Filter","MultibandSplit","constructor","getDefaults","arguments","context","undefined","frequency","type","low","mid","high","options","lowFrequency","units","value","highFrequency","Q","input","fan","chain","_lowMidFilter","connect","Object","assign","dispose"],"sourceRoot":"","sources":["../../../../Tone/component/channel/MultibandSplit.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}