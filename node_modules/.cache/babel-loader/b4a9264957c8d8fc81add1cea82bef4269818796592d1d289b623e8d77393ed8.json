{"ast":null,"code":"import { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { noOp } from \"../core/util/Interface\";\nimport { assert } from \"../core/util/Debug\";\n/**\n * Base class for fire-and-forget nodes\n */\nexport class OneShotSource extends ToneAudioNode {\n  constructor(options) {\n    super(options);\n    /**\n     * The callback to invoke after the\n     * source is done playing.\n     */\n    this.onended = noOp;\n    /**\n     * The start time\n     */\n    this._startTime = -1;\n    /**\n     * The stop time\n     */\n    this._stopTime = -1;\n    /**\n     * The id of the timeout\n     */\n    this._timeout = -1;\n    /**\n     * The public output node\n     */\n    this.output = new Gain({\n      context: this.context,\n      gain: 0\n    });\n    /**\n     * The output gain node.\n     */\n    this._gainNode = this.output;\n    /**\n     * Get the playback state at the given time\n     */\n    this.getStateAtTime = function (time) {\n      const computedTime = this.toSeconds(time);\n      if (this._startTime !== -1 && computedTime >= this._startTime && (this._stopTime === -1 || computedTime <= this._stopTime)) {\n        return \"started\";\n      } else {\n        return \"stopped\";\n      }\n    };\n    this._fadeIn = options.fadeIn;\n    this._fadeOut = options.fadeOut;\n    this._curve = options.curve;\n    this.onended = options.onended;\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      curve: \"linear\",\n      fadeIn: 0,\n      fadeOut: 0,\n      onended: noOp\n    });\n  }\n  /**\n   * Start the source at the given time\n   * @param  time When to start the source\n   */\n  _startGain(time, gain = 1) {\n    assert(this._startTime === -1, \"Source cannot be started more than once\");\n    // apply a fade in envelope\n    const fadeInTime = this.toSeconds(this._fadeIn);\n    // record the start time\n    this._startTime = time + fadeInTime;\n    this._startTime = Math.max(this._startTime, this.context.currentTime);\n    // schedule the envelope\n    if (fadeInTime > 0) {\n      this._gainNode.gain.setValueAtTime(0, time);\n      if (this._curve === \"linear\") {\n        this._gainNode.gain.linearRampToValueAtTime(gain, time + fadeInTime);\n      } else {\n        this._gainNode.gain.exponentialApproachValueAtTime(gain, time, fadeInTime);\n      }\n    } else {\n      this._gainNode.gain.setValueAtTime(gain, time);\n    }\n    return this;\n  }\n  /**\n   * Stop the source node at the given time.\n   * @param time When to stop the source\n   */\n  stop(time) {\n    this.log(\"stop\", time);\n    this._stopGain(this.toSeconds(time));\n    return this;\n  }\n  /**\n   * Stop the source at the given time\n   * @param  time When to stop the source\n   */\n  _stopGain(time) {\n    assert(this._startTime !== -1, \"'start' must be called before 'stop'\");\n    // cancel the previous stop\n    this.cancelStop();\n    // the fadeOut time\n    const fadeOutTime = this.toSeconds(this._fadeOut);\n    // schedule the stop callback\n    this._stopTime = this.toSeconds(time) + fadeOutTime;\n    this._stopTime = Math.max(this._stopTime, this.context.currentTime);\n    if (fadeOutTime > 0) {\n      // start the fade out curve at the given time\n      if (this._curve === \"linear\") {\n        this._gainNode.gain.linearRampTo(0, fadeOutTime, time);\n      } else {\n        this._gainNode.gain.targetRampTo(0, fadeOutTime, time);\n      }\n    } else {\n      // stop any ongoing ramps, and set the value to 0\n      this._gainNode.gain.cancelAndHoldAtTime(time);\n      this._gainNode.gain.setValueAtTime(0, time);\n    }\n    this.context.clearTimeout(this._timeout);\n    this._timeout = this.context.setTimeout(() => {\n      // allow additional time for the exponential curve to fully decay\n      const additionalTail = this._curve === \"exponential\" ? fadeOutTime * 2 : 0;\n      this._stopSource(this.now() + additionalTail);\n      this._onended();\n    }, this._stopTime - this.context.currentTime);\n    return this;\n  }\n  /**\n   * Invoke the onended callback\n   */\n  _onended() {\n    if (this.onended !== noOp) {\n      this.onended(this);\n      // overwrite onended to make sure it only is called once\n      this.onended = noOp;\n      // dispose when it's ended to free up for garbage collection only in the online context\n      if (!this.context.isOffline) {\n        const disposeCallback = () => this.dispose();\n        // @ts-ignore\n        if (typeof window.requestIdleCallback !== \"undefined\") {\n          // @ts-ignore\n          window.requestIdleCallback(disposeCallback);\n        } else {\n          setTimeout(disposeCallback, 1000);\n        }\n      }\n    }\n  }\n  /**\n   * Get the playback state at the current time\n   */\n  get state() {\n    return this.getStateAtTime(this.now());\n  }\n  /**\n   * Cancel a scheduled stop event\n   */\n  cancelStop() {\n    this.log(\"cancelStop\");\n    assert(this._startTime !== -1, \"Source is not started\");\n    // cancel the stop envelope\n    this._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);\n    this.context.clearTimeout(this._timeout);\n    this._stopTime = -1;\n    return this;\n  }\n  dispose() {\n    super.dispose();\n    this._gainNode.disconnect();\n    return this;\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,IAAI,QAAQ,sBAAsB;AAC3C,SACCC,aAAa,QAEP,+BAA+B;AAEtC,SAASC,IAAI,QAAQ,wBAAwB;AAC7C,SAASC,MAAM,QAAQ,oBAAoB;AAc3C;;;AAGA,OAAM,MAAgBC,aAEpB,SAAQH,aAAsB;EAuD/BI,YAAYC,OAA6B;IACxC,KAAK,CAACA,OAAO,CAAC;IAvDf;;;;IAIA,YAAO,GAAoBJ,IAAI;IAO/B;;;IAGU,eAAU,GAAG,CAAC,CAAC;IAEzB;;;IAGU,cAAS,GAAG,CAAC,CAAC;IAExB;;;IAGQ,aAAQ,GAAG,CAAC,CAAC;IAErB;;;IAGA,WAAM,GAAS,IAAIF,IAAI,CAAC;MACvBO,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBC,IAAI,EAAE;KACN,CAAC;IAEF;;;IAGU,cAAS,GAAG,IAAI,CAACC,MAAM;IAwJjC;;;IAGA,mBAAc,GAAG,UAASC,IAAU;MACnC,MAAMC,YAAY,GAAG,IAAI,CAACC,SAAS,CAACF,IAAI,CAAC;MACzC,IACC,IAAI,CAACG,UAAU,KAAK,CAAC,CAAC,IACtBF,YAAY,IAAI,IAAI,CAACE,UAAU,KAC9B,IAAI,CAACC,SAAS,KAAK,CAAC,CAAC,IAAIH,YAAY,IAAI,IAAI,CAACG,SAAS,CAAC,EACxD;QACD,OAAO,SAAS;OAChB,MAAM;QACN,OAAO,SAAS;;IAElB,CAAC;IAlJA,IAAI,CAACC,OAAO,GAAGT,OAAO,CAACU,MAAM;IAC7B,IAAI,CAACC,QAAQ,GAAGX,OAAO,CAACY,OAAO;IAC/B,IAAI,CAACC,MAAM,GAAGb,OAAO,CAACc,KAAK;IAC3B,IAAI,CAACC,OAAO,GAAGf,OAAO,CAACe,OAAO;EAC/B;EAEA,OAAOC,WAAW;IACjB,OAAOC,MAAM,CAACC,MAAM,CAACvB,aAAa,CAACqB,WAAW,EAAE,EAAE;MACjDF,KAAK,EAAE,QAA8B;MACrCJ,MAAM,EAAE,CAAC;MACTE,OAAO,EAAE,CAAC;MACVG,OAAO,EAAEnB;KACT,CAAC;EACH;EAYA;;;;EAIUuB,UAAU,CAACf,IAAa,EAAEF,OAAmB,CAAC;IACvDL,MAAM,CACL,IAAI,CAACU,UAAU,KAAK,CAAC,CAAC,EACtB,yCAAyC,CACzC;IACD;IACA,MAAMa,UAAU,GAAG,IAAI,CAACd,SAAS,CAAC,IAAI,CAACG,OAAO,CAAC;IAE/C;IACA,IAAI,CAACF,UAAU,GAAGH,IAAI,GAAGgB,UAAU;IACnC,IAAI,CAACb,UAAU,GAAGc,IAAI,CAACC,GAAG,CAAC,IAAI,CAACf,UAAU,EAAE,IAAI,CAACN,OAAO,CAACsB,WAAW,CAAC;IAErE;IACA,IAAIH,UAAU,GAAG,CAAC,EAAE;MACnB,IAAI,CAACI,SAAS,CAACtB,IAAI,CAACuB,cAAc,CAAC,CAAC,EAAErB,IAAI,CAAC;MAC3C,IAAI,IAAI,CAACS,MAAM,KAAK,QAAQ,EAAE;QAC7B,IAAI,CAACW,SAAS,CAACtB,IAAI,CAACwB,uBAAuB,CAC1CxB,IAAI,EACJE,IAAI,GAAGgB,UAAU,CACjB;OACD,MAAM;QACN,IAAI,CAACI,SAAS,CAACtB,IAAI,CAACyB,8BAA8B,CACjDzB,IAAI,EACJE,IAAI,EACJgB,UAAU,CACV;;KAEF,MAAM;MACN,IAAI,CAACI,SAAS,CAACtB,IAAI,CAACuB,cAAc,CAACvB,IAAI,EAAEE,IAAI,CAAC;;IAE/C,OAAO,IAAI;EACZ;EAEA;;;;EAIAwB,IAAI,CAACxB,IAAW;IACf,IAAI,CAACyB,GAAG,CAAC,MAAM,EAAEzB,IAAI,CAAC;IACtB,IAAI,CAAC0B,SAAS,CAAC,IAAI,CAACxB,SAAS,CAACF,IAAI,CAAC,CAAC;IACpC,OAAO,IAAI;EACZ;EAEA;;;;EAIU0B,SAAS,CAAC1B,IAAa;IAChCP,MAAM,CAAC,IAAI,CAACU,UAAU,KAAK,CAAC,CAAC,EAAE,sCAAsC,CAAC;IACtE;IACA,IAAI,CAACwB,UAAU,EAAE;IAEjB;IACA,MAAMC,WAAW,GAAG,IAAI,CAAC1B,SAAS,CAAC,IAAI,CAACK,QAAQ,CAAC;IAEjD;IACA,IAAI,CAACH,SAAS,GAAG,IAAI,CAACF,SAAS,CAACF,IAAI,CAAC,GAAG4B,WAAW;IACnD,IAAI,CAACxB,SAAS,GAAGa,IAAI,CAACC,GAAG,CAAC,IAAI,CAACd,SAAS,EAAE,IAAI,CAACP,OAAO,CAACsB,WAAW,CAAC;IACnE,IAAIS,WAAW,GAAG,CAAC,EAAE;MACpB;MACA,IAAI,IAAI,CAACnB,MAAM,KAAK,QAAQ,EAAE;QAC7B,IAAI,CAACW,SAAS,CAACtB,IAAI,CAAC+B,YAAY,CAAC,CAAC,EAAED,WAAW,EAAE5B,IAAI,CAAC;OACtD,MAAM;QACN,IAAI,CAACoB,SAAS,CAACtB,IAAI,CAACgC,YAAY,CAAC,CAAC,EAAEF,WAAW,EAAE5B,IAAI,CAAC;;KAEvD,MAAM;MACN;MACA,IAAI,CAACoB,SAAS,CAACtB,IAAI,CAACiC,mBAAmB,CAAC/B,IAAI,CAAC;MAC7C,IAAI,CAACoB,SAAS,CAACtB,IAAI,CAACuB,cAAc,CAAC,CAAC,EAAErB,IAAI,CAAC;;IAE5C,IAAI,CAACH,OAAO,CAACmC,YAAY,CAAC,IAAI,CAACC,QAAQ,CAAC;IACxC,IAAI,CAACA,QAAQ,GAAG,IAAI,CAACpC,OAAO,CAACqC,UAAU,CAAC,MAAK;MAC5C;MACA,MAAMC,cAAc,GACnB,IAAI,CAAC1B,MAAM,KAAK,aAAa,GAAGmB,WAAW,GAAG,CAAC,GAAG,CAAC;MACpD,IAAI,CAACQ,WAAW,CAAC,IAAI,CAACC,GAAG,EAAE,GAAGF,cAAc,CAAC;MAC7C,IAAI,CAACG,QAAQ,EAAE;IAChB,CAAC,EAAE,IAAI,CAAClC,SAAS,GAAG,IAAI,CAACP,OAAO,CAACsB,WAAW,CAAC;IAC7C,OAAO,IAAI;EACZ;EAEA;;;EAGUmB,QAAQ;IACjB,IAAI,IAAI,CAAC3B,OAAO,KAAKnB,IAAI,EAAE;MAC1B,IAAI,CAACmB,OAAO,CAAC,IAAI,CAAC;MAClB;MACA,IAAI,CAACA,OAAO,GAAGnB,IAAI;MACnB;MACA,IAAI,CAAC,IAAI,CAACK,OAAO,CAAC0C,SAAS,EAAE;QAC5B,MAAMC,eAAe,GAAG,MAAM,IAAI,CAACC,OAAO,EAAE;QAC5C;QACA,IAAI,OAAOC,MAAM,CAACC,mBAAmB,KAAK,WAAW,EAAE;UACtD;UACAD,MAAM,CAACC,mBAAmB,CAACH,eAAe,CAAC;SAC3C,MAAM;UACNN,UAAU,CAACM,eAAe,EAAE,IAAI,CAAC;;;;EAIrC;EAkBA;;;EAGA,IAAII,KAAK;IACR,OAAO,IAAI,CAACC,cAAc,CAAC,IAAI,CAACR,GAAG,EAAE,CAAC;EACvC;EAEA;;;EAGAV,UAAU;IACT,IAAI,CAACF,GAAG,CAAC,YAAY,CAAC;IACtBhC,MAAM,CAAC,IAAI,CAACU,UAAU,KAAK,CAAC,CAAC,EAAE,uBAAuB,CAAC;IACvD;IACA,IAAI,CAACiB,SAAS,CAACtB,IAAI,CAACgD,qBAAqB,CACxC,IAAI,CAAC3C,UAAU,GAAG,IAAI,CAAC4C,UAAU,CACjC;IACD,IAAI,CAAClD,OAAO,CAACmC,YAAY,CAAC,IAAI,CAACC,QAAQ,CAAC;IACxC,IAAI,CAAC7B,SAAS,GAAG,CAAC,CAAC;IACnB,OAAO,IAAI;EACZ;EAEAqC,OAAO;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACrB,SAAS,CAAC4B,UAAU,EAAE;IAC3B,OAAO,IAAI;EACZ","names":["Gain","ToneAudioNode","noOp","assert","OneShotSource","constructor","options","context","gain","output","time","computedTime","toSeconds","_startTime","_stopTime","_fadeIn","fadeIn","_fadeOut","fadeOut","_curve","curve","onended","getDefaults","Object","assign","_startGain","fadeInTime","Math","max","currentTime","_gainNode","setValueAtTime","linearRampToValueAtTime","exponentialApproachValueAtTime","stop","log","_stopGain","cancelStop","fadeOutTime","linearRampTo","targetRampTo","cancelAndHoldAtTime","clearTimeout","_timeout","setTimeout","additionalTail","_stopSource","now","_onended","isOffline","disposeCallback","dispose","window","requestIdleCallback","state","getStateAtTime","cancelScheduledValues","sampleTime","disconnect"],"sourceRoot":"","sources":["../../../Tone/source/OneShotSource.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}