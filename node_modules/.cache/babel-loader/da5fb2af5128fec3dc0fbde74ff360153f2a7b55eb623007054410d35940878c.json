{"ast":null,"code":"import _classCallCheck from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { dbToGain } from \"../../core/type/Conversions\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase } from \"./MeterBase\";\nimport { assert } from \"../../core/util/Debug\";\n/**\n * Get the current frequency data of the connected audio source using a fast Fourier transform.\n * @category Component\n */\nexport var FFT = /*#__PURE__*/function (_MeterBase) {\n  _inherits(FFT, _MeterBase);\n  var _super = _createSuper(FFT);\n  function FFT() {\n    var _this;\n    _classCallCheck(this, FFT);\n    _this = _super.call(this, optionsFromArguments(FFT.getDefaults(), arguments, [\"size\"]));\n    _this.name = \"FFT\";\n    var options = optionsFromArguments(FFT.getDefaults(), arguments, [\"size\"]);\n    _this.normalRange = options.normalRange;\n    _this._analyser.type = \"fft\";\n    _this.size = options.size;\n    return _this;\n  }\n  _createClass(FFT, [{\n    key: \"getValue\",\n    value:\n    /**\n     * Gets the current frequency data from the connected audio source.\n     * Returns the frequency data of length [[size]] as a Float32Array of decibel values.\n     */\n    function getValue() {\n      var _this2 = this;\n      var values = this._analyser.getValue();\n      return values.map(function (v) {\n        return _this2.normalRange ? dbToGain(v) : v;\n      });\n    }\n    /**\n     * The size of analysis. This must be a power of two in the range 16 to 16384.\n     * Determines the size of the array returned by [[getValue]] (i.e. the number of\n     * frequency bins). Large FFT sizes may be costly to compute.\n     */\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this._analyser.size;\n    },\n    set: function set(size) {\n      this._analyser.size = size;\n    }\n    /**\n     * 0 represents no time averaging with the last analysis frame.\n     */\n  }, {\n    key: \"smoothing\",\n    get: function get() {\n      return this._analyser.smoothing;\n    },\n    set: function set(val) {\n      this._analyser.smoothing = val;\n    }\n    /**\n     * Returns the frequency value in hertz of each of the indices of the FFT's [[getValue]] response.\n     * @example\n     * const fft = new Tone.FFT(32);\n     * console.log([0, 1, 2, 3, 4].map(index => fft.getFrequencyOfIndex(index)));\n     */\n  }, {\n    key: \"getFrequencyOfIndex\",\n    value: function getFrequencyOfIndex(index) {\n      assert(0 <= index && index < this.size, \"index must be greater than or equal to 0 and less than \".concat(this.size));\n      return index * this.context.sampleRate / (this.size * 2);\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        normalRange: false,\n        size: 1024,\n        smoothing: 0.8\n      });\n    }\n  }]);\n  return FFT;\n}(MeterBase);","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,aAAa,QAAQ,kCAAkC;AAChE,SAASC,QAAQ,QAAQ,6BAA6B;AAEtD,SAASC,oBAAoB,QAAQ,0BAA0B;AAC/D,SAASC,SAAS,QAA0B,aAAa;AACzD,SAASC,MAAM,QAAQ,uBAAuB;AAQ9C;;;;AAIA,WAAaC,GAAI;EAAA;EAAA;EAgBhB;IAAA;IAAA;IACC,0BAAMH,oBAAoB,CAACG,GAAG,CAACC,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,MAAM,CAAC,CAAC;IAf1D,UAAI,GAAW,KAAK;IAgB5B,IAAMC,OAAO,GAAGN,oBAAoB,CAACG,GAAG,CAACC,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,MAAM,CAAC,CAAC;IAE5E,MAAKE,WAAW,GAAGD,OAAO,CAACC,WAAW;IACtC,MAAKC,SAAS,CAACC,IAAI,GAAG,KAAK;IAC3B,MAAKC,IAAI,GAAGJ,OAAO,CAACI,IAAI;IAAC;EAC1B;EAAC;IAAA;IAAA;IAUD;;;;IAIA,oBAAQ;MAAA;MACP,IAAMC,MAAM,GAAG,IAAI,CAACH,SAAS,CAACI,QAAQ,EAAkB;MACxD,OAAOD,MAAM,CAACE,GAAG,CAAC,WAAC;QAAA,OAAI,MAAI,CAACN,WAAW,GAAGR,QAAQ,CAACe,CAAC,CAAC,GAAGA,CAAC;MAAA,EAAC;IAC3D;IAEA;;;;;EAAA;IAAA;IAAA,KAKA,eAAQ;MACP,OAAO,IAAI,CAACN,SAAS,CAACE,IAAI;IAC3B,CAAC;IAAA,KACD,aAASA,IAAI;MACZ,IAAI,CAACF,SAAS,CAACE,IAAI,GAAGA,IAAI;IAC3B;IAEA;;;EAAA;IAAA;IAAA,KAGA,eAAa;MACZ,OAAO,IAAI,CAACF,SAAS,CAACO,SAAS;IAChC,CAAC;IAAA,KACD,aAAcC,GAAG;MAChB,IAAI,CAACR,SAAS,CAACO,SAAS,GAAGC,GAAG;IAC/B;IAEA;;;;;;EAAA;IAAA;IAAA,OAMA,6BAAoBC,KAAa;MAChCf,MAAM,CAAC,CAAC,IAAIe,KAAK,IAAIA,KAAK,GAAG,IAAI,CAACP,IAAI,mEAA4D,IAAI,CAACA,IAAI,EAAG;MAC9G,OAAOO,KAAK,GAAG,IAAI,CAACC,OAAO,CAACC,UAAU,IAAI,IAAI,CAACT,IAAI,GAAG,CAAC,CAAC;IACzD;EAAC;IAAA;IAAA,OAhDD,uBAAkB;MACjB,OAAOU,MAAM,CAACC,MAAM,CAACvB,aAAa,CAACM,WAAW,EAAE,EAAE;QACjDG,WAAW,EAAE,KAAK;QAClBG,IAAI,EAAE,IAAI;QACVK,SAAS,EAAE;OACX,CAAC;IACH;EAAC;EAAA;AAAA,EA/BuBd,SAAqB","names":["ToneAudioNode","dbToGain","optionsFromArguments","MeterBase","assert","FFT","getDefaults","arguments","options","normalRange","_analyser","type","size","values","getValue","map","v","smoothing","val","index","context","sampleRate","Object","assign"],"sourceRoot":"","sources":["../../../../Tone/component/analysis/FFT.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}