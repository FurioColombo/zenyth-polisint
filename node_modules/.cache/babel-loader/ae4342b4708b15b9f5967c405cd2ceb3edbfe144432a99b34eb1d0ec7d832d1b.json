{"ast":null,"code":"import { Chorus, Distortion, Envelope, Gain, LFO, Panner, PingPongDelay, Reverb, Vibrato } from 'tone';\nimport { nextTick } from \"vue\";\nexport default class MyEffect {\n  constructor({\n    type = \"none\",\n    modulation = 0\n  }) {\n    this.type = type;\n    this.mod = modulation;\n    this.effect = this.generateToneFx(type);\n    this.modulatorsPreset = {\n      envelope: {\n        mod: {\n          amount: 0,\n          signal: null\n        }\n      },\n      lfo: {\n        mod: {\n          amount: 0,\n          signal: null\n        }\n      }\n    };\n  }\n\n  // getters\n  getToneReference() {\n    return this.effect;\n  }\n\n  // creator\n  generateToneFx(type) {\n    let effect;\n    // console.log(\"fx gen type: \" + type)\n    switch (type) {\n      case 0:\n      case 'none':\n        effect = new Gain();\n        break;\n      case 1:\n      case 'reverb':\n        effect = this.createReverb();\n        break;\n      case 2:\n      case 'delay':\n        effect = this.createDelay();\n        break;\n      case 3:\n      case 'distortion':\n        effect = this.createDistortion();\n        break;\n      case 4:\n      case 'vibrato':\n        effect = this.createVibrato();\n        break;\n      case 5:\n      case 'pan':\n        effect = this.createPan();\n        break;\n      case 6:\n      case 'chorus':\n        effect = this.createChorus();\n        break;\n      default:\n        effect = new Gain();\n    }\n    // console.log(effect)\n    this.setFxParams({\n      effect: effect,\n      type: type\n    });\n    return effect;\n  }\n\n  // setters\n  // general setter\n  setFxParams({\n    effect = this.effect,\n    type = this.type,\n    mod = this.mod\n  }) {\n    this.effect = effect;\n    this.type = type;\n    this.mod = mod;\n    // console.log(\"effect = \"+ this.effect,\" type = \" + this.type, \"mod = \" + this.mod)\n\n    switch (type) {\n      case 1: // reverb\n      case 'reverb':\n        this.effect.set({\n          decay: 0.1 + 5 * mod,\n          wet: 0.3 + 0.7 * mod\n        });\n        break;\n      case 2: // delay\n      case 'delay':\n        this.effect.set({\n          delayTime: 0.05 + 0.4 * mod,\n          feedback: 0.05 + 0.90 * mod,\n          wet: 0.3 + 0.7 * mod\n        });\n        break;\n      case 3: // distortion\n      case 'distortion':\n        this.effect.set({\n          distortion: 0.05 + 0.95 * mod,\n          wet: 0.4 + 0.6 * mod\n        });\n        break;\n      case 4: // vibrato\n      case 'vibrato':\n        this.effect.set({\n          depth: 0.5 + 0.5 * mod,\n          frequency: 1 + 20 * mod,\n          wet: 0.5 + 0.5 * mod\n        });\n        break;\n      case 5: // pan\n      case 'pan':\n        let coeff = -1 + 2 * mod;\n        this.effect.set({\n          pan: coeff,\n          wet: 1\n        });\n        console.log(\"pan coeff: \" + coeff.toFixed(2));\n        break;\n      case 6: // chorus\n      case 'chorus':\n        this.effect.set({\n          depth: 0.6 + mod * 0.4,\n          frequency: 30 + mod * 10,\n          spread: 80 * mod * 8,\n          wet: 1,\n          feedback: 0.05 + mod * 0.9,\n          type: \"triangle\" + (mod * 10).toFixed(0).toString(),\n          delayTime: 100 + mod * 90\n        });\n        break;\n      default:\n        this.effect = new Gain();\n    }\n  }\n\n  // -------------- FX CREATION -------------\n  createReverb() {\n    return new Reverb();\n  }\n  createDelay() {\n    //todo: not interesting effect if used like this\n    return new PingPongDelay();\n  }\n  createDistortion() {\n    return new Distortion();\n  }\n  createVibrato() {\n    return new Vibrato();\n  }\n  createPan() {\n    // todo: create LFO modulating width\n    return new Panner();\n  }\n  createChorus() {\n    return new Chorus();\n  }\n\n  // TODO:  ------------- MODULATION ------------\n\n  createModulator(type) {\n    //console.log(\"creating modulator of type: \"+type)\n    switch (type) {\n      case \"envelope\":\n        return new Envelope();\n      case \"lfo\":\n        return new LFO();\n      default:\n        console.log(\"Error creating modulator\");\n        return null;\n    }\n  }\n  modulatorSetter(modulator, type, parameters) {\n    switch (type) {\n      case \"envelope\":\n        modulator.set({\n          \"attack\": parameters.attack,\n          \"decay\": parameters.decay,\n          \"sustain\": parameters.sustain,\n          \"release\": parameters.release\n        });\n        break;\n      case \"lfo\":\n        //TO-DO\n        modulator.set({});\n        break;\n      default:\n        console.log(\"Error setting modulator parameters, invalid args\");\n        break;\n    }\n  }\n  setModulatorParameters(type, target, parameters) {\n    // console.log(\"MyFx setModulatorParameters\")\n    if (this.initialized) {\n      this.modulatorsData[type][target].parameters = parameters;\n      this.updateModulators();\n    }\n  }\n\n  // have to pass, the modulator (tone), the type (lfo or envelope), the gain linked to the voice, the voice and the target\n  connectModulator(modulator, type, gain, target) {\n    switch (type) {\n      case \"envelope\":\n        break;\n      case \"lfo\":\n        //TO-DO\n        break;\n      default:\n        console.log(\"invalid modulator type\");\n        break;\n    }\n  }\n\n  // ------------- TONE JS EXTENSIONS -----------\n  connect(route) {\n    this.effect.connect(route);\n  }\n  disconnect() {\n    this.effect.disconnect();\n  }\n  dispose() {\n    this.effect.dispose();\n  }\n}","map":{"version":3,"names":["Chorus","Distortion","Envelope","Gain","LFO","Panner","PingPongDelay","Reverb","Vibrato","nextTick","MyEffect","constructor","type","modulation","mod","effect","generateToneFx","modulatorsPreset","envelope","amount","signal","lfo","getToneReference","createReverb","createDelay","createDistortion","createVibrato","createPan","createChorus","setFxParams","set","decay","wet","delayTime","feedback","distortion","depth","frequency","coeff","pan","console","log","toFixed","spread","toString","createModulator","modulatorSetter","modulator","parameters","attack","sustain","release","setModulatorParameters","target","initialized","modulatorsData","updateModulators","connectModulator","gain","connect","route","disconnect","dispose"],"sources":["/Users/guglielmofratticioli/Documents/POLIMI/FurioColombo.github.io/src/views/Synth/Effects/MyFx.js"],"sourcesContent":["import {Chorus, Distortion, Envelope, Gain, LFO, Panner, PingPongDelay, Reverb, Vibrato} from 'tone'\nimport {nextTick} from \"vue\";\n\nexport default class MyEffect {\n    constructor({ type = \"none\", modulation = 0 }) {\n        this.type = type;\n        this.mod = modulation;\n        this.effect = this.generateToneFx(type)\n\n        this.modulatorsPreset = {\n            envelope: {\n                mod: { amount: 0, signal: null },\n            },\n            lfo: {\n                mod: { amount: 0, signal: null },\n            }\n        }\n    }\n\n    // getters\n    getToneReference(){\n        return this.effect;\n    }\n\n    // creator\n    generateToneFx(type) {\n        let effect;\n        // console.log(\"fx gen type: \" + type)\n        switch (type) {\n            case 0:\n            case 'none':\n                effect = new Gain();\n                break;\n            case 1:\n            case 'reverb':\n                effect = this.createReverb()\n                break;\n            case 2:\n            case 'delay':\n                effect = this.createDelay()\n                break;\n            case 3:\n            case 'distortion':\n                effect = this.createDistortion()\n                break;\n            case 4:\n            case 'vibrato':\n                effect = this.createVibrato()\n                break;\n            case 5:\n            case 'pan':\n                effect = this.createPan()\n                break;\n            case 6:\n            case 'chorus':\n                effect = this.createChorus()\n                break;\n            default:\n                effect = new Gain();\n        }\n        // console.log(effect)\n        this.setFxParams({ effect: effect, type: type })\n        return effect;\n    }\n\n    // setters\n    // general setter\n    setFxParams({ effect = this.effect, type = this.type, mod = this.mod }) {\n        this.effect = effect;\n        this.type = type;\n        this.mod = mod;\n        // console.log(\"effect = \"+ this.effect,\" type = \" + this.type, \"mod = \" + this.mod)\n\n        switch (type) {\n            case 1: // reverb\n            case 'reverb':\n                this.effect.set({\n                    decay: 0.1 + 5*mod,\n                    wet: 0.3 + 0.7*mod,\n                })\n                break;\n            case 2: // delay\n            case 'delay':\n                this.effect.set({\n                    delayTime: 0.05 + 0.4*mod,\n                    feedback: 0.05 + 0.90*mod,\n                    wet: 0.3 + 0.7*mod,\n                })\n                break;\n            case 3: // distortion\n            case 'distortion':\n                this.effect.set({\n                    distortion: 0.05 + 0.95*mod,\n                    wet: 0.4 + 0.6*mod,\n                })\n                break;\n            case 4: // vibrato\n            case 'vibrato':\n                this.effect.set({\n                    depth: 0.5 + 0.5*mod,\n                    frequency: 1 + 20*mod,\n                    wet: 0.5 + 0.5*mod\n                })\n                break;\n            case 5: // pan\n            case 'pan':\n                let coeff = -1 + (2*mod)\n                this.effect.set({\n                    pan: coeff,\n                    wet: 1,\n                })\n                console.log(\"pan coeff: \" + coeff.toFixed(2))\n                break;\n            case 6: // chorus\n            case 'chorus':\n                this.effect.set({\n                    depth: 0.6 + mod*0.4,\n                    frequency: 30 + mod*10,\n                    spread: 80 * mod*8,\n                    wet: 1,\n                    feedback: 0.05 + mod*0.9,\n                    type: \"triangle\" + (mod*10).toFixed(0).toString(),\n                    delayTime: 100 + mod*90,\n                })\n                break;\n            default:\n                this.effect = new Gain();\n        }\n    }\n\n    // -------------- FX CREATION -------------\n    createReverb(){\n        return new Reverb();\n    }\n    createDelay() {\n        //todo: not interesting effect if used like this\n        return new PingPongDelay();\n    }\n    createDistortion(){\n        return new Distortion();\n    }\n    createVibrato(){\n        return new Vibrato();\n    }\n    createPan(){\n        // todo: create LFO modulating width\n        return new Panner();\n    }\n    createChorus(){\n        return new Chorus();\n    }\n\n    // TODO:  ------------- MODULATION ------------\n\n    createModulator(type) {\n        //console.log(\"creating modulator of type: \"+type)\n        switch (type) {\n            case \"envelope\":\n                return new Envelope;\n            case \"lfo\":\n                return new LFO;\n            default:\n                console.log(\"Error creating modulator\");\n                return null;\n        }\n    }\n\n    modulatorSetter(modulator, type, parameters) {\n        switch (type) {\n            case \"envelope\":\n                modulator.set({\n                    \"attack\": parameters.attack,\n                    \"decay\": parameters.decay,\n                    \"sustain\": parameters.sustain,\n                    \"release\": parameters.release\n                })\n                break;\n            case \"lfo\":\n                //TO-DO\n                modulator.set({\n\n                })\n                break;\n            default:\n                console.log(\"Error setting modulator parameters, invalid args\")\n                break;\n        }\n    }\n    setModulatorParameters(type, target, parameters) {\n        // console.log(\"MyFx setModulatorParameters\")\n        if (this.initialized) {\n            this.modulatorsData[type][target].parameters = parameters\n            this.updateModulators()\n        }\n    }\n\n    // have to pass, the modulator (tone), the type (lfo or envelope), the gain linked to the voice, the voice and the target\n    connectModulator(modulator, type, gain, target) {\n        switch (type) {\n            case \"envelope\":\n                break;\n\n            case \"lfo\":\n                //TO-DO\n                break;\n\n            default:\n                console.log(\"invalid modulator type\")\n                break;\n        }\n    }\n\n\n    // ------------- TONE JS EXTENSIONS -----------\n    connect(route){\n        this.effect.connect(route);\n    }\n    disconnect(){\n        this.effect.disconnect();\n    }\n    dispose(){\n        this.effect.dispose();\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}