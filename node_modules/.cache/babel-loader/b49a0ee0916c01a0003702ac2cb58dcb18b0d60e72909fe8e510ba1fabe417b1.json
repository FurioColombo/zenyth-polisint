{"ast":null,"code":"import { normalizeStyle as _normalizeStyle, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"oscilloscope\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"canvas\", {\n    ref: \"canvas\",\n    \"class\": \"oscilloscopeCanvas\",\n    style: _normalizeStyle(this.oscilloscopeCanvas)\n  }, null, 4)]);\n}","map":{"version":3,"mappings":";;EACO,SAAM;AAAc;;uBAAzBA,oBAEM,OAFNC,UAEM,GADJC,oBAA0F;IAAlFC,GAAG,EAAC,QAAQ;IAAC,SAAM,oBAAoB;IAAEC,KAAK,uBAAOC,kBAAkB","names":["_createElementBlock","_hoisted_1","_createElementVNode","ref","style","oscilloscopeCanvas"],"sourceRoot":"","sources":["/Users/eliapirrello/Documents/GitHub/zenyth/src/views/Synth/Tools/Oscilloscope.vue"],"sourcesContent":["<template>\n  <div class=\"oscilloscope\">\n    <canvas ref=\"canvas\" class=\"oscilloscopeCanvas\" :style=\"this.oscilloscopeCanvas\"></canvas>\n  </div>\n</template>\n\n<script>\nimport * as Tone from \"tone\";\n\nexport default {\n  data() {\n    return {\n      oscilloscopeData: [],\n      timing: 10,\n    };\n  },\n\n  mounted() {\n    this.oscilloscope = new Tone.Waveform();\n    Tone.getDestination().connect(this.oscilloscope);\n    this.startOscilloscope();\n\n    // use the ref to get the canvas element\n    this.canvas = this.$refs.canvas;\n\n    // set the canvas width and height to 100%\n    this.canvas.width = 4*this.canvas.offsetWidth;\n    this.canvas.height = 4*this.canvas.offsetHeight;\n\n    // get the canvas context\n    this.ctx = this.canvas.getContext(\"2d\");\n  },\n  methods: {\n    setTiming(timing) {\n      this.timing = timing;\n      clearInterval(this.intervalId);\n      this.startOscilloscope();\n    },\n    startOscilloscope() {\n        //console.log(\"avviando oscilloscope con timer \"+this.timing)\n      this.intervalId = setInterval(() => {\n        this.updateOscilloscopeData();\n      }, this.timing);\n    },\n    draw(data) {\n      // clear the canvas\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n      // draw the data on the canvas\n      // set the line color\n      this.ctx.strokeStyle = \"#658060\";\n      // set the line width\n      this.ctx.lineWidth = 6;\n      this.ctx.beginPath();\n\n      // loop through the data and plot it on the canvas\n      for (let i = 0; i < data.length; i++) {\n        // calculate the x and y position of the point\n        let x = i * (this.canvas.width / data.length);\n        let y = (this.canvas.height / 2) * (1 - data[i]);\n\n        // move to the x and y position\n        this.ctx.moveTo(x, y);\n        // draw a line to the next point\n        this.ctx.lineTo(x + this.canvas.width / data.length, y);\n      }\n      // draw the line\n      this.ctx.stroke();\n      this.ctx.moveTo(0, 0);\n    },\n    updateOscilloscopeData() {\n      this.oscilloscopeData = this.oscilloscope.getValue();\n      this.draw(this.oscilloscopeData);\n      //console.log(this.oscilloscopeData);\n    },\n  },\n  computed: {\n    oscilloscopeCanvas(){\n      return{\n        background: this.colors.green.glow,\n      }\n    }\n  },\n  beforeDestroy() {\n    this.oscilloscope.dispose();\n  },\n};\n</script>\n\n<style>\n.oscilloscope {\n  grid-row: 2;\n  margin: 0.15vw 0.3vw 0.3vw;\n  box-sizing: border-box;\n  \n}\n.oscilloscopeCanvas {\n  width: 100%;\n  height: 100%;\n  background-color: #caffbf;\n  border-radius: 0.2vw;\n  border: 0.1vw solid #334030;\n  box-sizing: border-box;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}