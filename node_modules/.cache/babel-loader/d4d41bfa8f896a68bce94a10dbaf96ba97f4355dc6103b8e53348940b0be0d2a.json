{"ast":null,"code":"import _classCallCheck from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Compressor } from \"./Compressor\";\nimport { readOnly } from \"../../core/util/Interface\";\n;\n/**\n * Limiter will limit the loudness of an incoming signal.\n * Under the hood it's composed of a [[Compressor]] with a fast attack\n * and release and max compression ratio.\n *\n * @example\n * const limiter = new Tone.Limiter(-20).toDestination();\n * const oscillator = new Tone.Oscillator().connect(limiter);\n * oscillator.start();\n * @category Component\n */\nexport var Limiter = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Limiter, _ToneAudioNode);\n  var _super = _createSuper(Limiter);\n  function Limiter() {\n    var _this;\n    _classCallCheck(this, Limiter);\n    _this = _super.call(this, Object.assign(optionsFromArguments(Limiter.getDefaults(), arguments, [\"threshold\"])));\n    _this.name = \"Limiter\";\n    var options = optionsFromArguments(Limiter.getDefaults(), arguments, [\"threshold\"]);\n    _this._compressor = _this.input = _this.output = new Compressor({\n      context: _this.context,\n      ratio: 20,\n      attack: 0.003,\n      release: 0.01,\n      threshold: options.threshold\n    });\n    _this.threshold = _this._compressor.threshold;\n    readOnly(_assertThisInitialized(_this), \"threshold\");\n    return _this;\n  }\n  _createClass(Limiter, [{\n    key: \"reduction\",\n    get:\n    /**\n     * A read-only decibel value for metering purposes, representing the current amount of gain\n     * reduction that the compressor is applying to the signal.\n     */\n    function get() {\n      return this._compressor.reduction;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Limiter.prototype), \"dispose\", this).call(this);\n      this._compressor.dispose();\n      this.threshold.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        threshold: -12\n      });\n    }\n  }]);\n  return Limiter;\n}(ToneAudioNode);","map":{"version":3,"mappings":";;;;;;;;AAAA,SAAgCA,aAAa,QAA8B,kCAAkC;AAE7G,SAASC,oBAAoB,QAAQ,0BAA0B;AAC/D,SAASC,UAAU,QAAQ,cAAc;AAEzC,SAASC,QAAQ,QAAQ,2BAA2B;AAInD;AAED;;;;;;;;;;;AAWA,WAAaC,OAAQ;EAAA;EAAA;EAmBpB;IAAA;IAAA;IACC,0BAAMC,MAAM,CAACC,MAAM,CAACL,oBAAoB,CAACG,OAAO,CAACG,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC;IAlBlF,UAAI,GAAW,SAAS;IAmBhC,IAAMC,OAAO,GAAGR,oBAAoB,CAACG,OAAO,CAACG,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,WAAW,CAAC,CAAC;IAErF,MAAKE,WAAW,GAAG,MAAKC,KAAK,GAAG,MAAKC,MAAM,GAAG,IAAIV,UAAU,CAAC;MAC5DW,OAAO,EAAE,MAAKA,OAAO;MACrBC,KAAK,EAAE,EAAE;MACTC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE,IAAI;MACbC,SAAS,EAAER,OAAO,CAACQ;KACnB,CAAC;IAEF,MAAKA,SAAS,GAAG,MAAKP,WAAW,CAACO,SAAS;IAC3Cd,QAAQ,gCAAO,WAAW,CAAC;IAAC;EAC7B;EAAC;IAAA;IAAA;IAQD;;;;IAIA,eAAa;MACZ,OAAO,IAAI,CAACO,WAAW,CAACQ,SAAS;IAClC;EAAC;IAAA;IAAA,OAED,mBAAO;MACN;MACA,IAAI,CAACR,WAAW,CAACS,OAAO,EAAE;MAC1B,IAAI,CAACF,SAAS,CAACE,OAAO,EAAE;MACxB,OAAO,IAAI;IACZ;EAAC;IAAA;IAAA,OAnBD,uBAAkB;MACjB,OAAOd,MAAM,CAACC,MAAM,CAACN,aAAa,CAACO,WAAW,EAAE,EAAE;QACjDU,SAAS,EAAE,CAAC;OACZ,CAAC;IACH;EAAC;EAAA;AAAA,EAvC2BjB,aAA6B","names":["ToneAudioNode","optionsFromArguments","Compressor","readOnly","Limiter","Object","assign","getDefaults","arguments","options","_compressor","input","output","context","ratio","attack","release","threshold","reduction","dispose"],"sourceRoot":"","sources":["../../../../Tone/component/dynamics/Limiter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}