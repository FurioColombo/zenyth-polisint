{"ast":null,"code":"import { normalizeStyle as _normalizeStyle, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nvar _withScopeId = function _withScopeId(n) {\n  return _pushScopeId(\"data-v-c5d289ba\"), n = n(), _popScopeId(), n;\n};\nvar _hoisted_1 = {\n  \"class\": \"signalSum\"\n};\nvar _hoisted_2 = /*#__PURE__*/_withScopeId(function () {\n  return /*#__PURE__*/_createElementVNode(\"div\", null, null, -1);\n});\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    \"class\": \"meter\",\n    style: _normalizeStyle(this.Meter)\n  }, [_createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"div\", {\n    ref: \"left\",\n    \"class\": \"signal\",\n    style: _normalizeStyle($options.computedWidthLeft)\n  }, null, 4), _hoisted_2, _createElementVNode(\"div\", {\n    ref: \"right\",\n    \"class\": \"signal\",\n    style: _normalizeStyle($options.computedWidthRight)\n  }, null, 4)])], 4);\n}","map":{"version":3,"mappings":";;;;;EAES,SAAM;AAAW;;sBAEpBA,oBAAW;AAAA;;uBAHfC,oBAMM;IAND,SAAM,OAAO;IAAEC,KAAK,uBAAOC,KAAK;MACnCH,oBAIM,OAJNI,UAIM,GAHJJ,oBAAgE;IAA3DK,GAAG,EAAC,MAAM;IAAC,SAAM,QAAQ;IAAEH,KAAK,kBAAEI,0BAAiB;eACxDC,UAAW,EACXP,oBAAkE;IAA7DK,GAAG,EAAC,OAAO;IAAC,SAAM,QAAQ;IAAEH,KAAK,kBAAEI,2BAAkB","names":["_createElementVNode","_createElementBlock","style","Meter","_hoisted_1","ref","$options","_hoisted_2"],"sourceRoot":"","sources":["C:\\Home\\Projects\\Programmazione\\WebStorm\\myZenythPolisinT\\zenyth_polisint\\src\\views\\Synth\\Tools\\Meter.vue"],"sourcesContent":["<template>\r\n  <div class=\"meter\" :style=\"this.Meter\">\r\n    <div class=\"signalSum\">\r\n      <div ref=\"left\" class=\"signal\" :style=\"computedWidthLeft\"></div>\r\n      <div></div>\r\n      <div ref=\"right\" class=\"signal\" :style=\"computedWidthRight\"></div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { Meter } from \"tone\";\r\nimport { dbToGain, gainToDb } from \"tone\";\r\nimport * as Tone from \"tone\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      widthLeft: 0,\r\n      widthRight: 0,\r\n    };\r\n  },\r\n  computed: {\r\n    computedWidthLeft() {\r\n      return { width: `${this.widthLeft}%` , background: this.colors.green.medium};\r\n    },\r\n    computedWidthRight() {\r\n      return { width: `${this.widthRight}%` , background: this.colors.green.medium};\r\n    },\r\n    Meter(){\r\n      return{\r\n        background: this.colors.green.glow,\r\n      }\r\n    },\r\n  },\r\n  mounted() {\r\n    this.meter = new Meter({channels: 2});\r\n    Tone.getDestination().connect(this.meter);\r\n    this.intervalId = setInterval(() => {\r\n      this.updateWidths();\r\n    }, 25);\r\n  },\r\n  \r\n  methods: {\r\n    updateWidths() {\r\n      //this.volume = this.meter.getValue();\r\n      [ this.leftVolume , this.rightVolume ] = this.meter.getValue();\r\n      if (!isFinite(this.leftVolume) && !isFinite(this.rightVolume)) return;\r\n      //console.log(this.meter.getValue()); \r\n      this.widthLeft = Math.min(dbToGain(this.leftVolume) * 100,100);\r\n      this.widthRight = Math.min(dbToGain(this.rightVolume) * 100,100);\r\n    },\r\n  },\r\n  beforeDestroy() {\r\n    this.meter.stop();\r\n    this.meter.dispose();\r\n    clearInterval(this.intervalId);\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.meter {\r\n  grid-row: 3;\r\n  border-radius: 0.2vw;\r\n  margin: 0vw 0.3vw 0.3vw;\r\n  display: flex;\r\n  border: 0.1vw solid #334030;\r\n}\r\n.signal {\r\n  height: 100%;\r\n  border-radius: 0.05vw;\r\n}\r\n.signalSum {\r\n  margin: 0.3vw;\r\n  display: grid;\r\n  grid-template-rows: 45% 10% 45%;\r\n  width: 100%;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}