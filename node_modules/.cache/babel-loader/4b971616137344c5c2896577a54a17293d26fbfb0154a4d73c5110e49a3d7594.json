{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, normalizeStyle as _normalizeStyle } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_VolEnvelope = _resolveComponent(\"VolEnvelope\");\n  var _component_Envelope = _resolveComponent(\"Envelope\");\n  var _component_Lfo = _resolveComponent(\"Lfo\");\n  var _component_ModSelector = _resolveComponent(\"ModSelector\");\n  return _openBlock(), _createElementBlock(\"div\", {\n    \"class\": \"modHost\",\n    style: _normalizeStyle($options.modHost)\n  }, [_createVNode(_component_VolEnvelope, {\n    ref: \"volEnvelope\"\n  }, null, 512 /* NEED_PATCH */), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.envList, function (modulator) {\n    return _openBlock(), _createBlock(_component_Envelope, {\n      key: modulator.id,\n      id: modulator.id,\n      ref_for: true,\n      ref: \"envelopes\",\n      onIsDraggableUpdate: $options.handleDraggableUpdate\n    }, null, 8 /* PROPS */, [\"id\", \"onIsDraggableUpdate\"]);\n  }), 128 /* KEYED_FRAGMENT */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.lfoList, function (modulator) {\n    return _openBlock(), _createBlock(_component_Lfo, {\n      key: modulator.id,\n      id: modulator.id,\n      ref_for: true,\n      ref: \"lfos\"\n    }, null, 8 /* PROPS */, [\"id\"]);\n  }), 128 /* KEYED_FRAGMENT */)), _createVNode(_component_ModSelector, {\n    onSelection: $options.changeSelection,\n    ref: \"modSelector\"\n  }, null, 8 /* PROPS */, [\"onSelection\"])], 4 /* STYLE */);\n}","map":{"version":3,"mappings":";;;;;;uBACEA,oBAuBM;IAvBD,SAAM,SAAS;IAAEC,KAAK,kBAAEC,gBAAO;MACjCC,aAAgCC;IAAnBC,GAAG,EAAC;EAAa,mDAC/BL,oBAQWM,6BAPWC,aAAO,YAApBC,SAAS;yBAGfC,aAG2CC;WALtCF,SAAS,CAACG,EAAE;MAGfA,EAAE,EAAEH,SAAS,CAACG,EAAE;;MACjBN,GAAG,EAAC,WAAW;MAChBO,mBAAiB,EAAEV;;qDAEtBF,oBAQWM,6BAPaC,aAAO,YAApBC,SAAS;yBAIjBC,aAEeI;WALRL,SAAS,CAACG,EAAE;MAIfA,EAAE,EAAEH,SAAS,CAACG,EAAE;;MACjBN,GAAG,EAAC;;kCAEVF,aAEqBW;IADlBC,WAAS,EAAEb,wBAAe;IAC3BG,GAAG,EAAC","names":["_createElementBlock","style","$options","_createVNode","_component_VolEnvelope","ref","_Fragment","$data","modulator","_createBlock","_component_Envelope","id","onIsDraggableUpdate","_component_Lfo","_component_ModSelector","onSelection"],"sourceRoot":"","sources":["C:\\Home\\Projects\\Programmazione\\WebStorm\\myZenythPolisinT\\zenyth_polisint\\src\\views\\Synth\\Modulators\\ModHost.vue"],"sourcesContent":["<template>\r\n  <div class=\"modHost\" :style=\"modHost\">\r\n     <VolEnvelope ref=\"volEnvelope\"/>\r\n    <template\r\n      v-for=\"modulator in envList\"\r\n      :key=\"modulator.id\">\r\n\r\n       <Envelope\r\n        :id=\"modulator.id\"\r\n        ref=\"envelopes\"\r\n      @isDraggableUpdate=\"handleDraggableUpdate\"/>\r\n    </template>\r\n    <template\r\n        v-for=\"modulator in lfoList\"\r\n        :key=\"modulator.id\">\r\n\r\n\r\n       <Lfo\r\n          :id=\"modulator.id\"\r\n          ref=\"lfos\"/>\r\n    </template>\r\n    <ModSelector\r\n      @selection=\"changeSelection\"\r\n      ref=\"modSelector\"/>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Envelope from \"./Envelope.vue\";\r\nimport Lfo from \"./Lfo.vue\";\r\nimport VolEnvelope from \"./VolEnvelope.vue\";\r\nimport ModSelector from \"./ModSelector.vue\";\r\nimport { toRaw } from 'vue';\r\n\r\nexport default {\r\n  components: {\r\n    VolEnvelope,\r\n    Envelope,\r\n    Lfo,\r\n    ModSelector,\r\n  },\r\n  data() {\r\n    return {\r\n      name: \"modHost\",\r\n      //number of total modulators\r\n\r\n      //visible modulator\r\n      selection: 'volEnvelope',\r\n      selectionType: null,\r\n\r\n      //list of modulators\r\n      envList: [],\r\n      lfoList: [],\r\n    };\r\n  },\r\n  created() {\r\n    //create arrays of modulators\r\n    for (let i = 1; i < this.nEnvelopes+1; i++) {\r\n      this.envList.push({ id: i, ref: i });\r\n    }\r\n    for (let i = 1; i < this.nLfo+1; i++) {\r\n      this.lfoList.push({ id: i, ref: i });\r\n    }\r\n    //console.log(toRaw(this.modulatorList));\r\n  },\r\n  mounted() {\r\n    //unhide main volume modulator\r\n    this.$refs.volEnvelope.unHide();\r\n    //console.log(this.$refs.volEnvelope)\r\n\r\n    //listens to link and unlink events\r\n    document.addEventListener(\"link\", this.handleLink)\r\n    document.addEventListener(\"unLink\", this.handleUnlink)\r\n  },\r\n  computed: {\r\n    modHost() {\r\n      return{\r\n        background: this.colors.gray.glow,\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    handleDraggableUpdate(isDraggable){\r\n      this.$refs.modSelector.isDraggableUpdate(isDraggable)\r\n    },\r\n    handleNewOsc(){\r\n      //initialize volEnvelope on all synth when a new oscillator is added\r\n      this.$refs.volEnvelope.handleNewOsc();\r\n    },\r\n    handleMouseUp(e){\r\n      if(this.selection==='volEnvelope'){\r\n        this.$refs.volEnvelope.handleMouseUp(e)\r\n      }else{\r\n        if(this.selectionType===\"envelope\"){\r\n          toRaw(toRaw(this.$refs.envelopes)[this.selection-1]).handleMouseUp(e);\r\n        }\r\n        if(this.selectionType===\"lfo\"){\r\n          toRaw(toRaw(this.$refs.lfos)[this.selection-1]).handleMouseUp(e);\r\n        }\r\n      }\r\n    },\r\n    handleMouseMove(e){\r\n      if(this.selection==='volEnvelope'){\r\n        this.$refs.volEnvelope.handleMouseMove(e)\r\n      }else{\r\n        if(this.selectionType===\"envelope\"){\r\n          toRaw(toRaw(this.$refs.envelopes)[this.selection-1]).handleMouseMove(e);\r\n        }\r\n        if(this.selectionType===\"lfo\"){\r\n          toRaw(toRaw(this.$refs.lfos)[this.selection-1]).handleMouseMove(e);\r\n        }\r\n      }\r\n    },\r\n    changeSelection(id, type) {\r\n      //console.log(\"selected \"+id)\r\n      //console.log(this.$refs)\r\n\r\n      //hide old modulator\r\n      if(this.selection==='volEnvelope'){\r\n        this.$refs.volEnvelope.hide()\r\n      }else{\r\n        if(this.selectionType===\"envelope\"){\r\n          toRaw(toRaw(this.$refs.envelopes)[this.selection-1]).hide();\r\n        }\r\n        if(this.selectionType===\"lfo\"){\r\n          toRaw(toRaw(this.$refs.lfos)[this.selection-1]).hide();\r\n          toRaw(toRaw(this.$refs.lfos)[this.selection-1]).stopOscilloscope();\r\n        }\r\n      }\r\n\r\n\r\n      //show new modulator\r\n      if(id==='volEnvelope'){\r\n        this.$refs.volEnvelope.unHide()\r\n      }else{\r\n        if(type===\"envelope\"){\r\n          toRaw(toRaw(this.$refs.envelopes)[id-1]).unHide();\r\n        }\r\n        if(type===\"lfo\"){\r\n          toRaw(toRaw(this.$refs.lfos)[id-1]).unHide();\r\n        }\r\n      }\r\n\r\n\r\n      this.selection = id;\r\n      this.selectionType = type;\r\n      \r\n    },\r\n\r\n    //handlers for drag and drop\r\n    handleLink(event){\r\n      //console.log(\"link\")\r\n      let data = event.detail\r\n      //console.log(data)\r\n      //console.log(this.synths)\r\n      this.$refs[data.modulator.type+\"s\"][data.modulator.id-1].link(data.object, data.target, data.color)\r\n    },\r\n    handleUnlink(event){\r\n      //console.log(\"unLink\")\r\n      let data = event.detail\r\n      this.$refs[data.modulator.type+\"s\"][data.modulator.id-1].unLink(data.object, data.target)\r\n\r\n    }\r\n\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.modHost {\r\n  grid-column: span 2; /* takes 2 spaces horizontally*/\r\n  position: relative;\r\n  display: grid;\r\n  grid-template-rows: 80% 20%;\r\n  grid-template-columns: 100%;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}