{"ast":null,"code":"import _slicedToArray from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { Meter } from \"tone\";\nimport { dbToGain, gainToDb } from \"tone\";\nimport * as Tone from \"tone\";\nexport default {\n  data: function data() {\n    return {\n      widthLeft: 0,\n      widthRight: 0\n    };\n  },\n  computed: {\n    computedWidthLeft: function computedWidthLeft() {\n      return {\n        width: \"\".concat(this.widthLeft, \"%\"),\n        background: this.colors.green.medium\n      };\n    },\n    computedWidthRight: function computedWidthRight() {\n      return {\n        width: \"\".concat(this.widthRight, \"%\"),\n        background: this.colors.green.medium\n      };\n    },\n    Meter: function Meter() {\n      return {\n        background: this.colors.green.glow\n      };\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n    this.meter = new Meter({\n      channels: 2\n    });\n    Tone.getDestination().connect(this.meter);\n    this.intervalId = setInterval(function () {\n      _this.updateWidths();\n    }, 25);\n  },\n  methods: {\n    updateWidths: function updateWidths() {\n      //this.volume = this.meter.getValue();\n      var _this$meter$getValue = this.meter.getValue();\n      var _this$meter$getValue2 = _slicedToArray(_this$meter$getValue, 2);\n      this.leftVolume = _this$meter$getValue2[0];\n      this.rightVolume = _this$meter$getValue2[1];\n      if (!isFinite(this.leftVolume) && !isFinite(this.rightVolume)) return;\n      //console.log(this.meter.getValue()); \n      this.widthLeft = Math.min(dbToGain(this.leftVolume) * 100, 100);\n      this.widthRight = Math.min(dbToGain(this.rightVolume) * 100, 100);\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.meter.stop();\n    this.meter.dispose();\n    clearInterval(this.intervalId);\n  }\n};","map":{"version":3,"mappings":";;AAWA,SAASA,KAAI,QAAS,MAAM;AAC5B,SAASC,QAAQ,EAAEC,QAAO,QAAS,MAAM;AACzC,OAAO,KAAKC,IAAG,MAAO,MAAM;AAE5B,eAAe;EACbC,IAAI,kBAAG;IACL,OAAO;MACLC,SAAS,EAAE,CAAC;MACZC,UAAU,EAAE;IACd,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,iBAAiB,+BAAG;MAClB,OAAO;QAAEC,KAAK,YAAK,IAAI,CAACJ,SAAS,MAAE;QAAIK,UAAU,EAAE,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC;MAAM,CAAC;IAC9E,CAAC;IACDC,kBAAkB,gCAAG;MACnB,OAAO;QAAEL,KAAK,YAAK,IAAI,CAACH,UAAU,MAAE;QAAII,UAAU,EAAE,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC;MAAM,CAAC;IAC/E,CAAC;IACDb,KAAK,mBAAE;MACL,OAAM;QACJU,UAAU,EAAE,IAAI,CAACC,MAAM,CAACC,KAAK,CAACG;MAChC;IACF;EACF,CAAC;EACDC,OAAO,qBAAG;IAAA;IACR,IAAI,CAACC,KAAI,GAAI,IAAIjB,KAAK,CAAC;MAACkB,QAAQ,EAAE;IAAC,CAAC,CAAC;IACrCf,IAAI,CAACgB,cAAc,EAAE,CAACC,OAAO,CAAC,IAAI,CAACH,KAAK,CAAC;IACzC,IAAI,CAACI,UAAS,GAAIC,WAAW,CAAC,YAAM;MAClC,KAAI,CAACC,YAAY,EAAE;IACrB,CAAC,EAAE,EAAE,CAAC;EACR,CAAC;EAEDC,OAAO,EAAE;IACPD,YAAY,0BAAG;MACb;MAAA,2BACyC,IAAI,CAACN,KAAK,CAACQ,QAAQ,EAAE;MAAA;MAA5D,IAAI,CAACC,UAAS;MAAI,IAAI,CAACC,WAAU;MACnC,IAAI,CAACC,QAAQ,CAAC,IAAI,CAACF,UAAU,KAAK,CAACE,QAAQ,CAAC,IAAI,CAACD,WAAW,CAAC,EAAE;MAC/D;MACA,IAAI,CAACtB,SAAQ,GAAIwB,IAAI,CAACC,GAAG,CAAC7B,QAAQ,CAAC,IAAI,CAACyB,UAAU,IAAI,GAAG,EAAC,GAAG,CAAC;MAC9D,IAAI,CAACpB,UAAS,GAAIuB,IAAI,CAACC,GAAG,CAAC7B,QAAQ,CAAC,IAAI,CAAC0B,WAAW,IAAI,GAAG,EAAC,GAAG,CAAC;IAClE;EACF,CAAC;EACDI,aAAa,2BAAG;IACd,IAAI,CAACd,KAAK,CAACe,IAAI,EAAE;IACjB,IAAI,CAACf,KAAK,CAACgB,OAAO,EAAE;IACpBC,aAAa,CAAC,IAAI,CAACb,UAAU,CAAC;EAChC;AACF,CAAC","names":["Meter","dbToGain","gainToDb","Tone","data","widthLeft","widthRight","computed","computedWidthLeft","width","background","colors","green","medium","computedWidthRight","glow","mounted","meter","channels","getDestination","connect","intervalId","setInterval","updateWidths","methods","getValue","leftVolume","rightVolume","isFinite","Math","min","beforeDestroy","stop","dispose","clearInterval"],"sourceRoot":"","sources":["/Users/eliapirrello/Documents/GitHub/zenyth/src/views/Synth/Tools/Meter.vue"],"sourcesContent":["<template>\n  <div class=\"meter\" :style=\"this.Meter\">\n    <div class=\"signalSum\">\n      <div ref=\"left\" class=\"signal\" :style=\"computedWidthLeft\"></div>\n      <div></div>\n      <div ref=\"right\" class=\"signal\" :style=\"computedWidthRight\"></div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { Meter } from \"tone\";\nimport { dbToGain, gainToDb } from \"tone\";\nimport * as Tone from \"tone\";\n\nexport default {\n  data() {\n    return {\n      widthLeft: 0,\n      widthRight: 0,\n    };\n  },\n  computed: {\n    computedWidthLeft() {\n      return { width: `${this.widthLeft}%` , background: this.colors.green.medium};\n    },\n    computedWidthRight() {\n      return { width: `${this.widthRight}%` , background: this.colors.green.medium};\n    },\n    Meter(){\n      return{\n        background: this.colors.green.glow,\n      }\n    },\n  },\n  mounted() {\n    this.meter = new Meter({channels: 2});\n    Tone.getDestination().connect(this.meter);\n    this.intervalId = setInterval(() => {\n      this.updateWidths();\n    }, 25);\n  },\n  \n  methods: {\n    updateWidths() {\n      //this.volume = this.meter.getValue();\n      [ this.leftVolume , this.rightVolume ] = this.meter.getValue();\n      if (!isFinite(this.leftVolume) && !isFinite(this.rightVolume)) return;\n      //console.log(this.meter.getValue()); \n      this.widthLeft = Math.min(dbToGain(this.leftVolume) * 100,100);\n      this.widthRight = Math.min(dbToGain(this.rightVolume) * 100,100);\n    },\n  },\n  beforeDestroy() {\n    this.meter.stop();\n    this.meter.dispose();\n    clearInterval(this.intervalId);\n  },\n};\n</script>\n\n<style scoped>\n.meter {\n  grid-row: 3;\n  border-radius: 0.2vw;\n  margin: 0vw 0.3vw 0.3vw;\n  display: flex;\n  border: 0.1vw solid #334030;\n}\n.signal {\n  height: 100%;\n  border-radius: 0.05vw;\n}\n.signalSum {\n  margin: 0.3vw;\n  display: grid;\n  grid-template-rows: 45% 10% 45%;\n  width: 100%;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}