{"ast":null,"code":"import _classCallCheck from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n/**\n * AudioToGain converts an input in AudioRange [-1,1] to NormalRange [0,1].\n * See [[GainToAudio]].\n * @category Signal\n */\nexport var AudioToGain = /*#__PURE__*/function (_SignalOperator) {\n  _inherits(AudioToGain, _SignalOperator);\n  var _super = _createSuper(AudioToGain);\n  function AudioToGain() {\n    var _this;\n    _classCallCheck(this, AudioToGain);\n    _this = _super.apply(this, arguments);\n    _this.name = \"AudioToGain\";\n    /**\n     * The node which converts the audio ranges\n     */\n    _this._norm = new WaveShaper({\n      context: _this.context,\n      mapping: function mapping(x) {\n        return (x + 1) / 2;\n      }\n    });\n    /**\n     * The AudioRange input [-1, 1]\n     */\n    _this.input = _this._norm;\n    /**\n     * The GainRange output [0, 1]\n     */\n    _this.output = _this._norm;\n    return _this;\n  }\n  /**\n   * clean up\n   */\n  _createClass(AudioToGain, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(AudioToGain.prototype), \"dispose\", this).call(this);\n      this._norm.dispose();\n      return this;\n    }\n  }]);\n  return AudioToGain;\n}(SignalOperator);","map":{"version":3,"mappings":";;;;;;;AACA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,SAASC,UAAU,QAAQ,cAAc;AAEzC;;;;;AAKA,WAAaC,WAAY;EAAA;EAAA;EAAzB;IAAA;IAAA;;IAEU,UAAI,GAAW,aAAa;IAErC;;;IAGQ,WAAK,GAAG,IAAID,UAAU,CAAC;MAC9BE,OAAO,EAAE,MAAKA,OAAO;MACrBC,OAAO,EAAE,kBAAC;QAAA,OAAI,CAACC,CAAC,GAAG,CAAC,IAAI,CAAC;MAAA;KACzB,CAAC;IAEF;;;IAGA,WAAK,GAAG,MAAKC,KAAK;IAElB;;;IAGA,YAAM,GAAG,MAAKA,KAAK;IAAC;EAUrB;EARC;;;EAAA;IAAA;IAAA,OAGA,mBAAO;MACN;MACA,IAAI,CAACA,KAAK,CAACC,OAAO,EAAE;MACpB,OAAO,IAAI;IACZ;EAAC;EAAA;AAAA,EA7B+BP,cAAoC","names":["SignalOperator","WaveShaper","AudioToGain","context","mapping","x","_norm","dispose"],"sourceRoot":"","sources":["../../../Tone/signal/AudioToGain.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}