{"ast":null,"code":"import { createElementVNode as _createElementVNode, normalizeStyle as _normalizeStyle, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nimport _imports_0 from '@/icons/ADSR.svg';\nimport _imports_1 from '@/icons/LFO.svg';\nconst _withScopeId = n => (_pushScopeId(\"data-v-c6c60e7a\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"img\", {\n  src: _imports_0,\n  alt: \"\",\n  draggable: \"false\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_2 = [_hoisted_1];\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"img\", {\n  src: _imports_0,\n  alt: \"\",\n  draggable: \"false\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_5 = [_hoisted_4];\nconst _hoisted_6 = [\"draggable\", \"onDragstart\"];\nconst _hoisted_7 = [\"onClick\"];\nconst _hoisted_8 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"img\", {\n  src: _imports_1,\n  alt: \"\",\n  draggable: \"false\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_9 = [\"draggable\", \"onDragstart\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: \"buttonList\",\n    style: _normalizeStyle(this.buttonList)\n  }, [_createElementVNode(\"div\", {\n    class: \"identifierVol\",\n    style: _normalizeStyle($options.buttonColor('mainEnv')),\n    onClick: _cache[0] || (_cache[0] = $event => $options.handleClick(null, 'volEnvelope'))\n  }, _hoisted_2, 4 /* STYLE */), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.buttonListEnv, button => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: button.id,\n      class: \"button\",\n      style: _normalizeStyle($options.buttonColor('envelope'))\n    }, [_createElementVNode(\"div\", {\n      style: _normalizeStyle($options.textId)\n    }, _toDisplayString(button.id), 5 /* TEXT, STYLE */), _createElementVNode(\"div\", {\n      class: \"identifier\",\n      onClick: $event => $options.handleClick(button.id, button.type)\n    }, _hoisted_5, 8 /* PROPS */, _hoisted_3), _createElementVNode(\"div\", {\n      class: \"draggableArea\",\n      draggable: $options.draggability('envelope', button.id),\n      onDragstart: $event => $options.startDrag($event, button.id, button.type)\n    }, \"ϟ \", 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_6)], 4 /* STYLE */);\n  }), 128 /* KEYED_FRAGMENT */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.buttonListLfo, button => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: button.id,\n      class: \"button\",\n      style: _normalizeStyle($options.buttonColor('lfo'))\n    }, [_createElementVNode(\"div\", {\n      style: _normalizeStyle($options.textId)\n    }, _toDisplayString(button.id), 5 /* TEXT, STYLE */), _createElementVNode(\"div\", {\n      class: \"identifier\",\n      onClick: $event => $options.handleClick(button.id, button.type)\n    }, [_createCommentVNode(\" {{ button.id }} \"), _hoisted_8], 8 /* PROPS */, _hoisted_7), _createElementVNode(\"div\", {\n      class: \"draggableArea\",\n      draggable: $options.draggability('lfo', button.id),\n      onDragstart: $event => $options.startDrag($event, button.id, button.type)\n    }, \"ϟ \", 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_9)], 4 /* STYLE */);\n  }), 128 /* KEYED_FRAGMENT */))], 4 /* STYLE */);\n}","map":{"version":3,"mappings":";OAGWA,UAAsB;OAmBlBC,UAAqB;;gEAnB9BC,oBAAqD;EAAhDC,GAAsB,EAAtBH,UAAsB;EAACI,GAAG,EAAC,EAAE;EAACC,SAAS,EAAC;;oBAA7CC,UAAqD;;gEAOjDJ,oBAAqD;EAAhDC,GAAsB,EAP1BH,UAAsB;EAOKI,GAAG,EAAC,EAAE;EAACC,SAAS,EAAC;;oBAA7CE,UAAqD;;;gEAYrDL,oBAAoD;EAA/CC,GAAqB,EAArBF,UAAqB;EAACG,GAAG,EAAC,EAAE;EAACC,SAAS,EAAC;;;;uBArBpDG,oBA4BM;IA5BDC,KAAK,EAAC,YAAY;IAAEC,KAAK,uBAAOC,UAAU;MAC7CT,oBAEM;IAFDO,KAAK,EAAC,eAAe;IAAEC,KAAK,kBAAEE,oBAAW;IAAcC,OAAK,sCAAED,oBAAW;oDAG9EJ,oBAWWM,6BAXgBC,mBAAa,EAAvBC,MAAM;yBACrBR,oBASM;WAVwCQ,MAAM,CAACC,EAAE;MAClDR,KAAK,EAAC,QAAQ;MAAEC,KAAK,kBAAEE,oBAAW;QACrCV,oBAA4C;MAAtCQ,KAAK,kBAAEE,eAAM;wBAAMI,MAAM,CAACC,EAAE,yBAClCf,oBAGM;MAHDO,KAAK,EAAC,YAAY;MAAEI,OAAK,YAAED,oBAAW,CAACI,MAAM,CAACC,EAAE,EAAED,MAAM,CAACE,IAAI;+CAIlEhB,oBAEM;MAFDO,KAAK,EAAC,eAAe;MAAEJ,SAAS,EAAEO,qBAAY,aAAaI,MAAM,CAACC,EAAE;MACtEE,WAAS,YAAEP,kBAAS,CAACQ,MAAM,EAAEJ,MAAM,CAACC,EAAE,EAAED,MAAM,CAACE,IAAI;OAAG,IACzD;qDAGJV,oBAWWM,6BAXgBC,mBAAa,EAAvBC,MAAM;yBACrBR,oBASM;WAVwCQ,MAAM,CAACC,EAAE;MAClDR,KAAK,EAAC,QAAQ;MAAEC,KAAK,kBAAEE,oBAAW;QACrCV,oBAA4C;MAAtCQ,KAAK,kBAAEE,eAAM;wBAAMI,MAAM,CAACC,EAAE,yBAClCf,oBAGM;MAHDO,KAAK,EAAC,YAAY;MAAEI,OAAK,YAAED,oBAAW,CAACI,MAAM,CAACC,EAAE,EAAED,MAAM,CAACE,IAAI;QAAGG,wCAAwB,EAE3FC,UAAoD,+BAEtDpB,oBAEM;MAFDO,KAAK,EAAC,eAAe;MAAEJ,SAAS,EAAEO,qBAAY,QAAQI,MAAM,CAACC,EAAE;MACjEE,WAAS,YAAEP,kBAAS,CAACQ,MAAM,EAAEJ,MAAM,CAACC,EAAE,EAAED,MAAM,CAACE,IAAI;OAAG,IACzD","names":["_imports_0","_imports_1","_createElementVNode","src","alt","draggable","_hoisted_1","_hoisted_4","_createElementBlock","class","style","buttonList","$options","onClick","_Fragment","$data","button","id","type","onDragstart","$event","_createCommentVNode","_hoisted_8"],"sourceRoot":"","sources":["/Users/guglielmofratticioli/Documents/POLIMI/FurioColombo.github.io/src/views/Synth/Modulators/ModSelector.vue"],"sourcesContent":["<template>\n  <div class=\"buttonList\" :style=\"this.buttonList\">\n    <div class=\"identifierVol\" :style=\"buttonColor('mainEnv')\" @click=\"handleClick(null, 'volEnvelope')\">\n      <img src=\"@/icons/ADSR.svg\" alt=\"\" draggable=\"false\">\n    </div>\n    <template v-for=\"button in buttonListEnv\" :key=\"button.id\" :ref=\"button.ref\">\n      <div class=\"button\" :style=\"buttonColor('envelope')\">\n        <div :style=\"textId\"> {{ button.id }} </div>\n        <div class=\"identifier\" @click=\"handleClick(button.id, button.type)\">\n\n          <img src=\"@/icons/ADSR.svg\" alt=\"\" draggable=\"false\">\n        </div>\n        <div class=\"draggableArea\" :draggable=\"draggability('envelope', button.id)\"\n          @dragstart=\"startDrag($event, button.id, button.type)\">ϟ\n        </div>\n      </div>\n    </template>\n    <template v-for=\"button in buttonListLfo\" :key=\"button.id\" :ref=\"button.ref\">\n      <div class=\"button\" :style=\"buttonColor('lfo')\">\n        <div :style=\"textId\"> {{ button.id }} </div>\n        <div class=\"identifier\" @click=\"handleClick(button.id, button.type)\"><!-- {{ button.id }} -->\n\n          <img src=\"@/icons/LFO.svg\" alt=\"\" draggable=\"false\">\n        </div>\n        <div class=\"draggableArea\" :draggable=\"draggability('lfo', button.id)\"\n          @dragstart=\"startDrag($event, button.id, button.type)\">ϟ\n        </div>\n      </div>\n    </template>\n  </div>\n\n</template>\n\n<script>\nimport * as Tone from \"tone\";\nimport { watch } from 'vue';\n\nexport default {\n  inject: ['dropFeedback'],\n  props: [],\n  data() {\n    return {\n      color: {\n        mainEnv: this.colors.pink.glow,\n        envelope: this.colors.azure.glow,\n        lfo: this.colors.purple.glow,\n      },\n      type: \"volEnvelope\",\n\n      isDraggable: this.isDraggable,\n      buttonListEnv: [],\n      buttonListLfo: [],\n    };\n  },\n  mounted() {\n    for (let i = 1; i < this.nEnvelopes + 1; i++) {\n      this.buttonListEnv.push({ id: i, ref: \"button\" + i, type: \"envelope\" });\n    }\n    for (let i = 1; i < this.nLfo + 1; i++) {\n      this.buttonListLfo.push({ id: i, ref: \"button\" + i, type: \"lfo\" });\n    }\n    //console.log(this.isDraggable)\n\n\n    //console.log(this.buttonListEnv)\n    //console.log(this.buttonListLfo)\n\n    /*\n    this.$on(\"unLink\", (data) => {\n          console.log(\"ModSelector disconnecting link from \"+data.modulator.type+\" \"+data.modulator.id+\" to \"+data.section+data.target)})\n\n     */\n\n  },\n  computed: {\n    textId(){\n      return {\n        fontWeight: \"bold\",\n        opacity: \"80%\",\n        position: 'absolute',\n        fontSize:'.8vw'\n      }\n    },\n    buttonList() {\n      switch (this.type) {\n        case \"volEnvelope\":\n          return{\n            backgroundColor: this.colors.pink.medium\n          }\n          case \"envelope\":\n          return{\n            backgroundColor: this.colors.azure.medium\n          }\n          case \"lfo\":\n          return{\n            backgroundColor: this.colors.purple.glow\n          }\n      }\n      \n    } \n\n  },\n  methods: {\n    draggability(type, id) {\n      //console.log(this.isDraggable)\n      //console.log(\"checking draggability of \" + type + \" \" + id)\n      return this.isDraggable[type][id]\n    },\n    isDraggableUpdate(isDraggable) {\n      //console.log(\"UPDATE ISDRAGGABLE\")\n      //console.log(this.isDraggable)\n      this.isDraggable = isDraggable\n    },\n    buttonColor(type) {\n      return {\n        backgroundColor: this.color[type]\n      }\n    },\n\n    startDrag(event, id, type) {\n      //console.log(\"dragging \" + type + \" \" + id)\n      event.dataTransfer.dropEffect = \"move\"\n      event.dataTransfer.effectAllowed = \"move\"\n      let data = { type: type, id: id, color: this.color[type] }\n      event.dataTransfer.setData(\"data\", JSON.stringify(data));\n      //console.log(data)\n    },\n    handleClick(id, type) {\n      this.type = type\n      if (type === \"volEnvelope\") {\n        //console.log(\"Selected \" + id)\n        this.$emit(\"selection\", type, null);\n      } else {\n        //console.log(\"Selected \" + type + \" \" + id)\n        this.$emit(\"selection\", id, type);\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.button {\n  display: grid;\n  grid-template-columns: 80% 18%;\n  flex: 1;\n  width: 100%;\n  height: 100%;\n  border: 0.06vw solid black; \n  border-radius: 0.2vw;\n  padding: 1%;\n  justify-content: center;\n  align-items: center;\n  box-sizing: border-box;\n  align-content: center;\n  justify-items: stretch;\n\n}\n\n.buttonList {\n  padding-left: 0.3vw;\n  padding-right:  0.3vw;\n  padding-bottom: 0.3vw;\n  position: relative;\n  grid-row: 2;\n  display: flex;\n  flex-basis: column;\n  align-items: center;\n  justify-content: center;\n}\n\n.identifier {\n  height: 100%;\n  justify-content: center;\n  align-items: center;\n  /* border: 0.1vw solid black; */\n  display: flex;\n\n}\n\n.identifierVol {\n  border: 0.06vw solid black; \n  border-radius: 0.2vw;\n  flex: 1;\n  box-sizing: border-box;\n  display: flex;\n  height: 100%;\n  justify-content: center;\n  align-items: center;\n}\n\n.draggableArea {\n  border-radius: 50%;\n  display: flex;\n  border: 0.1vw solid black;\n  box-sizing: border-box;\n  position: relative;\n  width: 100%;\n  aspect-ratio: 1/1;\n  font-size: .9vw;\n  align-items: flex-end;\n  justify-content: center;\n}.draggableArea:hover {\n  opacity: 40%;\n}\n.identifier img {\n  position: relative;\n  opacity: 60%;\n  width: 4vw;\n  aspect-ratio: 1/1;\n}\n.identifierVol img {\n  position: relative;\n  opacity: 60%;\n  width: 4vw;\n  aspect-ratio: 1/1;\n}\n.identifier img:hover {\n  opacity: 40%;\n}\n.identifierVol img:hover {\n  opacity: 40%;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}