{"ast":null,"code":"import _regeneratorRuntime from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport { __awaiter } from \"tslib\";\nimport { BaseContext } from \"./BaseContext\";\nexport var DummyContext = /*#__PURE__*/function (_BaseContext) {\n  _inherits(DummyContext, _BaseContext);\n  var _super = _createSuper(DummyContext);\n  function DummyContext() {\n    var _this;\n    _classCallCheck(this, DummyContext);\n    _this = _super.apply(this, arguments);\n    _this.lookAhead = 0;\n    _this.latencyHint = 0;\n    _this.isOffline = false;\n    return _this;\n  }\n  //---------------------------\n  // BASE AUDIO CONTEXT METHODS\n  //---------------------------\n  _createClass(DummyContext, [{\n    key: \"createAnalyser\",\n    value: function createAnalyser() {\n      return {};\n    }\n  }, {\n    key: \"createOscillator\",\n    value: function createOscillator() {\n      return {};\n    }\n  }, {\n    key: \"createBufferSource\",\n    value: function createBufferSource() {\n      return {};\n    }\n  }, {\n    key: \"createBiquadFilter\",\n    value: function createBiquadFilter() {\n      return {};\n    }\n  }, {\n    key: \"createBuffer\",\n    value: function createBuffer(_numberOfChannels, _length, _sampleRate) {\n      return {};\n    }\n  }, {\n    key: \"createChannelMerger\",\n    value: function createChannelMerger(_numberOfInputs) {\n      return {};\n    }\n  }, {\n    key: \"createChannelSplitter\",\n    value: function createChannelSplitter(_numberOfOutputs) {\n      return {};\n    }\n  }, {\n    key: \"createConstantSource\",\n    value: function createConstantSource() {\n      return {};\n    }\n  }, {\n    key: \"createConvolver\",\n    value: function createConvolver() {\n      return {};\n    }\n  }, {\n    key: \"createDelay\",\n    value: function createDelay(_maxDelayTime) {\n      return {};\n    }\n  }, {\n    key: \"createDynamicsCompressor\",\n    value: function createDynamicsCompressor() {\n      return {};\n    }\n  }, {\n    key: \"createGain\",\n    value: function createGain() {\n      return {};\n    }\n  }, {\n    key: \"createIIRFilter\",\n    value: function createIIRFilter(_feedForward, _feedback) {\n      return {};\n    }\n  }, {\n    key: \"createPanner\",\n    value: function createPanner() {\n      return {};\n    }\n  }, {\n    key: \"createPeriodicWave\",\n    value: function createPeriodicWave(_real, _imag, _constraints) {\n      return {};\n    }\n  }, {\n    key: \"createStereoPanner\",\n    value: function createStereoPanner() {\n      return {};\n    }\n  }, {\n    key: \"createWaveShaper\",\n    value: function createWaveShaper() {\n      return {};\n    }\n  }, {\n    key: \"createMediaStreamSource\",\n    value: function createMediaStreamSource(_stream) {\n      return {};\n    }\n  }, {\n    key: \"createMediaElementSource\",\n    value: function createMediaElementSource(_element) {\n      return {};\n    }\n  }, {\n    key: \"createMediaStreamDestination\",\n    value: function createMediaStreamDestination() {\n      return {};\n    }\n  }, {\n    key: \"decodeAudioData\",\n    value: function decodeAudioData(_audioData) {\n      return Promise.resolve({});\n    }\n    //---------------------------\n    // TONE AUDIO CONTEXT METHODS\n    //---------------------------\n  }, {\n    key: \"createAudioWorkletNode\",\n    value: function createAudioWorkletNode(_name, _options) {\n      return {};\n    }\n  }, {\n    key: \"rawContext\",\n    get: function get() {\n      return {};\n    }\n  }, {\n    key: \"addAudioWorkletModule\",\n    value: function addAudioWorkletModule(_url, _name) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", Promise.resolve());\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n    }\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      return Promise.resolve();\n    }\n  }, {\n    key: \"setTimeout\",\n    value: function setTimeout(_fn, _timeout) {\n      return 0;\n    }\n  }, {\n    key: \"clearTimeout\",\n    value: function clearTimeout(_id) {\n      return this;\n    }\n  }, {\n    key: \"setInterval\",\n    value: function setInterval(_fn, _interval) {\n      return 0;\n    }\n  }, {\n    key: \"clearInterval\",\n    value: function clearInterval(_id) {\n      return this;\n    }\n  }, {\n    key: \"getConstant\",\n    value: function getConstant(_val) {\n      return {};\n    }\n  }, {\n    key: \"currentTime\",\n    get: function get() {\n      return 0;\n    }\n  }, {\n    key: \"state\",\n    get: function get() {\n      return {};\n    }\n  }, {\n    key: \"sampleRate\",\n    get: function get() {\n      return 0;\n    }\n  }, {\n    key: \"listener\",\n    get: function get() {\n      return {};\n    }\n  }, {\n    key: \"transport\",\n    get: function get() {\n      return {};\n    }\n  }, {\n    key: \"draw\",\n    get: function get() {\n      return {};\n    },\n    set: function set(_d) {}\n  }, {\n    key: \"destination\",\n    get: function get() {\n      return {};\n    },\n    set: function set(_d) {}\n  }, {\n    key: \"now\",\n    value: function now() {\n      return 0;\n    }\n  }, {\n    key: \"immediate\",\n    value: function immediate() {\n      return 0;\n    }\n  }]);\n  return DummyContext;\n}(BaseContext);","map":{"version":3,"mappings":"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","names":["BaseContext","DummyContext","_numberOfChannels","_length","_sampleRate","_numberOfInputs","_numberOfOutputs","_maxDelayTime","_feedForward","_feedback","_real","_imag","_constraints","_stream","_element","_audioData","Promise","resolve","_name","_options","_url","_fn","_timeout","_id","_interval","_val","_d"],"sourceRoot":"","sources":["../../../../Tone/core/context/DummyContext.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}