{"ast":null,"code":"import { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n/**\n * Volume is a simple volume node, useful for creating a volume fader.\n *\n * @example\n * const vol = new Tone.Volume(-12).toDestination();\n * const osc = new Tone.Oscillator().connect(vol).start();\n * @category Component\n */\nexport class Volume extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]));\n    this.name = \"Volume\";\n    const options = optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]);\n    this.input = this.output = new Gain({\n      context: this.context,\n      gain: options.volume,\n      units: \"decibels\"\n    });\n    this.volume = this.output.gain;\n    readOnly(this, \"volume\");\n    this._unmutedVolume = options.volume;\n    // set the mute initially\n    this.mute = options.mute;\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      mute: false,\n      volume: 0\n    });\n  }\n  /**\n   * Mute the output.\n   * @example\n   * const vol = new Tone.Volume(-12).toDestination();\n   * const osc = new Tone.Oscillator().connect(vol).start();\n   * // mute the output\n   * vol.mute = true;\n   */\n  get mute() {\n    return this.volume.value === -Infinity;\n  }\n  set mute(mute) {\n    if (!this.mute && mute) {\n      this._unmutedVolume = this.volume.value;\n      // maybe it should ramp here?\n      this.volume.value = -Infinity;\n    } else if (this.mute && !mute) {\n      this.volume.value = this._unmutedVolume;\n    }\n  }\n  /**\n   * clean up\n   */\n  dispose() {\n    super.dispose();\n    this.input.dispose();\n    this.volume.dispose();\n    return this;\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,IAAI,QAAQ,yBAAyB;AAE9C,SAASC,aAAa,QAA8B,kCAAkC;AAEtF,SAASC,oBAAoB,QAAQ,0BAA0B;AAC/D,SAASC,QAAQ,QAAQ,2BAA2B;AAOpD;;;;;;;;AAQA,OAAM,MAAOC,MAAO,SAAQH,aAA4B;EAiCvDI;IAEC,KAAK,CAACH,oBAAoB,CAACE,MAAM,CAACE,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;IAjChE,SAAI,GAAW,QAAQ;IAkC/B,MAAMC,OAAO,GAAGN,oBAAoB,CAACE,MAAM,CAACE,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,QAAQ,CAAC,CAAC;IAEjF,IAAI,CAACE,KAAK,GAAG,IAAI,CAACC,MAAM,GAAG,IAAIV,IAAI,CAAC;MACnCW,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBC,IAAI,EAAEJ,OAAO,CAACK,MAAM;MACpBC,KAAK,EAAE;KACP,CAAC;IACF,IAAI,CAACD,MAAM,GAAG,IAAI,CAACH,MAAM,CAACE,IAAI;IAC9BT,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC;IACxB,IAAI,CAACY,cAAc,GAAGP,OAAO,CAACK,MAAM;IAEpC;IACA,IAAI,CAACG,IAAI,GAAGR,OAAO,CAACQ,IAAI;EACzB;EAEA,OAAOV,WAAW;IACjB,OAAOW,MAAM,CAACC,MAAM,CAACjB,aAAa,CAACK,WAAW,EAAE,EAAE;MACjDU,IAAI,EAAE,KAAK;MACXH,MAAM,EAAE;KACR,CAAC;EACH;EAEA;;;;;;;;EAQA,IAAIG,IAAI;IACP,OAAO,IAAI,CAACH,MAAM,CAACM,KAAK,KAAK,CAACC,QAAQ;EACvC;EACA,IAAIJ,IAAI,CAACA,IAAa;IACrB,IAAI,CAAC,IAAI,CAACA,IAAI,IAAIA,IAAI,EAAE;MACvB,IAAI,CAACD,cAAc,GAAG,IAAI,CAACF,MAAM,CAACM,KAAK;MACvC;MACA,IAAI,CAACN,MAAM,CAACM,KAAK,GAAG,CAACC,QAAQ;KAC7B,MAAM,IAAI,IAAI,CAACJ,IAAI,IAAI,CAACA,IAAI,EAAE;MAC9B,IAAI,CAACH,MAAM,CAACM,KAAK,GAAG,IAAI,CAACJ,cAAc;;EAEzC;EAEA;;;EAGAM,OAAO;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACZ,KAAK,CAACY,OAAO,EAAE;IACpB,IAAI,CAACR,MAAM,CAACQ,OAAO,EAAE;IACrB,OAAO,IAAI;EACZ","names":["Gain","ToneAudioNode","optionsFromArguments","readOnly","Volume","constructor","getDefaults","arguments","options","input","output","context","gain","volume","units","_unmutedVolume","mute","Object","assign","value","Infinity","dispose"],"sourceRoot":"","sources":["../../../../Tone/component/channel/Volume.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}