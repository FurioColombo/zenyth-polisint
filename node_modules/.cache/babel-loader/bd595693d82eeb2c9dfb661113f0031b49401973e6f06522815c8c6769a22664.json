{"ast":null,"code":"import _defineProperty from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _typeof from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nimport _createForOfIteratorHelper from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.define-properties.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.function.bind.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.array-buffer.slice.js\";\nimport \"core-js/modules/es.typed-array.float32-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.find-last.js\";\nimport \"core-js/modules/es.typed-array.find-last-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/esnext.typed-array.to-reversed.js\";\nimport \"core-js/modules/esnext.typed-array.to-sorted.js\";\nimport \"core-js/modules/esnext.typed-array.with.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.every.js\";\nimport { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { computeBufferSize } from '../helpers/compute-buffer-size';\nimport { copyFromChannel } from '../helpers/copy-from-channel';\nimport { copyToChannel } from '../helpers/copy-to-channel';\nimport { createAudioWorkletProcessor } from '../helpers/create-audio-worklet-processor';\nimport { createNestedArrays } from '../helpers/create-nested-arrays';\nimport { ReadOnlyMap } from '../read-only-map';\nexport var createNativeAudioWorkletNodeFakerFactory = function createNativeAudioWorkletNodeFakerFactory(connectMultipleOutputs, createIndexSizeError, createInvalidStateError, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, createNativeScriptProcessorNode, createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getActiveAudioWorkletNodeInputs, monitorConnections) {\n  return function (nativeContext, baseLatency, processorConstructor, options) {\n    if (options.numberOfInputs === 0 && options.numberOfOutputs === 0) {\n      throw createNotSupportedError();\n    }\n    var outputChannelCount = Array.isArray(options.outputChannelCount) ? options.outputChannelCount : Array.from(options.outputChannelCount);\n    // @todo Check if any of the channelCount values is greater than the implementation's maximum number of channels.\n    if (outputChannelCount.some(function (channelCount) {\n      return channelCount < 1;\n    })) {\n      throw createNotSupportedError();\n    }\n    if (outputChannelCount.length !== options.numberOfOutputs) {\n      throw createIndexSizeError();\n    }\n    // Bug #61: This is not part of the standard but required for the faker to work.\n    if (options.channelCountMode !== 'explicit') {\n      throw createNotSupportedError();\n    }\n    var numberOfInputChannels = options.channelCount * options.numberOfInputs;\n    var numberOfOutputChannels = outputChannelCount.reduce(function (sum, value) {\n      return sum + value;\n    }, 0);\n    var numberOfParameters = processorConstructor.parameterDescriptors === undefined ? 0 : processorConstructor.parameterDescriptors.length;\n    // Bug #61: This is not part of the standard but required for the faker to work.\n    if (numberOfInputChannels + numberOfParameters > 6 || numberOfOutputChannels > 6) {\n      throw createNotSupportedError();\n    }\n    var messageChannel = new MessageChannel();\n    var gainNodes = [];\n    var inputChannelSplitterNodes = [];\n    for (var i = 0; i < options.numberOfInputs; i += 1) {\n      gainNodes.push(createNativeGainNode(nativeContext, {\n        channelCount: options.channelCount,\n        channelCountMode: options.channelCountMode,\n        channelInterpretation: options.channelInterpretation,\n        gain: 1\n      }));\n      inputChannelSplitterNodes.push(createNativeChannelSplitterNode(nativeContext, {\n        channelCount: options.channelCount,\n        channelCountMode: 'explicit',\n        channelInterpretation: 'discrete',\n        numberOfOutputs: options.channelCount\n      }));\n    }\n    var constantSourceNodes = [];\n    if (processorConstructor.parameterDescriptors !== undefined) {\n      var _iterator = _createForOfIteratorHelper(processorConstructor.parameterDescriptors),\n        _step;\n      try {\n        var _loop = function _loop() {\n          var _step$value = _step.value,\n            defaultValue = _step$value.defaultValue,\n            maxValue = _step$value.maxValue,\n            minValue = _step$value.minValue,\n            name = _step$value.name;\n          var constantSourceNode = createNativeConstantSourceNode(nativeContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            offset: options.parameterData[name] !== undefined ? options.parameterData[name] : defaultValue === undefined ? 0 : defaultValue\n          });\n          Object.defineProperties(constantSourceNode.offset, {\n            defaultValue: {\n              get: function get() {\n                return defaultValue === undefined ? 0 : defaultValue;\n              }\n            },\n            maxValue: {\n              get: function get() {\n                return maxValue === undefined ? MOST_POSITIVE_SINGLE_FLOAT : maxValue;\n              }\n            },\n            minValue: {\n              get: function get() {\n                return minValue === undefined ? MOST_NEGATIVE_SINGLE_FLOAT : minValue;\n              }\n            }\n          });\n          constantSourceNodes.push(constantSourceNode);\n        };\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    var inputChannelMergerNode = createNativeChannelMergerNode(nativeContext, {\n      channelCount: 1,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'speakers',\n      numberOfInputs: Math.max(1, numberOfInputChannels + numberOfParameters)\n    });\n    var bufferSize = computeBufferSize(baseLatency, nativeContext.sampleRate);\n    var scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, numberOfInputChannels + numberOfParameters,\n    // Bug #87: Only Firefox will fire an AudioProcessingEvent if there is no connected output.\n    Math.max(1, numberOfOutputChannels));\n    var outputChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, {\n      channelCount: Math.max(1, numberOfOutputChannels),\n      channelCountMode: 'explicit',\n      channelInterpretation: 'discrete',\n      numberOfOutputs: Math.max(1, numberOfOutputChannels)\n    });\n    var outputChannelMergerNodes = [];\n    for (var _i = 0; _i < options.numberOfOutputs; _i += 1) {\n      outputChannelMergerNodes.push(createNativeChannelMergerNode(nativeContext, {\n        channelCount: 1,\n        channelCountMode: 'explicit',\n        channelInterpretation: 'speakers',\n        numberOfInputs: outputChannelCount[_i]\n      }));\n    }\n    for (var _i2 = 0; _i2 < options.numberOfInputs; _i2 += 1) {\n      gainNodes[_i2].connect(inputChannelSplitterNodes[_i2]);\n      for (var j = 0; j < options.channelCount; j += 1) {\n        inputChannelSplitterNodes[_i2].connect(inputChannelMergerNode, j, _i2 * options.channelCount + j);\n      }\n    }\n    var parameterMap = new ReadOnlyMap(processorConstructor.parameterDescriptors === undefined ? [] : processorConstructor.parameterDescriptors.map(function (_ref, index) {\n      var name = _ref.name;\n      var constantSourceNode = constantSourceNodes[index];\n      constantSourceNode.connect(inputChannelMergerNode, 0, numberOfInputChannels + index);\n      constantSourceNode.start(0);\n      return [name, constantSourceNode.offset];\n    }));\n    inputChannelMergerNode.connect(scriptProcessorNode);\n    var channelInterpretation = options.channelInterpretation;\n    var onprocessorerror = null;\n    // Bug #87: Expose at least one output to make this node connectable.\n    var outputAudioNodes = options.numberOfOutputs === 0 ? [scriptProcessorNode] : outputChannelMergerNodes;\n    var nativeAudioWorkletNodeFaker = {\n      get bufferSize() {\n        return bufferSize;\n      },\n      get channelCount() {\n        return options.channelCount;\n      },\n      set channelCount(_) {\n        // Bug #61: This is not part of the standard but required for the faker to work.\n        throw createInvalidStateError();\n      },\n      get channelCountMode() {\n        return options.channelCountMode;\n      },\n      set channelCountMode(_) {\n        // Bug #61: This is not part of the standard but required for the faker to work.\n        throw createInvalidStateError();\n      },\n      get channelInterpretation() {\n        return channelInterpretation;\n      },\n      set channelInterpretation(value) {\n        for (var _i3 = 0, _gainNodes = gainNodes; _i3 < _gainNodes.length; _i3++) {\n          var gainNode = _gainNodes[_i3];\n          gainNode.channelInterpretation = value;\n        }\n        channelInterpretation = value;\n      },\n      get context() {\n        return scriptProcessorNode.context;\n      },\n      get inputs() {\n        return gainNodes;\n      },\n      get numberOfInputs() {\n        return options.numberOfInputs;\n      },\n      get numberOfOutputs() {\n        return options.numberOfOutputs;\n      },\n      get onprocessorerror() {\n        return onprocessorerror;\n      },\n      set onprocessorerror(value) {\n        if (typeof onprocessorerror === 'function') {\n          nativeAudioWorkletNodeFaker.removeEventListener('processorerror', onprocessorerror);\n        }\n        onprocessorerror = typeof value === 'function' ? value : null;\n        if (typeof onprocessorerror === 'function') {\n          nativeAudioWorkletNodeFaker.addEventListener('processorerror', onprocessorerror);\n        }\n      },\n      get parameters() {\n        return parameterMap;\n      },\n      get port() {\n        return messageChannel.port2;\n      },\n      addEventListener: function addEventListener() {\n        return scriptProcessorNode.addEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n      },\n      connect: connectMultipleOutputs.bind(null, outputAudioNodes),\n      disconnect: disconnectMultipleOutputs.bind(null, outputAudioNodes),\n      dispatchEvent: function dispatchEvent() {\n        return scriptProcessorNode.dispatchEvent(arguments.length <= 0 ? undefined : arguments[0]);\n      },\n      removeEventListener: function removeEventListener() {\n        return scriptProcessorNode.removeEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n      }\n    };\n    var patchedEventListeners = new Map();\n    messageChannel.port1.addEventListener = function (addEventListener) {\n      return function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        if (args[0] === 'message') {\n          var unpatchedEventListener = typeof args[1] === 'function' ? args[1] : _typeof(args[1]) === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function' ? args[1].handleEvent : null;\n          if (unpatchedEventListener !== null) {\n            var patchedEventListener = patchedEventListeners.get(args[1]);\n            if (patchedEventListener !== undefined) {\n              args[1] = patchedEventListener;\n            } else {\n              args[1] = function (event) {\n                exposeCurrentFrameAndCurrentTime(nativeContext.currentTime, nativeContext.sampleRate, function () {\n                  return unpatchedEventListener(event);\n                });\n              };\n              patchedEventListeners.set(unpatchedEventListener, args[1]);\n            }\n          }\n        }\n        return addEventListener.call(messageChannel.port1, args[0], args[1], args[2]);\n      };\n    }(messageChannel.port1.addEventListener);\n    messageChannel.port1.removeEventListener = function (removeEventListener) {\n      return function () {\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n        if (args[0] === 'message') {\n          var patchedEventListener = patchedEventListeners.get(args[1]);\n          if (patchedEventListener !== undefined) {\n            patchedEventListeners[\"delete\"](args[1]);\n            args[1] = patchedEventListener;\n          }\n        }\n        return removeEventListener.call(messageChannel.port1, args[0], args[1], args[2]);\n      };\n    }(messageChannel.port1.removeEventListener);\n    var onmessage = null;\n    Object.defineProperty(messageChannel.port1, 'onmessage', {\n      get: function get() {\n        return onmessage;\n      },\n      set: function set(value) {\n        if (typeof onmessage === 'function') {\n          messageChannel.port1.removeEventListener('message', onmessage);\n        }\n        onmessage = typeof value === 'function' ? value : null;\n        if (typeof onmessage === 'function') {\n          messageChannel.port1.addEventListener('message', onmessage);\n          messageChannel.port1.start();\n        }\n      }\n    });\n    processorConstructor.prototype.port = messageChannel.port1;\n    var audioWorkletProcessor = null;\n    var audioWorkletProcessorPromise = createAudioWorkletProcessor(nativeContext, nativeAudioWorkletNodeFaker, processorConstructor, options);\n    audioWorkletProcessorPromise.then(function (dWrkltPrcssr) {\n      return audioWorkletProcessor = dWrkltPrcssr;\n    });\n    var inputs = createNestedArrays(options.numberOfInputs, options.channelCount);\n    var outputs = createNestedArrays(options.numberOfOutputs, outputChannelCount);\n    var parameters = processorConstructor.parameterDescriptors === undefined ? [] : processorConstructor.parameterDescriptors.reduce(function (prmtrs, _ref2) {\n      var name = _ref2.name;\n      return _objectSpread(_objectSpread({}, prmtrs), {}, _defineProperty({}, name, new Float32Array(128)));\n    }, {});\n    var isActive = true;\n    var disconnectOutputsGraph = function disconnectOutputsGraph() {\n      if (options.numberOfOutputs > 0) {\n        scriptProcessorNode.disconnect(outputChannelSplitterNode);\n      }\n      for (var _i4 = 0, outputChannelSplitterNodeOutput = 0; _i4 < options.numberOfOutputs; _i4 += 1) {\n        var outputChannelMergerNode = outputChannelMergerNodes[_i4];\n        for (var _j = 0; _j < outputChannelCount[_i4]; _j += 1) {\n          outputChannelSplitterNode.disconnect(outputChannelMergerNode, outputChannelSplitterNodeOutput + _j, _j);\n        }\n        outputChannelSplitterNodeOutput += outputChannelCount[_i4];\n      }\n    };\n    var activeInputIndexes = new Map();\n    // tslint:disable-next-line:deprecation\n    scriptProcessorNode.onaudioprocess = function (_ref3) {\n      var inputBuffer = _ref3.inputBuffer,\n        outputBuffer = _ref3.outputBuffer;\n      if (audioWorkletProcessor !== null) {\n        var activeInputs = getActiveAudioWorkletNodeInputs(nativeAudioWorkletNodeFaker);\n        var _loop2 = function _loop2(_i5) {\n          for (var _j2 = 0; _j2 < options.numberOfInputs; _j2 += 1) {\n            for (var k = 0; k < options.channelCount; k += 1) {\n              copyFromChannel(inputBuffer, inputs[_j2], k, k, _i5);\n            }\n          }\n          if (processorConstructor.parameterDescriptors !== undefined) {\n            processorConstructor.parameterDescriptors.forEach(function (_ref4, index) {\n              var name = _ref4.name;\n              copyFromChannel(inputBuffer, parameters, name, numberOfInputChannels + index, _i5);\n            });\n          }\n          for (var _j3 = 0; _j3 < options.numberOfInputs; _j3 += 1) {\n            for (var _k = 0; _k < outputChannelCount[_j3]; _k += 1) {\n              // The byteLength will be 0 when the ArrayBuffer was transferred.\n              if (outputs[_j3][_k].byteLength === 0) {\n                outputs[_j3][_k] = new Float32Array(128);\n              }\n            }\n          }\n          try {\n            var potentiallyEmptyInputs = inputs.map(function (input, index) {\n              var activeInput = activeInputs[index];\n              if (activeInput.size > 0) {\n                activeInputIndexes.set(index, bufferSize / 128);\n                return input;\n              }\n              var count = activeInputIndexes.get(index);\n              if (count === undefined) {\n                return [];\n              }\n              if (input.every(function (channelData) {\n                return channelData.every(function (sample) {\n                  return sample === 0;\n                });\n              })) {\n                if (count === 1) {\n                  activeInputIndexes[\"delete\"](index);\n                } else {\n                  activeInputIndexes.set(index, count - 1);\n                }\n              }\n              return input;\n            });\n            var activeSourceFlag = exposeCurrentFrameAndCurrentTime(nativeContext.currentTime + _i5 / nativeContext.sampleRate, nativeContext.sampleRate, function () {\n              return audioWorkletProcessor.process(potentiallyEmptyInputs, outputs, parameters);\n            });\n            isActive = activeSourceFlag;\n            for (var _j4 = 0, outputChannelSplitterNodeOutput = 0; _j4 < options.numberOfOutputs; _j4 += 1) {\n              for (var _k2 = 0; _k2 < outputChannelCount[_j4]; _k2 += 1) {\n                copyToChannel(outputBuffer, outputs[_j4], _k2, outputChannelSplitterNodeOutput + _k2, _i5);\n              }\n              outputChannelSplitterNodeOutput += outputChannelCount[_j4];\n            }\n          } catch (error) {\n            isActive = false;\n            nativeAudioWorkletNodeFaker.dispatchEvent(new ErrorEvent('processorerror', {\n              colno: error.colno,\n              filename: error.filename,\n              lineno: error.lineno,\n              message: error.message\n            }));\n          }\n          if (!isActive) {\n            for (var _j5 = 0; _j5 < options.numberOfInputs; _j5 += 1) {\n              gainNodes[_j5].disconnect(inputChannelSplitterNodes[_j5]);\n              for (var _k3 = 0; _k3 < options.channelCount; _k3 += 1) {\n                inputChannelSplitterNodes[_i5].disconnect(inputChannelMergerNode, _k3, _j5 * options.channelCount + _k3);\n              }\n            }\n            if (processorConstructor.parameterDescriptors !== undefined) {\n              var length = processorConstructor.parameterDescriptors.length;\n              for (var _j6 = 0; _j6 < length; _j6 += 1) {\n                var constantSourceNode = constantSourceNodes[_j6];\n                constantSourceNode.disconnect(inputChannelMergerNode, 0, numberOfInputChannels + _j6);\n                constantSourceNode.stop();\n              }\n            }\n            inputChannelMergerNode.disconnect(scriptProcessorNode);\n            scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation\n            if (isConnected) {\n              disconnectOutputsGraph();\n            } else {\n              disconnectFakeGraph();\n            }\n            return \"break\";\n          }\n        };\n        for (var _i5 = 0; _i5 < bufferSize; _i5 += 128) {\n          var _ret = _loop2(_i5);\n          if (_ret === \"break\") break;\n        }\n      }\n    };\n    var isConnected = false;\n    // Bug #87: Only Firefox will fire an AudioProcessingEvent if there is no connected output.\n    var nativeGainNode = createNativeGainNode(nativeContext, {\n      channelCount: 1,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'discrete',\n      gain: 0\n    });\n    var connectFakeGraph = function connectFakeGraph() {\n      return scriptProcessorNode.connect(nativeGainNode).connect(nativeContext.destination);\n    };\n    var disconnectFakeGraph = function disconnectFakeGraph() {\n      scriptProcessorNode.disconnect(nativeGainNode);\n      nativeGainNode.disconnect();\n    };\n    var whenConnected = function whenConnected() {\n      if (isActive) {\n        disconnectFakeGraph();\n        if (options.numberOfOutputs > 0) {\n          scriptProcessorNode.connect(outputChannelSplitterNode);\n        }\n        for (var _i6 = 0, outputChannelSplitterNodeOutput = 0; _i6 < options.numberOfOutputs; _i6 += 1) {\n          var outputChannelMergerNode = outputChannelMergerNodes[_i6];\n          for (var _j7 = 0; _j7 < outputChannelCount[_i6]; _j7 += 1) {\n            outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + _j7, _j7);\n          }\n          outputChannelSplitterNodeOutput += outputChannelCount[_i6];\n        }\n      }\n      isConnected = true;\n    };\n    var whenDisconnected = function whenDisconnected() {\n      if (isActive) {\n        connectFakeGraph();\n        disconnectOutputsGraph();\n      }\n      isConnected = false;\n    };\n    connectFakeGraph();\n    return monitorConnections(nativeAudioWorkletNodeFaker, whenConnected, whenDisconnected);\n  };\n};","map":{"version":3,"mappings":"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","names":["MOST_NEGATIVE_SINGLE_FLOAT","MOST_POSITIVE_SINGLE_FLOAT","computeBufferSize","copyFromChannel","copyToChannel","createAudioWorkletProcessor","createNestedArrays","ReadOnlyMap","createNativeAudioWorkletNodeFakerFactory","connectMultipleOutputs","createIndexSizeError","createInvalidStateError","createNativeChannelMergerNode","createNativeChannelSplitterNode","createNativeConstantSourceNode","createNativeGainNode","createNativeScriptProcessorNode","createNotSupportedError","disconnectMultipleOutputs","exposeCurrentFrameAndCurrentTime","getActiveAudioWorkletNodeInputs","monitorConnections","nativeContext","baseLatency","processorConstructor","options","numberOfInputs","numberOfOutputs","outputChannelCount","Array","isArray","from","some","channelCount","length","channelCountMode","numberOfInputChannels","numberOfOutputChannels","reduce","sum","value","numberOfParameters","parameterDescriptors","undefined","messageChannel","MessageChannel","gainNodes","inputChannelSplitterNodes","i","push","channelInterpretation","gain","constantSourceNodes","defaultValue","maxValue","minValue","name","constantSourceNode","offset","parameterData","Object","defineProperties","get","inputChannelMergerNode","Math","max","bufferSize","sampleRate","scriptProcessorNode","outputChannelSplitterNode","outputChannelMergerNodes","connect","j","parameterMap","map","index","start","onprocessorerror","outputAudioNodes","nativeAudioWorkletNodeFaker","_","gainNode","context","inputs","removeEventListener","addEventListener","parameters","port","port2","bind","disconnect","dispatchEvent","patchedEventListeners","Map","port1","args","unpatchedEventListener","handleEvent","patchedEventListener","event","currentTime","set","call","onmessage","defineProperty","prototype","audioWorkletProcessor","audioWorkletProcessorPromise","then","dWrkltPrcssr","outputs","prmtrs","Float32Array","isActive","disconnectOutputsGraph","outputChannelSplitterNodeOutput","outputChannelMergerNode","activeInputIndexes","onaudioprocess","inputBuffer","outputBuffer","activeInputs","k","forEach","byteLength","potentiallyEmptyInputs","input","activeInput","size","count","every","channelData","sample","activeSourceFlag","process","error","ErrorEvent","colno","filename","lineno","message","stop","isConnected","disconnectFakeGraph","nativeGainNode","connectFakeGraph","destination","whenConnected","whenDisconnected"],"sourceRoot":"","sources":["../../../src/factories/native-audio-worklet-node-faker-factory.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}