{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nexport default {\n  inject: ['dropFeedback'],\n  props: [],\n  data: function data() {\n    return {\n      color: {\n        mainEnv: this.colors.pink.glow,\n        envelope: this.colors.azure.glow,\n        lfo: this.colors.purple.glow\n      },\n      type: \"volEnvelope\",\n      isDraggable: this.isDraggable,\n      buttonListEnv: [],\n      buttonListLfo: []\n    };\n  },\n  mounted: function mounted() {\n    for (var i = 1; i < this.nEnvelopes + 1; i++) {\n      this.buttonListEnv.push({\n        id: i,\n        ref: \"button\" + i,\n        type: \"envelope\"\n      });\n    }\n    for (var _i = 1; _i < this.nLfo + 1; _i++) {\n      this.buttonListLfo.push({\n        id: _i,\n        ref: \"button\" + _i,\n        type: \"lfo\"\n      });\n    }\n    //console.log(this.isDraggable)\n\n    //console.log(this.buttonListEnv)\n    //console.log(this.buttonListLfo)\n\n    /*\r\n    this.$on(\"unLink\", (data) => {\r\n          console.log(\"ModSelector disconnecting link from \"+data.modulator.type+\" \"+data.modulator.id+\" to \"+data.section+data.target)})\r\n       */\n  },\n\n  computed: {\n    textId: function textId() {\n      return {\n        fontWeight: \"bold\",\n        opacity: \"80%\",\n        position: 'absolute',\n        fontSize: '.8vw'\n      };\n    },\n    buttonList: function buttonList() {\n      switch (this.type) {\n        case \"volEnvelope\":\n          return {\n            backgroundColor: this.colors.pink.medium\n          };\n        case \"envelope\":\n          return {\n            backgroundColor: this.colors.azure.medium\n          };\n        case \"lfo\":\n          return {\n            backgroundColor: this.colors.purple.glow\n          };\n      }\n    }\n  },\n  methods: {\n    draggability: function draggability(type, id) {\n      //console.log(this.isDraggable)\n      //console.log(\"checking draggability of \" + type + \" \" + id)\n      return this.isDraggable[type][id];\n    },\n    isDraggableUpdate: function isDraggableUpdate(isDraggable) {\n      //console.log(\"UPDATE ISDRAGGABLE\")\n      //console.log(this.isDraggable)\n      this.isDraggable = isDraggable;\n    },\n    buttonColor: function buttonColor(type) {\n      return {\n        backgroundColor: this.color[type]\n      };\n    },\n    startDrag: function startDrag(event, id, type) {\n      //console.log(\"dragging \" + type + \" \" + id)\n      event.dataTransfer.dropEffect = \"move\";\n      event.dataTransfer.effectAllowed = \"move\";\n      var data = {\n        type: type,\n        id: id,\n        color: this.color[type]\n      };\n      event.dataTransfer.setData(\"data\", JSON.stringify(data));\n      //console.log(data)\n    },\n    handleClick: function handleClick(id, type) {\n      this.type = type;\n      if (type === \"volEnvelope\") {\n        //console.log(\"Selected \" + id)\n        this.$emit(\"selection\", type, null);\n      } else {\n        //console.log(\"Selected \" + type + \" \" + id)\n        this.$emit(\"selection\", id, type);\n      }\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["inject","props","data","color","mainEnv","colors","pink","glow","envelope","azure","lfo","purple","type","isDraggable","buttonListEnv","buttonListLfo","mounted","i","nEnvelopes","push","id","ref","nLfo","computed","textId","fontWeight","opacity","position","fontSize","buttonList","backgroundColor","medium","methods","draggability","isDraggableUpdate","buttonColor","startDrag","event","dataTransfer","dropEffect","effectAllowed","setData","JSON","stringify","handleClick","$emit"],"sourceRoot":"","sources":["C:\\Home\\Projects\\Programmazione\\WebStorm\\myZenythPolisinT\\zenyth_polisint\\src\\views\\Synth\\Modulators\\ModSelector.vue"],"sourcesContent":["<template>\r\n  <div class=\"buttonList\" :style=\"this.buttonList\">\r\n    <div class=\"identifierVol\" :style=\"buttonColor('mainEnv')\" @click=\"handleClick(null, 'volEnvelope')\">\r\n      <img src=\"@/icons/ADSR.svg\" alt=\"\" draggable=\"false\">\r\n    </div>\r\n    <template v-for=\"button in buttonListEnv\" :key=\"button.id\" :ref=\"button.ref\">\r\n      <div class=\"button\" :style=\"buttonColor('envelope')\">\r\n        <div :style=\"textId\"> {{ button.id }} </div>\r\n        <div class=\"identifier\" @click=\"handleClick(button.id, button.type)\">\r\n\r\n          <img src=\"@/icons/ADSR.svg\" alt=\"\" draggable=\"false\">\r\n        </div>\r\n        <div class=\"draggableArea\" :draggable=\"draggability('envelope', button.id)\"\r\n          @dragstart=\"startDrag($event, button.id, button.type)\">ϟ\r\n        </div>\r\n      </div>\r\n    </template>\r\n    <template v-for=\"button in buttonListLfo\" :key=\"button.id\" :ref=\"button.ref\">\r\n      <div class=\"button\" :style=\"buttonColor('lfo')\">\r\n        <div :style=\"textId\"> {{ button.id }} </div>\r\n        <div class=\"identifier\" @click=\"handleClick(button.id, button.type)\"><!-- {{ button.id }} -->\r\n\r\n          <img src=\"@/icons/LFO.svg\" alt=\"\" draggable=\"false\">\r\n        </div>\r\n        <div class=\"draggableArea\" :draggable=\"draggability('lfo', button.id)\"\r\n          @dragstart=\"startDrag($event, button.id, button.type)\">ϟ\r\n        </div>\r\n      </div>\r\n    </template>\r\n  </div>\r\n\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  inject: ['dropFeedback'],\r\n  props: [],\r\n  data() {\r\n    return {\r\n      color: {\r\n        mainEnv: this.colors.pink.glow,\r\n        envelope: this.colors.azure.glow,\r\n        lfo: this.colors.purple.glow,\r\n      },\r\n      type: \"volEnvelope\",\r\n\r\n      isDraggable: this.isDraggable,\r\n      buttonListEnv: [],\r\n      buttonListLfo: [],\r\n    };\r\n  },\r\n  mounted() {\r\n    for (let i = 1; i < this.nEnvelopes + 1; i++) {\r\n      this.buttonListEnv.push({ id: i, ref: \"button\" + i, type: \"envelope\" });\r\n    }\r\n    for (let i = 1; i < this.nLfo + 1; i++) {\r\n      this.buttonListLfo.push({ id: i, ref: \"button\" + i, type: \"lfo\" });\r\n    }\r\n    //console.log(this.isDraggable)\r\n\r\n\r\n    //console.log(this.buttonListEnv)\r\n    //console.log(this.buttonListLfo)\r\n\r\n    /*\r\n    this.$on(\"unLink\", (data) => {\r\n          console.log(\"ModSelector disconnecting link from \"+data.modulator.type+\" \"+data.modulator.id+\" to \"+data.section+data.target)})\r\n\r\n     */\r\n\r\n  },\r\n  computed: {\r\n    textId(){\r\n      return {\r\n        fontWeight: \"bold\",\r\n        opacity: \"80%\",\r\n        position: 'absolute',\r\n        fontSize:'.8vw'\r\n      }\r\n    },\r\n    buttonList() {\r\n      switch (this.type) {\r\n        case \"volEnvelope\":\r\n          return{\r\n            backgroundColor: this.colors.pink.medium\r\n          }\r\n          case \"envelope\":\r\n          return{\r\n            backgroundColor: this.colors.azure.medium\r\n          }\r\n          case \"lfo\":\r\n          return{\r\n            backgroundColor: this.colors.purple.glow\r\n          }\r\n      }\r\n      \r\n    } \r\n\r\n  },\r\n  methods: {\r\n    draggability(type, id) {\r\n      //console.log(this.isDraggable)\r\n      //console.log(\"checking draggability of \" + type + \" \" + id)\r\n      return this.isDraggable[type][id]\r\n    },\r\n    isDraggableUpdate(isDraggable) {\r\n      //console.log(\"UPDATE ISDRAGGABLE\")\r\n      //console.log(this.isDraggable)\r\n      this.isDraggable = isDraggable\r\n    },\r\n    buttonColor(type) {\r\n      return {\r\n        backgroundColor: this.color[type]\r\n      }\r\n    },\r\n\r\n    startDrag(event, id, type) {\r\n      //console.log(\"dragging \" + type + \" \" + id)\r\n      event.dataTransfer.dropEffect = \"move\"\r\n      event.dataTransfer.effectAllowed = \"move\"\r\n      let data = { type: type, id: id, color: this.color[type] }\r\n      event.dataTransfer.setData(\"data\", JSON.stringify(data));\r\n      //console.log(data)\r\n    },\r\n    handleClick(id, type) {\r\n      this.type = type\r\n      if (type === \"volEnvelope\") {\r\n        //console.log(\"Selected \" + id)\r\n        this.$emit(\"selection\", type, null);\r\n      } else {\r\n        //console.log(\"Selected \" + type + \" \" + id)\r\n        this.$emit(\"selection\", id, type);\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.button {\r\n  display: grid;\r\n  grid-template-columns: 80% 18%;\r\n  flex: 1;\r\n  width: 100%;\r\n  height: 100%;\r\n  border: 0.06vw solid black; \r\n  border-radius: 0.2vw;\r\n  padding: 1%;\r\n  justify-content: center;\r\n  align-items: center;\r\n  box-sizing: border-box;\r\n  align-content: center;\r\n  justify-items: stretch;\r\n\r\n}\r\n\r\n.buttonList {\r\n  padding-left: 0.3vw;\r\n  padding-right:  0.3vw;\r\n  padding-bottom: 0.3vw;\r\n  position: relative;\r\n  grid-row: 2;\r\n  display: flex;\r\n  flex-basis: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.identifier {\r\n  height: 100%;\r\n  justify-content: center;\r\n  align-items: center;\r\n  /* border: 0.1vw solid black; */\r\n  display: flex;\r\n\r\n}\r\n\r\n.identifierVol {\r\n  border: 0.06vw solid black; \r\n  border-radius: 0.2vw;\r\n  flex: 1;\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  height: 100%;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.draggableArea {\r\n  border-radius: 50%;\r\n  display: flex;\r\n  border: 0.1vw solid black;\r\n  box-sizing: border-box;\r\n  position: relative;\r\n  width: 100%;\r\n  aspect-ratio: 1/1;\r\n  font-size: .9vw;\r\n  align-items: flex-end;\r\n  justify-content: center;\r\n}.draggableArea:hover {\r\n  opacity: 40%;\r\n}\r\n.identifier img {\r\n  position: relative;\r\n  opacity: 60%;\r\n  width: 4vw;\r\n  aspect-ratio: 1/1;\r\n}\r\n.identifierVol img {\r\n  position: relative;\r\n  opacity: 60%;\r\n  width: 4vw;\r\n  aspect-ratio: 1/1;\r\n}\r\n.identifier img:hover {\r\n  opacity: 40%;\r\n}\r\n.identifierVol img:hover {\r\n  opacity: 40%;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}