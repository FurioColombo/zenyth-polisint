{"ast":null,"code":"import _classCallCheck from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array-buffer.slice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.float32-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.find-last.js\";\nimport \"core-js/modules/es.typed-array.find-last-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Param } from \"../../core/context/Param\";\nimport { assert } from \"../../core/util/Debug\";\n/**\n * Thin wrapper around the native Web Audio [BiquadFilterNode](https://webaudio.github.io/web-audio-api/#biquadfilternode).\n * BiquadFilter is similar to [[Filter]] but doesn't have the option to set the \"rolloff\" value.\n * @category Component\n */\nexport var BiquadFilter = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(BiquadFilter, _ToneAudioNode);\n  var _super = _createSuper(BiquadFilter);\n  function BiquadFilter() {\n    var _this;\n    _classCallCheck(this, BiquadFilter);\n    _this = _super.call(this, optionsFromArguments(BiquadFilter.getDefaults(), arguments, [\"frequency\", \"type\"]));\n    _this.name = \"BiquadFilter\";\n    var options = optionsFromArguments(BiquadFilter.getDefaults(), arguments, [\"frequency\", \"type\"]);\n    _this._filter = _this.context.createBiquadFilter();\n    _this.input = _this.output = _this._filter;\n    _this.Q = new Param({\n      context: _this.context,\n      units: \"number\",\n      value: options.Q,\n      param: _this._filter.Q\n    });\n    _this.frequency = new Param({\n      context: _this.context,\n      units: \"frequency\",\n      value: options.frequency,\n      param: _this._filter.frequency\n    });\n    _this.detune = new Param({\n      context: _this.context,\n      units: \"cents\",\n      value: options.detune,\n      param: _this._filter.detune\n    });\n    _this.gain = new Param({\n      context: _this.context,\n      units: \"decibels\",\n      convert: false,\n      value: options.gain,\n      param: _this._filter.gain\n    });\n    _this.type = options.type;\n    return _this;\n  }\n  _createClass(BiquadFilter, [{\n    key: \"type\",\n    get:\n    /**\n     * The type of this BiquadFilterNode. For a complete list of types and their attributes, see the\n     * [Web Audio API](https://webaudio.github.io/web-audio-api/#dom-biquadfiltertype-lowpass)\n     */\n    function get() {\n      return this._filter.type;\n    },\n    set: function set(type) {\n      var types = [\"lowpass\", \"highpass\", \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", \"peaking\"];\n      assert(types.indexOf(type) !== -1, \"Invalid filter type: \".concat(type));\n      this._filter.type = type;\n    }\n    /**\n     * Get the frequency response curve. This curve represents how the filter\n     * responses to frequencies between 20hz-20khz.\n     * @param  len The number of values to return\n     * @return The frequency response curve between 20-20kHz\n     */\n  }, {\n    key: \"getFrequencyResponse\",\n    value: function getFrequencyResponse() {\n      var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 128;\n      // start with all 1s\n      var freqValues = new Float32Array(len);\n      for (var i = 0; i < len; i++) {\n        var norm = Math.pow(i / len, 2);\n        var freq = norm * (20000 - 20) + 20;\n        freqValues[i] = freq;\n      }\n      var magValues = new Float32Array(len);\n      var phaseValues = new Float32Array(len);\n      // clone the filter to remove any connections which may be changing the value\n      var filterClone = this.context.createBiquadFilter();\n      filterClone.type = this.type;\n      filterClone.Q.value = this.Q.value;\n      filterClone.frequency.value = this.frequency.value;\n      filterClone.gain.value = this.gain.value;\n      filterClone.getFrequencyResponse(freqValues, magValues, phaseValues);\n      return magValues;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(BiquadFilter.prototype), \"dispose\", this).call(this);\n      this._filter.disconnect();\n      this.Q.dispose();\n      this.frequency.dispose();\n      this.gain.dispose();\n      this.detune.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        Q: 1,\n        type: \"lowpass\",\n        frequency: 350,\n        detune: 0,\n        gain: 0\n      });\n    }\n  }]);\n  return BiquadFilter;\n}(ToneAudioNode);","map":{"version":3,"mappings":"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","names":["ToneAudioNode","optionsFromArguments","Param","assert","BiquadFilter","getDefaults","arguments","options","_filter","context","createBiquadFilter","input","output","Q","units","value","param","frequency","detune","gain","convert","type","types","indexOf","len","freqValues","Float32Array","i","norm","Math","pow","freq","magValues","phaseValues","filterClone","getFrequencyResponse","disconnect","dispose","Object","assign"],"sourceRoot":"","sources":["../../../../Tone/component/filter/BiquadFilter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}