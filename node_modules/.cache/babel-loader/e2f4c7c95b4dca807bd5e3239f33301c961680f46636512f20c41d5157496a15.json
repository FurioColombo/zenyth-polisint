{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\n/**\n * PWMOscillator modulates the width of a Tone.PulseOscillator\n * at the modulationFrequency. This has the effect of continuously\n * changing the timbre of the oscillator by altering the harmonics\n * generated.\n * @example\n * return Tone.Offline(() => {\n * \tconst pwm = new Tone.PWMOscillator(60, 0.3).toDestination().start();\n * }, 0.1, 1);\n * @category Source\n */\nexport class PWMOscillator extends Source {\n  constructor() {\n    super(optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]));\n    this.name = \"PWMOscillator\";\n    this.sourceType = \"pwm\";\n    /**\n     * Scale the oscillator so it doesn't go silent\n     * at the extreme values.\n     */\n    this._scale = new Multiply({\n      context: this.context,\n      value: 2\n    });\n    const options = optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]);\n    this._pulse = new PulseOscillator({\n      context: this.context,\n      frequency: options.modulationFrequency\n    });\n    // change the pulse oscillator type\n    this._pulse.carrierType = \"sine\";\n    this.modulationFrequency = this._pulse.frequency;\n    this._modulator = new Oscillator({\n      context: this.context,\n      detune: options.detune,\n      frequency: options.frequency,\n      onstop: () => this.onstop(this),\n      phase: options.phase\n    });\n    this.frequency = this._modulator.frequency;\n    this.detune = this._modulator.detune;\n    // connections\n    this._modulator.chain(this._scale, this._pulse.width);\n    this._pulse.connect(this.output);\n    readOnly(this, [\"modulationFrequency\", \"frequency\", \"detune\"]);\n  }\n  static getDefaults() {\n    return Object.assign(Source.getDefaults(), {\n      detune: 0,\n      frequency: 440,\n      modulationFrequency: 0.4,\n      phase: 0,\n      type: \"pwm\"\n    });\n  }\n  /**\n   * start the oscillator\n   */\n  _start(time) {\n    time = this.toSeconds(time);\n    this._modulator.start(time);\n    this._pulse.start(time);\n  }\n  /**\n   * stop the oscillator\n   */\n  _stop(time) {\n    time = this.toSeconds(time);\n    this._modulator.stop(time);\n    this._pulse.stop(time);\n  }\n  /**\n   * restart the oscillator\n   */\n  _restart(time) {\n    this._modulator.restart(time);\n    this._pulse.restart(time);\n  }\n  /**\n   * The type of the oscillator. Always returns \"pwm\".\n   */\n  get type() {\n    return \"pwm\";\n  }\n  /**\n   * The baseType of the oscillator. Always returns \"pwm\".\n   */\n  get baseType() {\n    return \"pwm\";\n  }\n  /**\n   * The partials of the waveform. Cannot set partials for this waveform type\n   */\n  get partials() {\n    return [];\n  }\n  /**\n   * No partials for this waveform type.\n   */\n  get partialCount() {\n    return 0;\n  }\n  /**\n   * The phase of the oscillator in degrees.\n   */\n  get phase() {\n    return this._modulator.phase;\n  }\n  set phase(phase) {\n    this._modulator.phase = phase;\n  }\n  asArray(length = 1024) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return generateWaveform(this, length);\n    });\n  }\n  /**\n   * Clean up.\n   */\n  dispose() {\n    super.dispose();\n    this._pulse.dispose();\n    this._scale.dispose();\n    this._modulator.dispose();\n    return this;\n  }\n}","map":{"version":3,"mappings":";AACA,SAASA,oBAAoB,QAAQ,0BAA0B;AAC/D,SAASC,QAAQ,QAAQ,2BAA2B;AACpD,SAASC,QAAQ,QAAQ,uBAAuB;AAEhD,SAASC,MAAM,QAAQ,WAAW;AAClC,SAASC,UAAU,QAAQ,cAAc;AACzC,SAASC,gBAAgB,QAAuD,uBAAuB;AACvG,SAASC,eAAe,QAAQ,mBAAmB;AAInD;;;;;;;;;;;AAWA,OAAM,MAAOC,aAAc,SAAQJ,MAA4B;EAiD9DK;IACC,KAAK,CAACR,oBAAoB,CAACO,aAAa,CAACE,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,WAAW,EAAE,qBAAqB,CAAC,CAAC,CAAC;IAhDjG,SAAI,GAAW,eAAe;IAE9B,eAAU,GAAG,KAAK;IAW3B;;;;IAIQ,WAAM,GAAa,IAAIR,QAAQ,CAAC;MACvCS,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBC,KAAK,EAAE;KACP,CAAC;IA6BD,MAAMC,OAAO,GAAGb,oBAAoB,CAACO,aAAa,CAACE,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,WAAW,EAAE,qBAAqB,CAAC,CAAC;IAElH,IAAI,CAACI,MAAM,GAAG,IAAIR,eAAe,CAAC;MACjCK,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBI,SAAS,EAAEF,OAAO,CAACG;KACnB,CAAC;IACF;IACA,IAAI,CAACF,MAAM,CAACG,WAAW,GAAG,MAAM;IAEhC,IAAI,CAACD,mBAAmB,GAAG,IAAI,CAACF,MAAM,CAACC,SAAS;IAEhD,IAAI,CAACG,UAAU,GAAG,IAAId,UAAU,CAAC;MAChCO,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBQ,MAAM,EAAEN,OAAO,CAACM,MAAM;MACtBJ,SAAS,EAAEF,OAAO,CAACE,SAAS;MAC5BK,MAAM,EAAE,MAAM,IAAI,CAACA,MAAM,CAAC,IAAI,CAAC;MAC/BC,KAAK,EAAER,OAAO,CAACQ;KACf,CAAC;IAEF,IAAI,CAACN,SAAS,GAAG,IAAI,CAACG,UAAU,CAACH,SAAS;IAC1C,IAAI,CAACI,MAAM,GAAG,IAAI,CAACD,UAAU,CAACC,MAAM;IAEpC;IACA,IAAI,CAACD,UAAU,CAACI,KAAK,CAAC,IAAI,CAACC,MAAM,EAAE,IAAI,CAACT,MAAM,CAACU,KAAK,CAAC;IACrD,IAAI,CAACV,MAAM,CAACW,OAAO,CAAC,IAAI,CAACC,MAAM,CAAC;IAChCzB,QAAQ,CAAC,IAAI,EAAE,CAAC,qBAAqB,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC;EAC/D;EAEA,OAAOQ,WAAW;IACjB,OAAOkB,MAAM,CAACC,MAAM,CAACzB,MAAM,CAACM,WAAW,EAAE,EAAE;MAC1CU,MAAM,EAAE,CAAC;MACTJ,SAAS,EAAE,GAAG;MACdC,mBAAmB,EAAE,GAAG;MACxBK,KAAK,EAAE,CAAC;MACRQ,IAAI,EAAE;KACN,CAAC;EACH;EACA;;;EAGUC,MAAM,CAACC,IAAU;IAC1BA,IAAI,GAAG,IAAI,CAACC,SAAS,CAACD,IAAI,CAAC;IAC3B,IAAI,CAACb,UAAU,CAACe,KAAK,CAACF,IAAI,CAAC;IAC3B,IAAI,CAACjB,MAAM,CAACmB,KAAK,CAACF,IAAI,CAAC;EACxB;EAEA;;;EAGUG,KAAK,CAACH,IAAU;IACzBA,IAAI,GAAG,IAAI,CAACC,SAAS,CAACD,IAAI,CAAC;IAC3B,IAAI,CAACb,UAAU,CAACiB,IAAI,CAACJ,IAAI,CAAC;IAC1B,IAAI,CAACjB,MAAM,CAACqB,IAAI,CAACJ,IAAI,CAAC;EACvB;EAEA;;;EAGUK,QAAQ,CAACL,IAAa;IAC/B,IAAI,CAACb,UAAU,CAACmB,OAAO,CAACN,IAAI,CAAC;IAC7B,IAAI,CAACjB,MAAM,CAACuB,OAAO,CAACN,IAAI,CAAC;EAC1B;EAEA;;;EAGA,IAAIF,IAAI;IACP,OAAO,KAAK;EACb;EAEA;;;EAGA,IAAIS,QAAQ;IACX,OAAO,KAAK;EACb;EAEA;;;EAGA,IAAIC,QAAQ;IACX,OAAO,EAAE;EACV;EAEA;;;EAGA,IAAIC,YAAY;IACf,OAAO,CAAC;EACT;EAEA;;;EAGA,IAAInB,KAAK;IACR,OAAO,IAAI,CAACH,UAAU,CAACG,KAAK;EAC7B;EACA,IAAIA,KAAK,CAACA,KAAc;IACvB,IAAI,CAACH,UAAU,CAACG,KAAK,GAAGA,KAAK;EAC9B;EAEMoB,OAAO,CAACC,MAAM,GAAG,IAAI;;MAC1B,OAAOrC,gBAAgB,CAAC,IAAI,EAAEqC,MAAM,CAAC;IACtC,CAAC;;EAED;;;EAGAC,OAAO;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAAC7B,MAAM,CAAC6B,OAAO,EAAE;IACrB,IAAI,CAACpB,MAAM,CAACoB,OAAO,EAAE;IACrB,IAAI,CAACzB,UAAU,CAACyB,OAAO,EAAE;IACzB,OAAO,IAAI;EACZ","names":["optionsFromArguments","readOnly","Multiply","Source","Oscillator","generateWaveform","PulseOscillator","PWMOscillator","constructor","getDefaults","arguments","context","value","options","_pulse","frequency","modulationFrequency","carrierType","_modulator","detune","onstop","phase","chain","_scale","width","connect","output","Object","assign","type","_start","time","toSeconds","start","_stop","stop","_restart","restart","baseType","partials","partialCount","asArray","length","dispose"],"sourceRoot":"","sources":["../../../../Tone/source/oscillator/PWMOscillator.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}