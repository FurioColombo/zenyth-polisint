{"ast":null,"code":"import _classCallCheck from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { connect, connectSeries, ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { CrossFade } from \"../component/channel/CrossFade\";\nimport { Split } from \"../component/channel/Split\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Merge } from \"../component/channel/Merge\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Base class for Stereo effects.\n */\nexport var StereoEffect = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(StereoEffect, _ToneAudioNode);\n  var _super = _createSuper(StereoEffect);\n  function StereoEffect(options) {\n    var _this;\n    _classCallCheck(this, StereoEffect);\n    _this = _super.call(this, options);\n    _this.name = \"StereoEffect\";\n    _this.input = new Gain({\n      context: _this.context\n    });\n    // force mono sources to be stereo\n    _this.input.channelCount = 2;\n    _this.input.channelCountMode = \"explicit\";\n    _this._dryWet = _this.output = new CrossFade({\n      context: _this.context,\n      fade: options.wet\n    });\n    _this.wet = _this._dryWet.fade;\n    _this._split = new Split({\n      context: _this.context,\n      channels: 2\n    });\n    _this._merge = new Merge({\n      context: _this.context,\n      channels: 2\n    });\n    // connections\n    _this.input.connect(_this._split);\n    // dry wet connections\n    _this.input.connect(_this._dryWet.a);\n    _this._merge.connect(_this._dryWet.b);\n    readOnly(_assertThisInitialized(_this), [\"wet\"]);\n    return _this;\n  }\n  /**\n   * Connect the left part of the effect\n   */\n  _createClass(StereoEffect, [{\n    key: \"connectEffectLeft\",\n    value: function connectEffectLeft() {\n      var _ref;\n      this._split.connect(arguments.length <= 0 ? undefined : arguments[0], 0, 0);\n      connectSeries.apply(void 0, arguments);\n      connect((_ref = arguments.length - 1, _ref < 0 || arguments.length <= _ref ? undefined : arguments[_ref]), this._merge, 0, 0);\n    }\n    /**\n     * Connect the right part of the effect\n     */\n  }, {\n    key: \"connectEffectRight\",\n    value: function connectEffectRight() {\n      var _ref2;\n      this._split.connect(arguments.length <= 0 ? undefined : arguments[0], 1, 0);\n      connectSeries.apply(void 0, arguments);\n      connect((_ref2 = arguments.length - 1, _ref2 < 0 || arguments.length <= _ref2 ? undefined : arguments[_ref2]), this._merge, 0, 1);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(StereoEffect.prototype), \"dispose\", this).call(this);\n      this._dryWet.dispose();\n      this._split.dispose();\n      this._merge.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        wet: 1\n      });\n    }\n  }]);\n  return StereoEffect;\n}(ToneAudioNode);","map":{"version":3,"mappings":";;;;;;;;AACA,SAASA,OAAO,EAAEC,aAAa,EAAcC,aAAa,QAAQ,+BAA+B;AACjG,SAASC,SAAS,QAAQ,gCAAgC;AAE1D,SAASC,KAAK,QAAQ,4BAA4B;AAClD,SAASC,IAAI,QAAQ,sBAAsB;AAC3C,SAASC,KAAK,QAAQ,4BAA4B;AAClD,SAASC,QAAQ,QAAQ,wBAAwB;AAIjD;;;AAGA,WAAaC,YAAkD;EAAA;EAAA;EA4B9D,sBAAYC,OAA4B;IAAA;IAAA;IAEvC,0BAAMA,OAAO;IA5BL,UAAI,GAAW,cAAc;IA8BrC,MAAKC,KAAK,GAAG,IAAIL,IAAI,CAAC;MAAEM,OAAO,EAAE,MAAKA;IAAO,CAAE,CAAC;IAChD;IACA,MAAKD,KAAK,CAACE,YAAY,GAAG,CAAC;IAC3B,MAAKF,KAAK,CAACG,gBAAgB,GAAG,UAAU;IAExC,MAAKC,OAAO,GAAG,MAAKC,MAAM,GAAG,IAAIZ,SAAS,CAAC;MAC1CQ,OAAO,EAAE,MAAKA,OAAO;MACrBK,IAAI,EAAEP,OAAO,CAACQ;KACd,CAAC;IACF,MAAKA,GAAG,GAAG,MAAKH,OAAO,CAACE,IAAI;IAC5B,MAAKE,MAAM,GAAG,IAAId,KAAK,CAAC;MAAEO,OAAO,EAAE,MAAKA,OAAO;MAAEQ,QAAQ,EAAE;IAAC,CAAE,CAAC;IAC/D,MAAKC,MAAM,GAAG,IAAId,KAAK,CAAC;MAAEK,OAAO,EAAE,MAAKA,OAAO;MAAEQ,QAAQ,EAAE;IAAC,CAAE,CAAC;IAE/D;IACA,MAAKT,KAAK,CAACV,OAAO,CAAC,MAAKkB,MAAM,CAAC;IAC/B;IACA,MAAKR,KAAK,CAACV,OAAO,CAAC,MAAKc,OAAO,CAACO,CAAC,CAAC;IAClC,MAAKD,MAAM,CAACpB,OAAO,CAAC,MAAKc,OAAO,CAACQ,CAAC,CAAC;IACnCf,QAAQ,gCAAO,CAAC,KAAK,CAAC,CAAC;IAAC;EACzB;EAEA;;;EAAA;IAAA;IAAA,OAGU,6BAAwC;MAAA;MACjD,IAAI,CAACW,MAAM,CAAClB,OAAO,mDAAW,CAAC,EAAE,CAAC,CAAC;MACnCC,aAAa,yBAAU;MACvBD,OAAO,SAAO,UAAMuB,MAAM,GAAC,CAAC,uEAAG,IAAI,CAACH,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;IAClD;IAEA;;;EAAA;IAAA;IAAA,OAGU,8BAAyC;MAAA;MAClD,IAAI,CAACF,MAAM,CAAClB,OAAO,mDAAW,CAAC,EAAE,CAAC,CAAC;MACnCC,aAAa,yBAAU;MACvBD,OAAO,UAAO,UAAMuB,MAAM,GAAC,CAAC,0EAAG,IAAI,CAACH,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;IAClD;EAAC;IAAA;IAAA,OAQD,mBAAO;MACN;MACA,IAAI,CAACN,OAAO,CAACU,OAAO,EAAE;MACtB,IAAI,CAACN,MAAM,CAACM,OAAO,EAAE;MACrB,IAAI,CAACJ,MAAM,CAACI,OAAO,EAAE;MACrB,OAAO,IAAI;IACZ;EAAC;IAAA;IAAA,OAZD,uBAAkB;MACjB,OAAOC,MAAM,CAACC,MAAM,CAACxB,aAAa,CAACyB,WAAW,EAAE,EAAE;QACjDV,GAAG,EAAE;OACL,CAAC;IACH;EAAC;EAAA;AAAA,EA3EqEf,aAAsB","names":["connect","connectSeries","ToneAudioNode","CrossFade","Split","Gain","Merge","readOnly","StereoEffect","options","input","context","channelCount","channelCountMode","_dryWet","output","fade","wet","_split","channels","_merge","a","b","length","dispose","Object","assign","getDefaults"],"sourceRoot":"","sources":["../../../Tone/effect/StereoEffect.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}