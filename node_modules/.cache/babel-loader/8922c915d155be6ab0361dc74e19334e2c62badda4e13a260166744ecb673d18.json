{"ast":null,"code":"import _classCallCheck from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array-buffer.slice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.float32-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.find-last.js\";\nimport \"core-js/modules/es.typed-array.find-last-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/esnext.typed-array.to-reversed.js\";\nimport \"core-js/modules/esnext.typed-array.to-sorted.js\";\nimport \"core-js/modules/esnext.typed-array.with.js\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Gain } from \"../../core/context/Gain\";\n/**\n * A one pole filter with 6db-per-octave rolloff. Either \"highpass\" or \"lowpass\".\n * Note that changing the type or frequency may result in a discontinuity which\n * can sound like a click or pop.\n * References:\n * * http://www.earlevel.com/main/2012/12/15/a-one-pole-filter/\n * * http://www.dspguide.com/ch19/2.htm\n * * https://github.com/vitaliy-bobrov/js-rocks/blob/master/src/app/audio/effects/one-pole-filters.ts\n * @category Component\n */\nexport var OnePoleFilter = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(OnePoleFilter, _ToneAudioNode);\n  var _super = _createSuper(OnePoleFilter);\n  function OnePoleFilter() {\n    var _this;\n    _classCallCheck(this, OnePoleFilter);\n    _this = _super.call(this, optionsFromArguments(OnePoleFilter.getDefaults(), arguments, [\"frequency\", \"type\"]));\n    _this.name = \"OnePoleFilter\";\n    var options = optionsFromArguments(OnePoleFilter.getDefaults(), arguments, [\"frequency\", \"type\"]);\n    _this._frequency = options.frequency;\n    _this._type = options.type;\n    _this.input = new Gain({\n      context: _this.context\n    });\n    _this.output = new Gain({\n      context: _this.context\n    });\n    _this._createFilter();\n    return _this;\n  }\n  _createClass(OnePoleFilter, [{\n    key: \"_createFilter\",\n    value:\n    /**\n     * Create a filter and dispose the old one\n     */\n    function _createFilter() {\n      var _this2 = this;\n      var oldFilter = this._filter;\n      var freq = this.toFrequency(this._frequency);\n      var t = 1 / (2 * Math.PI * freq);\n      if (this._type === \"lowpass\") {\n        var a0 = 1 / (t * this.context.sampleRate);\n        var b1 = a0 - 1;\n        this._filter = this.context.createIIRFilter([a0, 0], [1, b1]);\n      } else {\n        var _b = 1 / (t * this.context.sampleRate) - 1;\n        this._filter = this.context.createIIRFilter([1, -1], [1, _b]);\n      }\n      this.input.chain(this._filter, this.output);\n      if (oldFilter) {\n        // dispose it on the next block\n        this.context.setTimeout(function () {\n          if (!_this2.disposed) {\n            _this2.input.disconnect(oldFilter);\n            oldFilter.disconnect();\n          }\n        }, this.blockTime);\n      }\n    }\n    /**\n     * The frequency value.\n     */\n  }, {\n    key: \"frequency\",\n    get: function get() {\n      return this._frequency;\n    },\n    set: function set(fq) {\n      this._frequency = fq;\n      this._createFilter();\n    }\n    /**\n     * The OnePole Filter type, either \"highpass\" or \"lowpass\"\n     */\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._type;\n    },\n    set: function set(t) {\n      this._type = t;\n      this._createFilter();\n    }\n    /**\n     * Get the frequency response curve. This curve represents how the filter\n     * responses to frequencies between 20hz-20khz.\n     * @param  len The number of values to return\n     * @return The frequency response curve between 20-20kHz\n     */\n  }, {\n    key: \"getFrequencyResponse\",\n    value: function getFrequencyResponse() {\n      var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 128;\n      var freqValues = new Float32Array(len);\n      for (var i = 0; i < len; i++) {\n        var norm = Math.pow(i / len, 2);\n        var freq = norm * (20000 - 20) + 20;\n        freqValues[i] = freq;\n      }\n      var magValues = new Float32Array(len);\n      var phaseValues = new Float32Array(len);\n      this._filter.getFrequencyResponse(freqValues, magValues, phaseValues);\n      return magValues;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(OnePoleFilter.prototype), \"dispose\", this).call(this);\n      this.input.dispose();\n      this.output.dispose();\n      this._filter.disconnect();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        frequency: 880,\n        type: \"lowpass\"\n      });\n    }\n  }]);\n  return OnePoleFilter;\n}(ToneAudioNode);","map":{"version":3,"mappings":"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","names":["ToneAudioNode","optionsFromArguments","Gain","OnePoleFilter","getDefaults","arguments","options","_frequency","frequency","_type","type","input","context","output","_createFilter","oldFilter","_filter","freq","toFrequency","t","Math","PI","a0","sampleRate","b1","createIIRFilter","chain","setTimeout","disposed","disconnect","blockTime","fq","len","freqValues","Float32Array","i","norm","pow","magValues","phaseValues","getFrequencyResponse","dispose","Object","assign"],"sourceRoot":"","sources":["../../../../Tone/component/filter/OnePoleFilter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}