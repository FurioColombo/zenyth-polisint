{"ast":null,"code":"import { normalizeStyle as _normalizeStyle, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"lfoOscilloscope\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"canvas\", {\n    ref: \"canvas\",\n    \"class\": \"lfoOscilloscopeCanvas\",\n    style: _normalizeStyle(this.oscilloscopeCanvas)\n  }, null, 4)]);\n}","map":{"version":3,"mappings":";;EACO,SAAM;AAAiB;;uBAA5BA,oBAEM,OAFNC,UAEM,GADJC,oBAA6F;IAArFC,GAAG,EAAC,QAAQ;IAAC,SAAM,uBAAuB;IAAEC,KAAK,uBAAOC,kBAAkB","names":["_createElementBlock","_hoisted_1","_createElementVNode","ref","style","oscilloscopeCanvas"],"sourceRoot":"","sources":["C:\\Home\\Projects\\Programmazione\\WebStorm\\myZenythPolisinT\\zenyth_polisint\\src\\views\\Synth\\Modulators\\LfoVisualizer.vue"],"sourcesContent":["<template>\r\n  <div class=\"lfoOscilloscope\">\r\n    <canvas ref=\"canvas\" class=\"lfoOscilloscopeCanvas\" :style=\"this.oscilloscopeCanvas\"></canvas>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {nextTick} from \"vue\";\r\n\r\nconst qualFactor = 50\r\nconst sinValsBuffer = new Array(qualFactor).fill(0);\r\nconst triValsBuffer = new Array(qualFactor).fill(0);\r\nconst sqValsBuffer = new Array(qualFactor).fill(0);\r\nconst sawValsBuffer = new Array(qualFactor).fill(0);\r\n\r\n//todo: rmv real audio\r\n// todo: remap dept in -0.5 + 0.5 range\r\n// todo: start only when needs to be visualized\r\n\r\nexport default {\r\n  components: {},\r\n  props: [\"freq\", \"depth\", \"wave\"],\r\n  data() {\r\n    return {\r\n      timing: 10,\r\n      //freq: this.freq,\r\n      //depth: this.depth,\r\n      intervalId: \"\",\r\n      waveform: this.wave\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    //console.log(\"mounted LfoVisual\")\r\n    this.timing = 1000 / (qualFactor * this.$props.freq);\r\n    for (let i = 0; i < qualFactor; i++) {\r\n      sinValsBuffer[i] = Math.sin(Math.PI*2/qualFactor * i) * this.$props.depth;\r\n      triValsBuffer[i] = this.$props.depth - 2*Math.abs(2*(i - qualFactor/2)/qualFactor) * this.$props.depth\r\n      i >= qualFactor/2? sqValsBuffer[i] = this.$props.depth : sqValsBuffer[i] = - this.$props.depth\r\n      sawValsBuffer[i] = this.depth * (2*i/qualFactor -1)\r\n    }\r\n\r\n    switch (this.waveform) {\r\n      case 'sine':\r\n        this.oscilloscopeData = sinValsBuffer\r\n        break;\r\n      case 'triangle':\r\n        this.oscilloscopeData = triValsBuffer\r\n        break;\r\n      case 'square':\r\n        this.oscilloscopeData = sqValsBuffer;\r\n        break;\r\n      case 'sawtooth':\r\n        this.oscilloscopeData = sawValsBuffer;\r\n        break;\r\n      default:\r\n        console.log(\"ERROR - waveform not recognised\")\r\n    }\r\n\r\n    // --------- GRAPHICS INIT --------\r\n    // use the ref to get the canvas element\r\n    this.canvas = this.$refs.canvas;\r\n\r\n    // set the canvas width and height to 100%\r\n    this.canvas.width = 4*this.canvas.offsetWidth;\r\n    this.canvas.height = 4*this.canvas.offsetHeight;\r\n    // get the canvas context\r\n    this.ctx = this.canvas.getContext(\"2d\");\r\n  },\r\n\r\n  methods: {\r\n    updateParams({ freq = this.$props.freq, depth = this.$props.depth, waveform = this.waveform }) {\r\n      //this.$props.freq = freq;\r\n      //this.$props.depth = depth;\r\n      this.waveform = waveform;\r\n      //console.log(\"this.wave: \" + waveform);\r\n\r\n      this.timing = 1000 / (qualFactor * this.$props.freq);\r\n      switch (this.waveform) {\r\n        case 'sine':\r\n          this.oscilloscopeData = sinValsBuffer\r\n          break;\r\n        case 'triangle':\r\n          this.oscilloscopeData = triValsBuffer\r\n          break;\r\n        case 'square':\r\n          this.oscilloscopeData = sqValsBuffer;\r\n          break;\r\n        case 'sawtooth':\r\n          this.oscilloscopeData = sawValsBuffer;\r\n          break;\r\n        default:\r\n          console.log(\"ERROR - waveform not recognised\")\r\n      }\r\n\r\n      if(this.intervalId){ clearInterval(this.intervalId) }\r\n      this.stopOscilloscope();\r\n      //console.log(\"end - this.wave: \" + waveform)\r\n\r\n      nextTick(() => {\r\n        this.startOscilloscope()\r\n      })\r\n    },\r\n\r\n    startOscilloscope() {\r\n      this.canvas.width = 4*this.canvas.offsetWidth;\r\n      this.canvas.height = 4*this.canvas.offsetHeight;\r\n      //console.log(\"start - this.waveform: \" + this.waveform)\r\n\r\n     // console.log(\"this.timing: \" + this.timing)\r\n     // console.log(\"avviando oscilloscope con timer \" + this.timing)\r\n      this.intervalId = setInterval(() => {\r\n        let t = this.oscilloscopeData.shift();\r\n        this.oscilloscopeData.push(t);\r\n        this.draw(this.oscilloscopeData);\r\n      }, this.timing);\r\n      //console.log(\"this.timing:  \" + this.intervalId);\r\n    },\r\n\r\n    stopOscilloscope(){\r\n      if(this.intervalId){ clearInterval(this.intervalId) }\r\n    },\r\n\r\n    draw(data) {\r\n      // clear the canvas\r\n      //console.log(\"drawing\")\r\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n      let x, y, y_next;\r\n\r\n      // draw the data on the canvas\r\n      // set the line color\r\n      this.ctx.strokeStyle = \"black\";\r\n      // set the line width\r\n      this.ctx.lineWidth = 2;\r\n      this.ctx.beginPath();\r\n\r\n      y_next = (this.canvas.height / 2) * (1 - data[0]).toFixed(3);\r\n      // loop through the data and plot it on the canvas\r\n      for (let i = 1; i < data.length; i++) {\r\n        y = y_next;\r\n        // calculate the x and y position of the point\r\n        x = i * (this.canvas.width / data.length).toFixed(3);\r\n        y_next = (this.canvas.height / 2) * (1 - data[i]).toFixed(3);\r\n        // move to the x and y position\r\n        this.ctx.moveTo(x, y);\r\n        // draw a line to the next point\r\n        this.ctx.lineTo(x + this.canvas.width / data.length, y_next );\r\n        // console.log(x, y)\r\n      }\r\n      // draw the line\r\n      this.ctx.stroke();\r\n      this.ctx.moveTo(0, 0);\r\n    },\r\n\r\n    beforeDestroy() {\r\n      if (this.oscilloscope) {\r\n        this.oscilloscope.disconnect();\r\n        this.oscilloscope.dispose();\r\n      }\r\n    },\r\n  }, \r\n  computed: {\r\n    oscilloscopeCanvas(){\r\n      return {\r\n        background: this.colors.purple.glow\r\n      } \r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.lfoOscilloscope {\r\n  margin: 0.4vw;\r\n  margin-right: 0.1vw;;\r\n  height: 90%;\r\n  width: 90%;\r\n  border: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n  position: relative;\r\n}\r\n\r\n.lfoOscilloscopeCanvas {\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  border-radius: 0.2vw;\r\n  border: 0.06vw solid #334030;\r\n  box-sizing: border-box;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}