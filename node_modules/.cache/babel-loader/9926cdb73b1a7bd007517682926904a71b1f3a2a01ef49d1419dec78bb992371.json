{"ast":null,"code":"import _classCallCheck from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport { gainToDb } from \"../../core/type/Conversions\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase } from \"./MeterBase\";\nimport { warn } from \"../../core/util/Debug\";\nimport { Analyser } from \"./Analyser\";\n/**\n * Meter gets the [RMS](https://en.wikipedia.org/wiki/Root_mean_square)\n * of an input signal. It can also get the raw value of the input signal.\n *\n * @example\n * const meter = new Tone.Meter();\n * const mic = new Tone.UserMedia();\n * mic.open();\n * // connect mic to the meter\n * mic.connect(meter);\n * // the current level of the mic\n * setInterval(() => console.log(meter.getValue()), 100);\n * @category Component\n */\nexport var Meter = /*#__PURE__*/function (_MeterBase) {\n  _inherits(Meter, _MeterBase);\n  var _super = _createSuper(Meter);\n  function Meter() {\n    var _this;\n    _classCallCheck(this, Meter);\n    _this = _super.call(this, optionsFromArguments(Meter.getDefaults(), arguments, [\"smoothing\"]));\n    _this.name = \"Meter\";\n    /**\n     * The previous frame's value\n     */\n    _this._rms = 0;\n    var options = optionsFromArguments(Meter.getDefaults(), arguments, [\"smoothing\"]);\n    _this.input = _this.output = _this._analyser = new Analyser({\n      context: _this.context,\n      size: 256,\n      type: \"waveform\",\n      channels: options.channels\n    });\n    _this.smoothing = options.smoothing, _this.normalRange = options.normalRange;\n    return _this;\n  }\n  _createClass(Meter, [{\n    key: \"getLevel\",\n    value:\n    /**\n     * Use [[getValue]] instead. For the previous getValue behavior, use DCMeter.\n     * @deprecated\n     */\n    function getLevel() {\n      warn(\"'getLevel' has been changed to 'getValue'\");\n      return this.getValue();\n    }\n    /**\n     * Get the current value of the incoming signal.\n     * Output is in decibels when [[normalRange]] is `false`.\n     * If [[channels]] = 1, then the output is a single number\n     * representing the value of the input signal. When [[channels]] > 1,\n     * then each channel is returned as a value in a number array.\n     */\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      var _this2 = this;\n      var aValues = this._analyser.getValue();\n      var channelValues = this.channels === 1 ? [aValues] : aValues;\n      var vals = channelValues.map(function (values) {\n        var totalSquared = values.reduce(function (total, current) {\n          return total + current * current;\n        }, 0);\n        var rms = Math.sqrt(totalSquared / values.length);\n        // the rms can only fall at the rate of the smoothing\n        // but can jump up instantly\n        _this2._rms = Math.max(rms, _this2._rms * _this2.smoothing);\n        return _this2.normalRange ? _this2._rms : gainToDb(_this2._rms);\n      });\n      if (this.channels === 1) {\n        return vals[0];\n      } else {\n        return vals;\n      }\n    }\n    /**\n     * The number of channels of analysis.\n     */\n  }, {\n    key: \"channels\",\n    get: function get() {\n      return this._analyser.channels;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Meter.prototype), \"dispose\", this).call(this);\n      this._analyser.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(MeterBase.getDefaults(), {\n        smoothing: 0.8,\n        normalRange: false,\n        channels: 1\n      });\n    }\n  }]);\n  return Meter;\n}(MeterBase);","map":{"version":3,"mappings":";;;;;;;;;;AAAA,SAASA,QAAQ,QAAQ,6BAA6B;AAEtD,SAASC,oBAAoB,QAAQ,0BAA0B;AAC/D,SAASC,SAAS,QAA0B,aAAa;AACzD,SAASC,IAAI,QAAQ,uBAAuB;AAC5C,SAASC,QAAQ,QAAQ,YAAY;AAQrC;;;;;;;;;;;;;;AAcA,WAAaC,KAAM;EAAA;EAAA;EA0BlB;IAAA;IAAA;IACC,0BAAMJ,oBAAoB,CAACI,KAAK,CAACC,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,WAAW,CAAC,CAAC;IAzBjE,UAAI,GAAW,OAAO;IAc/B;;;IAGQ,UAAI,GAAG,CAAC;IASf,IAAMC,OAAO,GAAGP,oBAAoB,CAACI,KAAK,CAACC,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,WAAW,CAAC,CAAC;IAEnF,MAAKE,KAAK,GAAG,MAAKC,MAAM,GAAG,MAAKC,SAAS,GAAG,IAAIP,QAAQ,CAAC;MACxDQ,OAAO,EAAE,MAAKA,OAAO;MACrBC,IAAI,EAAE,GAAG;MACTC,IAAI,EAAE,UAAU;MAChBC,QAAQ,EAAEP,OAAO,CAACO;KAClB,CAAC;IAEF,MAAKC,SAAS,GAAGR,OAAO,CAACQ,SAAS,EAClC,MAAKC,WAAW,GAAGT,OAAO,CAACS,WAAW;IAAC;EACxC;EAAC;IAAA;IAAA;IAUD;;;;IAIA,oBAAQ;MACPd,IAAI,CAAC,2CAA2C,CAAC;MACjD,OAAO,IAAI,CAACe,QAAQ,EAAE;IACvB;IAEA;;;;;;;EAAA;IAAA;IAAA,OAOA,oBAAQ;MAAA;MACP,IAAMC,OAAO,GAAG,IAAI,CAACR,SAAS,CAACO,QAAQ,EAAE;MACzC,IAAME,aAAa,GAAG,IAAI,CAACL,QAAQ,KAAK,CAAC,GAAG,CAACI,OAAuB,CAAC,GAAGA,OAAyB;MACjG,IAAME,IAAI,GAAGD,aAAa,CAACE,GAAG,CAAC,gBAAM,EAAG;QACvC,IAAMC,YAAY,GAAGC,MAAM,CAACC,MAAM,CAAC,UAACC,KAAK,EAAEC,OAAO;UAAA,OAAKD,KAAK,GAAGC,OAAO,GAAGA,OAAO;QAAA,GAAE,CAAC,CAAC;QACpF,IAAMC,GAAG,GAAGC,IAAI,CAACC,IAAI,CAACP,YAAY,GAAGC,MAAM,CAACO,MAAM,CAAC;QACnD;QACA;QACA,MAAI,CAACC,IAAI,GAAGH,IAAI,CAACI,GAAG,CAACL,GAAG,EAAE,MAAI,CAACI,IAAI,GAAG,MAAI,CAAChB,SAAS,CAAC;QACrD,OAAO,MAAI,CAACC,WAAW,GAAG,MAAI,CAACe,IAAI,GAAGhC,QAAQ,CAAC,MAAI,CAACgC,IAAI,CAAC;MAC1D,CAAC,CAAC;MACF,IAAI,IAAI,CAACjB,QAAQ,KAAK,CAAC,EAAE;QACxB,OAAOM,IAAI,CAAC,CAAC,CAAC;OACd,MAAM;QACN,OAAOA,IAAI;;IAEb;IAEA;;;EAAA;IAAA;IAAA,KAGA,eAAY;MACX,OAAO,IAAI,CAACV,SAAS,CAACI,QAAQ;IAC/B;EAAC;IAAA;IAAA,OAED,mBAAO;MACN;MACA,IAAI,CAACJ,SAAS,CAACuB,OAAO,EAAE;MACxB,OAAO,IAAI;IACZ;EAAC;IAAA;IAAA,OArDD,uBAAkB;MACjB,OAAOC,MAAM,CAACC,MAAM,CAAClC,SAAS,CAACI,WAAW,EAAE,EAAE;QAC7CU,SAAS,EAAE,GAAG;QACdC,WAAW,EAAE,KAAK;QAClBF,QAAQ,EAAE;OACV,CAAC;IACH;EAAC;EAAA;AAAA,EA/CyBb,SAAuB","names":["gainToDb","optionsFromArguments","MeterBase","warn","Analyser","Meter","getDefaults","arguments","options","input","output","_analyser","context","size","type","channels","smoothing","normalRange","getValue","aValues","channelValues","vals","map","totalSquared","values","reduce","total","current","rms","Math","sqrt","length","_rms","max","dispose","Object","assign"],"sourceRoot":"","sources":["../../../../Tone/component/analysis/Meter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}