{"ast":null,"code":"import { gainToDb } from \"../../core/type/Conversions\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase } from \"./MeterBase\";\nimport { warn } from \"../../core/util/Debug\";\nimport { Analyser } from \"./Analyser\";\n/**\n * Meter gets the [RMS](https://en.wikipedia.org/wiki/Root_mean_square)\n * of an input signal. It can also get the raw value of the input signal.\n *\n * @example\n * const meter = new Tone.Meter();\n * const mic = new Tone.UserMedia();\n * mic.open();\n * // connect mic to the meter\n * mic.connect(meter);\n * // the current level of the mic\n * setInterval(() => console.log(meter.getValue()), 100);\n * @category Component\n */\nexport class Meter extends MeterBase {\n  constructor() {\n    super(optionsFromArguments(Meter.getDefaults(), arguments, [\"smoothing\"]));\n    this.name = \"Meter\";\n    /**\n     * The previous frame's value\n     */\n    this._rms = 0;\n    const options = optionsFromArguments(Meter.getDefaults(), arguments, [\"smoothing\"]);\n    this.input = this.output = this._analyser = new Analyser({\n      context: this.context,\n      size: 256,\n      type: \"waveform\",\n      channels: options.channels\n    });\n    this.smoothing = options.smoothing, this.normalRange = options.normalRange;\n  }\n  static getDefaults() {\n    return Object.assign(MeterBase.getDefaults(), {\n      smoothing: 0.8,\n      normalRange: false,\n      channels: 1\n    });\n  }\n  /**\n   * Use [[getValue]] instead. For the previous getValue behavior, use DCMeter.\n   * @deprecated\n   */\n  getLevel() {\n    warn(\"'getLevel' has been changed to 'getValue'\");\n    return this.getValue();\n  }\n  /**\n   * Get the current value of the incoming signal.\n   * Output is in decibels when [[normalRange]] is `false`.\n   * If [[channels]] = 1, then the output is a single number\n   * representing the value of the input signal. When [[channels]] > 1,\n   * then each channel is returned as a value in a number array.\n   */\n  getValue() {\n    const aValues = this._analyser.getValue();\n    const channelValues = this.channels === 1 ? [aValues] : aValues;\n    const vals = channelValues.map(values => {\n      const totalSquared = values.reduce((total, current) => total + current * current, 0);\n      const rms = Math.sqrt(totalSquared / values.length);\n      // the rms can only fall at the rate of the smoothing\n      // but can jump up instantly\n      this._rms = Math.max(rms, this._rms * this.smoothing);\n      return this.normalRange ? this._rms : gainToDb(this._rms);\n    });\n    if (this.channels === 1) {\n      return vals[0];\n    } else {\n      return vals;\n    }\n  }\n  /**\n   * The number of channels of analysis.\n   */\n  get channels() {\n    return this._analyser.channels;\n  }\n  dispose() {\n    super.dispose();\n    this._analyser.dispose();\n    return this;\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,QAAQ,QAAQ,6BAA6B;AAEtD,SAASC,oBAAoB,QAAQ,0BAA0B;AAC/D,SAASC,SAAS,QAA0B,aAAa;AACzD,SAASC,IAAI,QAAQ,uBAAuB;AAC5C,SAASC,QAAQ,QAAQ,YAAY;AAQrC;;;;;;;;;;;;;;AAcA,OAAM,MAAOC,KAAM,SAAQH,SAAuB;EA0BjDI;IACC,KAAK,CAACL,oBAAoB,CAACI,KAAK,CAACE,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC;IAzBlE,SAAI,GAAW,OAAO;IAc/B;;;IAGQ,SAAI,GAAG,CAAC;IASf,MAAMC,OAAO,GAAGR,oBAAoB,CAACI,KAAK,CAACE,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,WAAW,CAAC,CAAC;IAEnF,IAAI,CAACE,KAAK,GAAG,IAAI,CAACC,MAAM,GAAG,IAAI,CAACC,SAAS,GAAG,IAAIR,QAAQ,CAAC;MACxDS,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBC,IAAI,EAAE,GAAG;MACTC,IAAI,EAAE,UAAU;MAChBC,QAAQ,EAAEP,OAAO,CAACO;KAClB,CAAC;IAEF,IAAI,CAACC,SAAS,GAAGR,OAAO,CAACQ,SAAS,EAClC,IAAI,CAACC,WAAW,GAAGT,OAAO,CAACS,WAAW;EACvC;EAEA,OAAOX,WAAW;IACjB,OAAOY,MAAM,CAACC,MAAM,CAAClB,SAAS,CAACK,WAAW,EAAE,EAAE;MAC7CU,SAAS,EAAE,GAAG;MACdC,WAAW,EAAE,KAAK;MAClBF,QAAQ,EAAE;KACV,CAAC;EACH;EAEA;;;;EAIAK,QAAQ;IACPlB,IAAI,CAAC,2CAA2C,CAAC;IACjD,OAAO,IAAI,CAACmB,QAAQ,EAAE;EACvB;EAEA;;;;;;;EAOAA,QAAQ;IACP,MAAMC,OAAO,GAAG,IAAI,CAACX,SAAS,CAACU,QAAQ,EAAE;IACzC,MAAME,aAAa,GAAG,IAAI,CAACR,QAAQ,KAAK,CAAC,GAAG,CAACO,OAAuB,CAAC,GAAGA,OAAyB;IACjG,MAAME,IAAI,GAAGD,aAAa,CAACE,GAAG,CAACC,MAAM,IAAG;MACvC,MAAMC,YAAY,GAAGD,MAAM,CAACE,MAAM,CAAC,CAACC,KAAK,EAAEC,OAAO,KAAKD,KAAK,GAAGC,OAAO,GAAGA,OAAO,EAAE,CAAC,CAAC;MACpF,MAAMC,GAAG,GAAGC,IAAI,CAACC,IAAI,CAACN,YAAY,GAAGD,MAAM,CAACQ,MAAM,CAAC;MACnD;MACA;MACA,IAAI,CAACC,IAAI,GAAGH,IAAI,CAACI,GAAG,CAACL,GAAG,EAAE,IAAI,CAACI,IAAI,GAAG,IAAI,CAACnB,SAAS,CAAC;MACrD,OAAO,IAAI,CAACC,WAAW,GAAG,IAAI,CAACkB,IAAI,GAAGpC,QAAQ,CAAC,IAAI,CAACoC,IAAI,CAAC;IAC1D,CAAC,CAAC;IACF,IAAI,IAAI,CAACpB,QAAQ,KAAK,CAAC,EAAE;MACxB,OAAOS,IAAI,CAAC,CAAC,CAAC;KACd,MAAM;MACN,OAAOA,IAAI;;EAEb;EAEA;;;EAGA,IAAIT,QAAQ;IACX,OAAO,IAAI,CAACJ,SAAS,CAACI,QAAQ;EAC/B;EAEAsB,OAAO;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAAC1B,SAAS,CAAC0B,OAAO,EAAE;IACxB,OAAO,IAAI;EACZ","names":["gainToDb","optionsFromArguments","MeterBase","warn","Analyser","Meter","constructor","getDefaults","arguments","options","input","output","_analyser","context","size","type","channels","smoothing","normalRange","Object","assign","getLevel","getValue","aValues","channelValues","vals","map","values","totalSquared","reduce","total","current","rms","Math","sqrt","length","_rms","max","dispose"],"sourceRoot":"","sources":["../../../../Tone/component/analysis/Meter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}