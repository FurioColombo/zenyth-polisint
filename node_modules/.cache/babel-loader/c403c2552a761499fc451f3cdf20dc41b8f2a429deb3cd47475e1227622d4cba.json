{"ast":null,"code":"import \"core-js/modules/web.timers.js\";\nimport * as Tone from \"tone\";\nexport default {\n  data: function data() {\n    return {\n      oscilloscopeData: [],\n      timing: 10\n    };\n  },\n  mounted: function mounted() {\n    this.oscilloscope = new Tone.Waveform();\n    Tone.getDestination().connect(this.oscilloscope);\n    this.startOscilloscope();\n\n    // use the ref to get the canvas element\n    this.canvas = this.$refs.canvas;\n\n    // set the canvas width and height to 100%\n    this.canvas.width = 4 * this.canvas.offsetWidth;\n    this.canvas.height = 4 * this.canvas.offsetHeight;\n\n    // get the canvas context\n    this.ctx = this.canvas.getContext(\"2d\");\n  },\n  methods: {\n    setTiming: function setTiming(timing) {\n      this.timing = timing;\n      clearInterval(this.intervalId);\n      this.startOscilloscope();\n    },\n    startOscilloscope: function startOscilloscope() {\n      var _this = this;\n      //console.log(\"avviando oscilloscope con timer \"+this.timing)\n      this.intervalId = setInterval(function () {\n        _this.updateOscilloscopeData();\n      }, this.timing);\n    },\n    draw: function draw(data) {\n      // clear the canvas\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n      // draw the data on the canvas\n      // set the line color\n      this.ctx.strokeStyle = \"#658060\";\n      // set the line width\n      this.ctx.lineWidth = 6;\n      this.ctx.beginPath();\n\n      // loop through the data and plot it on the canvas\n      for (var i = 0; i < data.length; i++) {\n        // calculate the x and y position of the point\n        var x = i * (this.canvas.width / data.length);\n        var y = this.canvas.height / 2 * (1 - data[i]);\n\n        // move to the x and y position\n        this.ctx.moveTo(x, y);\n        // draw a line to the next point\n        this.ctx.lineTo(x + this.canvas.width / data.length, y);\n      }\n      // draw the line\n      this.ctx.stroke();\n      this.ctx.moveTo(0, 0);\n    },\n    updateOscilloscopeData: function updateOscilloscopeData() {\n      this.oscilloscopeData = this.oscilloscope.getValue();\n      this.draw(this.oscilloscopeData);\n      //console.log(this.oscilloscopeData);\n    }\n  },\n\n  computed: {\n    oscilloscopeCanvas: function oscilloscopeCanvas() {\n      return {\n        background: this.colors.green.glow\n      };\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.oscilloscope.dispose();\n  }\n};","map":{"version":3,"mappings":";AAOA,OAAO,KAAKA,IAAG,MAAO,MAAM;AAE5B,eAAe;EACbC,IAAI,kBAAG;IACL,OAAO;MACLC,gBAAgB,EAAE,EAAE;MACpBC,MAAM,EAAE;IACV,CAAC;EACH,CAAC;EAEDC,OAAO,qBAAG;IACR,IAAI,CAACC,YAAW,GAAI,IAAIL,IAAI,CAACM,QAAQ,EAAE;IACvCN,IAAI,CAACO,cAAc,EAAE,CAACC,OAAO,CAAC,IAAI,CAACH,YAAY,CAAC;IAChD,IAAI,CAACI,iBAAiB,EAAE;;IAExB;IACA,IAAI,CAACC,MAAK,GAAI,IAAI,CAACC,KAAK,CAACD,MAAM;;IAE/B;IACA,IAAI,CAACA,MAAM,CAACE,KAAI,GAAI,CAAC,GAAC,IAAI,CAACF,MAAM,CAACG,WAAW;IAC7C,IAAI,CAACH,MAAM,CAACI,MAAK,GAAI,CAAC,GAAC,IAAI,CAACJ,MAAM,CAACK,YAAY;;IAE/C;IACA,IAAI,CAACC,GAAE,GAAI,IAAI,CAACN,MAAM,CAACO,UAAU,CAAC,IAAI,CAAC;EACzC,CAAC;EACDC,OAAO,EAAE;IACPC,SAAS,qBAAChB,MAAM,EAAE;MAChB,IAAI,CAACA,MAAK,GAAIA,MAAM;MACpBiB,aAAa,CAAC,IAAI,CAACC,UAAU,CAAC;MAC9B,IAAI,CAACZ,iBAAiB,EAAE;IAC1B,CAAC;IACDA,iBAAiB,+BAAG;MAAA;MAChB;MACF,IAAI,CAACY,UAAS,GAAIC,WAAW,CAAC,YAAM;QAClC,KAAI,CAACC,sBAAsB,EAAE;MAC/B,CAAC,EAAE,IAAI,CAACpB,MAAM,CAAC;IACjB,CAAC;IACDqB,IAAI,gBAACvB,IAAI,EAAE;MACT;MACA,IAAI,CAACe,GAAG,CAACS,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAACf,MAAM,CAACE,KAAK,EAAE,IAAI,CAACF,MAAM,CAACI,MAAM,CAAC;;MAE/D;MACA;MACA,IAAI,CAACE,GAAG,CAACU,WAAU,GAAI,SAAS;MAChC;MACA,IAAI,CAACV,GAAG,CAACW,SAAQ,GAAI,CAAC;MACtB,IAAI,CAACX,GAAG,CAACY,SAAS,EAAE;;MAEpB;MACA,KAAK,IAAIC,IAAI,CAAC,EAAEA,IAAI5B,IAAI,CAAC6B,MAAM,EAAED,CAAC,EAAE,EAAE;QACpC;QACA,IAAIE,IAAIF,KAAK,IAAI,CAACnB,MAAM,CAACE,KAAI,GAAIX,IAAI,CAAC6B,MAAM,CAAC;QAC7C,IAAIE,IAAK,IAAI,CAACtB,MAAM,CAACI,MAAK,GAAI,CAAC,IAAK,IAAIb,IAAI,CAAC4B,CAAC,CAAC,CAAC;;QAEhD;QACA,IAAI,CAACb,GAAG,CAACiB,MAAM,CAACF,CAAC,EAAEC,CAAC,CAAC;QACrB;QACA,IAAI,CAAChB,GAAG,CAACkB,MAAM,CAACH,IAAI,IAAI,CAACrB,MAAM,CAACE,KAAI,GAAIX,IAAI,CAAC6B,MAAM,EAAEE,CAAC,CAAC;MACzD;MACA;MACA,IAAI,CAAChB,GAAG,CAACmB,MAAM,EAAE;MACjB,IAAI,CAACnB,GAAG,CAACiB,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;IACvB,CAAC;IACDV,sBAAsB,oCAAG;MACvB,IAAI,CAACrB,gBAAe,GAAI,IAAI,CAACG,YAAY,CAAC+B,QAAQ,EAAE;MACpD,IAAI,CAACZ,IAAI,CAAC,IAAI,CAACtB,gBAAgB,CAAC;MAChC;IACF;EACF,CAAC;;EACDmC,QAAQ,EAAE;IACRC,kBAAkB,gCAAE;MAClB,OAAM;QACJC,UAAU,EAAE,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC;MAChC;IACF;EACF,CAAC;EACDC,aAAa,2BAAG;IACd,IAAI,CAACtC,YAAY,CAACuC,OAAO,EAAE;EAC7B;AACF,CAAC","names":["Tone","data","oscilloscopeData","timing","mounted","oscilloscope","Waveform","getDestination","connect","startOscilloscope","canvas","$refs","width","offsetWidth","height","offsetHeight","ctx","getContext","methods","setTiming","clearInterval","intervalId","setInterval","updateOscilloscopeData","draw","clearRect","strokeStyle","lineWidth","beginPath","i","length","x","y","moveTo","lineTo","stroke","getValue","computed","oscilloscopeCanvas","background","colors","green","glow","beforeDestroy","dispose"],"sourceRoot":"","sources":["C:\\Home\\Projects\\Programmazione\\WebStorm\\myZenythPolisinT\\zenyth_polisint\\src\\views\\Synth\\Tools\\Oscilloscope.vue"],"sourcesContent":["<template>\r\n  <div class=\"oscilloscope\">\r\n    <canvas ref=\"canvas\" class=\"oscilloscopeCanvas\" :style=\"this.oscilloscopeCanvas\"></canvas>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as Tone from \"tone\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      oscilloscopeData: [],\r\n      timing: 10,\r\n    };\r\n  },\r\n\r\n  mounted() {\r\n    this.oscilloscope = new Tone.Waveform();\r\n    Tone.getDestination().connect(this.oscilloscope);\r\n    this.startOscilloscope();\r\n\r\n    // use the ref to get the canvas element\r\n    this.canvas = this.$refs.canvas;\r\n\r\n    // set the canvas width and height to 100%\r\n    this.canvas.width = 4*this.canvas.offsetWidth;\r\n    this.canvas.height = 4*this.canvas.offsetHeight;\r\n\r\n    // get the canvas context\r\n    this.ctx = this.canvas.getContext(\"2d\");\r\n  },\r\n  methods: {\r\n    setTiming(timing) {\r\n      this.timing = timing;\r\n      clearInterval(this.intervalId);\r\n      this.startOscilloscope();\r\n    },\r\n    startOscilloscope() {\r\n        //console.log(\"avviando oscilloscope con timer \"+this.timing)\r\n      this.intervalId = setInterval(() => {\r\n        this.updateOscilloscopeData();\r\n      }, this.timing);\r\n    },\r\n    draw(data) {\r\n      // clear the canvas\r\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n      // draw the data on the canvas\r\n      // set the line color\r\n      this.ctx.strokeStyle = \"#658060\";\r\n      // set the line width\r\n      this.ctx.lineWidth = 6;\r\n      this.ctx.beginPath();\r\n\r\n      // loop through the data and plot it on the canvas\r\n      for (let i = 0; i < data.length; i++) {\r\n        // calculate the x and y position of the point\r\n        let x = i * (this.canvas.width / data.length);\r\n        let y = (this.canvas.height / 2) * (1 - data[i]);\r\n\r\n        // move to the x and y position\r\n        this.ctx.moveTo(x, y);\r\n        // draw a line to the next point\r\n        this.ctx.lineTo(x + this.canvas.width / data.length, y);\r\n      }\r\n      // draw the line\r\n      this.ctx.stroke();\r\n      this.ctx.moveTo(0, 0);\r\n    },\r\n    updateOscilloscopeData() {\r\n      this.oscilloscopeData = this.oscilloscope.getValue();\r\n      this.draw(this.oscilloscopeData);\r\n      //console.log(this.oscilloscopeData);\r\n    },\r\n  },\r\n  computed: {\r\n    oscilloscopeCanvas(){\r\n      return{\r\n        background: this.colors.green.glow,\r\n      }\r\n    }\r\n  },\r\n  beforeDestroy() {\r\n    this.oscilloscope.dispose();\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n.oscilloscope {\r\n  grid-row: 2;\r\n  margin: 0.15vw 0.3vw 0.3vw;\r\n  box-sizing: border-box;\r\n  \r\n}\r\n.oscilloscopeCanvas {\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: #caffbf;\r\n  border-radius: 0.2vw;\r\n  border: 0.1vw solid #334030;\r\n  box-sizing: border-box;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}