{"ast":null,"code":"import _classCallCheck from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { MultibandSplit } from \"../channel/MultibandSplit\";\n/**\n * EQ3 provides 3 equalizer bins: Low/Mid/High.\n * @category Component\n */\nexport var EQ3 = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(EQ3, _ToneAudioNode);\n  var _super = _createSuper(EQ3);\n  function EQ3() {\n    var _this;\n    _classCallCheck(this, EQ3);\n    _this = _super.call(this, optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]));\n    _this.name = \"EQ3\";\n    /**\n     * the output\n     */\n    _this.output = new Gain({\n      context: _this.context\n    });\n    _this._internalChannels = [];\n    var options = optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]);\n    _this.input = _this._multibandSplit = new MultibandSplit({\n      context: _this.context,\n      highFrequency: options.highFrequency,\n      lowFrequency: options.lowFrequency\n    });\n    _this._lowGain = new Gain({\n      context: _this.context,\n      gain: options.low,\n      units: \"decibels\"\n    });\n    _this._midGain = new Gain({\n      context: _this.context,\n      gain: options.mid,\n      units: \"decibels\"\n    });\n    _this._highGain = new Gain({\n      context: _this.context,\n      gain: options.high,\n      units: \"decibels\"\n    });\n    _this.low = _this._lowGain.gain;\n    _this.mid = _this._midGain.gain;\n    _this.high = _this._highGain.gain;\n    _this.Q = _this._multibandSplit.Q;\n    _this.lowFrequency = _this._multibandSplit.lowFrequency;\n    _this.highFrequency = _this._multibandSplit.highFrequency;\n    // the frequency bands\n    _this._multibandSplit.low.chain(_this._lowGain, _this.output);\n    _this._multibandSplit.mid.chain(_this._midGain, _this.output);\n    _this._multibandSplit.high.chain(_this._highGain, _this.output);\n    readOnly(_assertThisInitialized(_this), [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n    _this._internalChannels = [_this._multibandSplit];\n    return _this;\n  }\n  _createClass(EQ3, [{\n    key: \"dispose\",\n    value:\n    /**\n     * Clean up.\n     */\n    function dispose() {\n      _get(_getPrototypeOf(EQ3.prototype), \"dispose\", this).call(this);\n      writable(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n      this._multibandSplit.dispose();\n      this.lowFrequency.dispose();\n      this.highFrequency.dispose();\n      this._lowGain.dispose();\n      this._midGain.dispose();\n      this._highGain.dispose();\n      this.low.dispose();\n      this.mid.dispose();\n      this.high.dispose();\n      this.Q.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        high: 0,\n        highFrequency: 2500,\n        low: 0,\n        lowFrequency: 400,\n        mid: 0\n      });\n    }\n  }]);\n  return EQ3;\n}(ToneAudioNode);","map":{"version":3,"mappings":"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","names":["Gain","ToneAudioNode","optionsFromArguments","readOnly","writable","MultibandSplit","EQ3","getDefaults","arguments","context","options","input","_multibandSplit","highFrequency","lowFrequency","_lowGain","gain","low","units","_midGain","mid","_highGain","high","Q","chain","output","_internalChannels","dispose","Object","assign"],"sourceRoot":"","sources":["../../../../Tone/component/filter/EQ3.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}