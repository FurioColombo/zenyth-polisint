{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { __decorate } from \"tslib\";\nimport { ToneAudioBuffers } from \"../core/context/ToneAudioBuffers\";\nimport { ftomf, intervalToFrequencyRatio } from \"../core/type/Conversions\";\nimport { FrequencyClass } from \"../core/type/Frequency\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { isArray, isNote, isNumber } from \"../core/util/TypeCheck\";\nimport { Instrument } from \"../instrument/Instrument\";\nimport { ToneBufferSource } from \"../source/buffer/ToneBufferSource\";\nimport { timeRange } from \"../core/util/Decorator\";\nimport { assert } from \"../core/util/Debug\";\n/**\n * Pass in an object which maps the note's pitch or midi value to the url,\n * then you can trigger the attack and release of that note like other instruments.\n * By automatically repitching the samples, it is possible to play pitches which\n * were not explicitly included which can save loading time.\n *\n * For sample or buffer playback where repitching is not necessary,\n * use [[Player]].\n * @example\n * const sampler = new Tone.Sampler({\n * \turls: {\n * \t\tA1: \"A1.mp3\",\n * \t\tA2: \"A2.mp3\",\n * \t},\n * \tbaseUrl: \"https://tonejs.github.io/audio/casio/\",\n * \tonload: () => {\n * \t\tsampler.triggerAttackRelease([\"C1\", \"E1\", \"G1\", \"B1\"], 0.5);\n * \t}\n * }).toDestination();\n * @category Instrument\n */\nexport class Sampler extends Instrument {\n  constructor() {\n    super(optionsFromArguments(Sampler.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\"));\n    this.name = \"Sampler\";\n    /**\n     * The object of all currently playing BufferSources\n     */\n    this._activeSources = new Map();\n    const options = optionsFromArguments(Sampler.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\");\n    const urlMap = {};\n    Object.keys(options.urls).forEach(note => {\n      const noteNumber = parseInt(note, 10);\n      assert(isNote(note) || isNumber(noteNumber) && isFinite(noteNumber), `url key is neither a note or midi pitch: ${note}`);\n      if (isNote(note)) {\n        // convert the note name to MIDI\n        const mid = new FrequencyClass(this.context, note).toMidi();\n        urlMap[mid] = options.urls[note];\n      } else if (isNumber(noteNumber) && isFinite(noteNumber)) {\n        // otherwise if it's numbers assume it's midi\n        urlMap[noteNumber] = options.urls[noteNumber];\n      }\n    });\n    this._buffers = new ToneAudioBuffers({\n      urls: urlMap,\n      onload: options.onload,\n      baseUrl: options.baseUrl,\n      onerror: options.onerror\n    });\n    this.attack = options.attack;\n    this.release = options.release;\n    this.curve = options.curve;\n    // invoke the callback if it's already loaded\n    if (this._buffers.loaded) {\n      // invoke onload deferred\n      Promise.resolve().then(options.onload);\n    }\n  }\n  static getDefaults() {\n    return Object.assign(Instrument.getDefaults(), {\n      attack: 0,\n      baseUrl: \"\",\n      curve: \"exponential\",\n      onload: noOp,\n      onerror: noOp,\n      release: 0.1,\n      urls: {}\n    });\n  }\n  /**\n   * Returns the difference in steps between the given midi note at the closets sample.\n   */\n  _findClosest(midi) {\n    // searches within 8 octaves of the given midi note\n    const MAX_INTERVAL = 96;\n    let interval = 0;\n    while (interval < MAX_INTERVAL) {\n      // check above and below\n      if (this._buffers.has(midi + interval)) {\n        return -interval;\n      } else if (this._buffers.has(midi - interval)) {\n        return interval;\n      }\n      interval++;\n    }\n    throw new Error(`No available buffers for note: ${midi}`);\n  }\n  /**\n   * @param  notes\tThe note to play, or an array of notes.\n   * @param  time     When to play the note\n   * @param  velocity The velocity to play the sample back.\n   */\n  triggerAttack(notes, time, velocity = 1) {\n    this.log(\"triggerAttack\", notes, time, velocity);\n    if (!Array.isArray(notes)) {\n      notes = [notes];\n    }\n    notes.forEach(note => {\n      const midiFloat = ftomf(new FrequencyClass(this.context, note).toFrequency());\n      const midi = Math.round(midiFloat);\n      const remainder = midiFloat - midi;\n      // find the closest note pitch\n      const difference = this._findClosest(midi);\n      const closestNote = midi - difference;\n      const buffer = this._buffers.get(closestNote);\n      const playbackRate = intervalToFrequencyRatio(difference + remainder);\n      // play that note\n      const source = new ToneBufferSource({\n        url: buffer,\n        context: this.context,\n        curve: this.curve,\n        fadeIn: this.attack,\n        fadeOut: this.release,\n        playbackRate\n      }).connect(this.output);\n      source.start(time, 0, buffer.duration / playbackRate, velocity);\n      // add it to the active sources\n      if (!isArray(this._activeSources.get(midi))) {\n        this._activeSources.set(midi, []);\n      }\n      this._activeSources.get(midi).push(source);\n      // remove it when it's done\n      source.onended = () => {\n        if (this._activeSources && this._activeSources.has(midi)) {\n          const sources = this._activeSources.get(midi);\n          const index = sources.indexOf(source);\n          if (index !== -1) {\n            sources.splice(index, 1);\n          }\n        }\n      };\n    });\n    return this;\n  }\n  /**\n   * @param  notes\tThe note to release, or an array of notes.\n   * @param  time     \tWhen to release the note.\n   */\n  triggerRelease(notes, time) {\n    this.log(\"triggerRelease\", notes, time);\n    if (!Array.isArray(notes)) {\n      notes = [notes];\n    }\n    notes.forEach(note => {\n      const midi = new FrequencyClass(this.context, note).toMidi();\n      // find the note\n      if (this._activeSources.has(midi) && this._activeSources.get(midi).length) {\n        const sources = this._activeSources.get(midi);\n        time = this.toSeconds(time);\n        sources.forEach(source => {\n          source.stop(time);\n        });\n        this._activeSources.set(midi, []);\n      }\n    });\n    return this;\n  }\n  /**\n   * Release all currently active notes.\n   * @param  time     \tWhen to release the notes.\n   */\n  releaseAll(time) {\n    const computedTime = this.toSeconds(time);\n    this._activeSources.forEach(sources => {\n      while (sources.length) {\n        const source = sources.shift();\n        source.stop(computedTime);\n      }\n    });\n    return this;\n  }\n  sync() {\n    if (this._syncState()) {\n      this._syncMethod(\"triggerAttack\", 1);\n      this._syncMethod(\"triggerRelease\", 1);\n    }\n    return this;\n  }\n  /**\n   * Invoke the attack phase, then after the duration, invoke the release.\n   * @param  notes\tThe note to play and release, or an array of notes.\n   * @param  duration The time the note should be held\n   * @param  time     When to start the attack\n   * @param  velocity The velocity of the attack\n   */\n  triggerAttackRelease(notes, duration, time, velocity = 1) {\n    const computedTime = this.toSeconds(time);\n    this.triggerAttack(notes, computedTime, velocity);\n    if (isArray(duration)) {\n      assert(isArray(notes), \"notes must be an array when duration is array\");\n      notes.forEach((note, index) => {\n        const d = duration[Math.min(index, duration.length - 1)];\n        this.triggerRelease(note, computedTime + this.toSeconds(d));\n      });\n    } else {\n      this.triggerRelease(notes, computedTime + this.toSeconds(duration));\n    }\n    return this;\n  }\n  /**\n   * Add a note to the sampler.\n   * @param  note      The buffer's pitch.\n   * @param  url  Either the url of the buffer, or a buffer which will be added with the given name.\n   * @param  callback  The callback to invoke when the url is loaded.\n   */\n  add(note, url, callback) {\n    assert(isNote(note) || isFinite(note), `note must be a pitch or midi: ${note}`);\n    if (isNote(note)) {\n      // convert the note name to MIDI\n      const mid = new FrequencyClass(this.context, note).toMidi();\n      this._buffers.add(mid, url, callback);\n    } else {\n      // otherwise if it's numbers assume it's midi\n      this._buffers.add(note, url, callback);\n    }\n    return this;\n  }\n  /**\n   * If the buffers are loaded or not\n   */\n  get loaded() {\n    return this._buffers.loaded;\n  }\n  /**\n   * Clean up\n   */\n  dispose() {\n    super.dispose();\n    this._buffers.dispose();\n    this._activeSources.forEach(sources => {\n      sources.forEach(source => source.dispose());\n    });\n    this._activeSources.clear();\n    return this;\n  }\n}\n__decorate([timeRange(0)], Sampler.prototype, \"attack\", void 0);\n__decorate([timeRange(0)], Sampler.prototype, \"release\", void 0);","map":{"version":3,"mappings":"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","names":["ToneAudioBuffers","ftomf","intervalToFrequencyRatio","FrequencyClass","optionsFromArguments","noOp","isArray","isNote","isNumber","Instrument","ToneBufferSource","timeRange","assert","Sampler","constructor","getDefaults","arguments","Map","options","urlMap","Object","keys","urls","forEach","note","noteNumber","parseInt","isFinite","mid","context","toMidi","_buffers","onload","baseUrl","onerror","attack","release","curve","loaded","Promise","resolve","then","assign","_findClosest","midi","MAX_INTERVAL","interval","has","Error","triggerAttack","notes","time","velocity","log","Array","midiFloat","toFrequency","Math","round","remainder","difference","closestNote","buffer","get","playbackRate","source","url","fadeIn","fadeOut","connect","output","start","duration","_activeSources","set","push","onended","sources","index","indexOf","splice","triggerRelease","length","toSeconds","stop","releaseAll","computedTime","shift","sync","_syncState","_syncMethod","triggerAttackRelease","d","min","add","callback","dispose","clear","__decorate"],"sourceRoot":"","sources":["../../../Tone/instrument/Sampler.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}