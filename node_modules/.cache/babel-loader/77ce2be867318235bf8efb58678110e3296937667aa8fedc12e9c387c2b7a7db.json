{"ast":null,"code":"import _classCallCheck from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { connectSeries, ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { ToneAudioWorklet } from \"../../core/worklet/ToneAudioWorklet\";\nimport { workletName } from \"./FeedbackCombFilter.worklet\";\n/**\n * Comb filters are basic building blocks for physical modeling. Read more\n * about comb filters on [CCRMA's website](https://ccrma.stanford.edu/~jos/pasp/Feedback_Comb_Filters.html).\n *\n * This comb filter is implemented with the AudioWorkletNode which allows it to have feedback delays less than the\n * Web Audio processing block of 128 samples. There is a polyfill for browsers that don't yet support the\n * AudioWorkletNode, but it will add some latency and have slower performance than the AudioWorkletNode.\n * @category Component\n */\nexport var FeedbackCombFilter = /*#__PURE__*/function (_ToneAudioWorklet) {\n  _inherits(FeedbackCombFilter, _ToneAudioWorklet);\n  var _super = _createSuper(FeedbackCombFilter);\n  function FeedbackCombFilter() {\n    var _this;\n    _classCallCheck(this, FeedbackCombFilter);\n    _this = _super.call(this, optionsFromArguments(FeedbackCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\"]));\n    _this.name = \"FeedbackCombFilter\";\n    var options = optionsFromArguments(FeedbackCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\"]);\n    _this.input = new Gain({\n      context: _this.context\n    });\n    _this.output = new Gain({\n      context: _this.context\n    });\n    _this.delayTime = new Param({\n      context: _this.context,\n      value: options.delayTime,\n      units: \"time\",\n      minValue: 0,\n      maxValue: 1,\n      param: _this._dummyParam,\n      swappable: true\n    });\n    _this.resonance = new Param({\n      context: _this.context,\n      value: options.resonance,\n      units: \"normalRange\",\n      param: _this._dummyParam,\n      swappable: true\n    });\n    readOnly(_assertThisInitialized(_this), [\"resonance\", \"delayTime\"]);\n    return _this;\n  }\n  _createClass(FeedbackCombFilter, [{\n    key: \"_audioWorkletName\",\n    value: function _audioWorkletName() {\n      return workletName;\n    }\n    /**\n     * The default parameters\n     */\n  }, {\n    key: \"onReady\",\n    value: function onReady(node) {\n      connectSeries(this.input, node, this.output);\n      var delayTime = node.parameters.get(\"delayTime\");\n      ;\n      this.delayTime.setParam(delayTime);\n      var feedback = node.parameters.get(\"feedback\");\n      ;\n      this.resonance.setParam(feedback);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(FeedbackCombFilter.prototype), \"dispose\", this).call(this);\n      this.input.dispose();\n      this.output.dispose();\n      this.delayTime.dispose();\n      this.resonance.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        delayTime: 0.1,\n        resonance: 0.5\n      });\n    }\n  }]);\n  return FeedbackCombFilter;\n}(ToneAudioWorklet);","map":{"version":3,"mappings":";;;;;;;;AAAA,SAASA,IAAI,QAAQ,yBAAyB;AAC9C,SAASC,KAAK,QAAQ,0BAA0B;AAChD,SAASC,aAAa,EAAEC,aAAa,QAA8B,kCAAkC;AAErG,SAASC,oBAAoB,QAAQ,0BAA0B;AAC/D,SAASC,QAAQ,QAA0B,2BAA2B;AACtE,SAASC,gBAAgB,QAAQ,qCAAqC;AACtE,SAASC,WAAW,QAAQ,8BAA8B;AAO1D;;;;;;;;;AASA,WAAaC,kBAAmB;EAAA;EAAA;EAuB/B;IAAA;IAAA;IACC,0BAAMJ,oBAAoB,CAACI,kBAAkB,CAACC,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;IAtB3F,UAAI,GAAG,oBAAoB;IAuBnC,IAAMC,OAAO,GAAGP,oBAAoB,CAACI,kBAAkB,CAACC,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;IAE7G,MAAKE,KAAK,GAAG,IAAIZ,IAAI,CAAC;MAAEa,OAAO,EAAE,MAAKA;IAAO,CAAE,CAAC;IAChD,MAAKC,MAAM,GAAG,IAAId,IAAI,CAAC;MAAEa,OAAO,EAAE,MAAKA;IAAO,CAAE,CAAC;IAEjD,MAAKE,SAAS,GAAG,IAAId,KAAK,CAAS;MAClCY,OAAO,EAAE,MAAKA,OAAO;MACrBG,KAAK,EAAEL,OAAO,CAACI,SAAS;MACxBE,KAAK,EAAE,MAAM;MACbC,QAAQ,EAAE,CAAC;MACXC,QAAQ,EAAE,CAAC;MACXC,KAAK,EAAE,MAAKC,WAAW;MACvBC,SAAS,EAAE;KACX,CAAC;IAEF,MAAKC,SAAS,GAAG,IAAItB,KAAK,CAAgB;MACzCY,OAAO,EAAE,MAAKA,OAAO;MACrBG,KAAK,EAAEL,OAAO,CAACY,SAAS;MACxBN,KAAK,EAAE,aAAa;MACpBG,KAAK,EAAE,MAAKC,WAAW;MACvBC,SAAS,EAAE;KACX,CAAC;IAEFjB,QAAQ,gCAAO,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;IAAC;EAC5C;EAAC;IAAA;IAAA,OAES,6BAAiB;MAC1B,OAAOE,WAAW;IACnB;IAEA;;;EAAA;IAAA;IAAA,OAUA,iBAAQiB,IAAsB;MAC7BtB,aAAa,CAAC,IAAI,CAACU,KAAK,EAAEY,IAAI,EAAE,IAAI,CAACV,MAAM,CAAC;MAC5C,IAAMC,SAAS,GAAGS,IAAI,CAACC,UAAU,CAACC,GAAG,CAAC,WAAW,CAAe;MAAC;MACjE,IAAI,CAACX,SAAS,CAACY,QAAQ,CAACZ,SAAS,CAAC;MAClC,IAAMa,QAAQ,GAAGJ,IAAI,CAACC,UAAU,CAACC,GAAG,CAAC,UAAU,CAAe;MAAC;MAC/D,IAAI,CAACH,SAAS,CAACI,QAAQ,CAACC,QAAQ,CAAC;IAClC;EAAC;IAAA;IAAA,OAED,mBAAO;MACN;MACA,IAAI,CAAChB,KAAK,CAACiB,OAAO,EAAE;MACpB,IAAI,CAACf,MAAM,CAACe,OAAO,EAAE;MACrB,IAAI,CAACd,SAAS,CAACc,OAAO,EAAE;MACxB,IAAI,CAACN,SAAS,CAACM,OAAO,EAAE;MACxB,OAAO,IAAI;IACZ;EAAC;IAAA;IAAA,OAtBD,uBAAkB;MACjB,OAAOC,MAAM,CAACC,MAAM,CAAC5B,aAAa,CAACM,WAAW,EAAE,EAAE;QACjDM,SAAS,EAAE,GAAG;QACdQ,SAAS,EAAE;OACX,CAAC;IACH;EAAC;EAAA;AAAA,EA/DsCjB,gBAA2C","names":["Gain","Param","connectSeries","ToneAudioNode","optionsFromArguments","readOnly","ToneAudioWorklet","workletName","FeedbackCombFilter","getDefaults","arguments","options","input","context","output","delayTime","value","units","minValue","maxValue","param","_dummyParam","swappable","resonance","node","parameters","get","setParam","feedback","dispose","Object","assign"],"sourceRoot":"","sources":["../../../../Tone/component/filter/FeedbackCombFilter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}