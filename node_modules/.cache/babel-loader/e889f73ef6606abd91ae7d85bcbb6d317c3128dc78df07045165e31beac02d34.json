{"ast":null,"code":"import \"core-js/modules/es.math.log10.js\";\nimport \"core-js/modules/web.timers.js\";\nimport * as Tone from \"tone\";\nimport { dbToGain, gainToDb } from \"tone\";\nexport default {\n  data: function data() {\n    return {\n      timing: 10\n    };\n  },\n  mounted: function mounted() {\n    this.analyser = new Tone.Analyser(\"fft\", 2048);\n    this.canvasCtx = this.$refs.canvas.getContext(\"2d\");\n    Tone.getDestination().connect(this.analyser);\n    this.startAnalyzer();\n  },\n  methods: {\n    draw: function draw() {\n      //requestAnimationFrame(this.draw);\n\n      this.data = this.analyser.getValue();\n      this.canvasCtx.strokeStyle = \"#658060\";\n      //console.log(this.data)\n\n      // clear the canvas\n      this.canvasCtx.clearRect(0, 0, this.$refs.canvas.width, this.$refs.canvas.height);\n      var x;\n\n      // render the analysis on the canvas\n      for (var i = 0; i < this.data.length; i++) {\n        this.value = 6 * dbToGain(this.data[i]) * this.$refs.canvas.height;\n        //console.log(this.value)\n        x = Math.log10(i) / Math.log10(2048) * this.$refs.canvas.width;\n        this.canvasCtx.fillStyle = \"black\";\n        this.canvasCtx.fillRect(x, this.$refs.canvas.height - this.value, 1, this.value);\n      }\n    },\n    startAnalyzer: function startAnalyzer() {\n      var _this = this;\n      //console.log(this.$refs.canvas.height)\n      //console.log(\"avviando analyzer con timer \"+this.timing)\n      this.intervalId = setInterval(function () {\n        _this.draw();\n      }, 10);\n    }\n  },\n  computed: {\n    analyzerCanvas: function analyzerCanvas() {\n      return {\n        background: this.colors.green.glow\n      };\n    }\n  },\n  beforeDestroy: function beforeDestroy() {}\n};","map":{"version":3,"mappings":";;AAOA,OAAO,KAAKA,IAAG,MAAO,MAAM;AAC5B,SAASC,QAAQ,EAAEC,QAAO,QAAS,MAAM;AAEzC,eAAe;EACbC,IAAI,kBAAG;IACL,OAAO;MACLC,MAAM,EAAE;IACV,CAAC;EACH,CAAC;EACDC,OAAO,qBAAG;IACR,IAAI,CAACC,QAAO,GAAI,IAAIN,IAAI,CAACO,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC;IAC9C,IAAI,CAACC,SAAQ,GAAI,IAAI,CAACC,KAAK,CAACC,MAAM,CAACC,UAAU,CAAC,IAAI,CAAC;IACnDX,IAAI,CAACY,cAAc,EAAE,CAACC,OAAO,CAAC,IAAI,CAACP,QAAQ,CAAC;IAC5C,IAAI,CAACQ,aAAa,EAAC;EACrB,CAAC;EACDC,OAAO,EAAE;IACPC,IAAI,kBAAG;MACL;;MAEA,IAAI,CAACb,IAAG,GAAI,IAAI,CAACG,QAAQ,CAACW,QAAQ,EAAE;MACpC,IAAI,CAACT,SAAS,CAACU,WAAU,GAAI,SAAS;MACtC;;MAEA;MACA,IAAI,CAACV,SAAS,CAACW,SAAS,CACtB,CAAC,EACD,CAAC,EACD,IAAI,CAACV,KAAK,CAACC,MAAM,CAACU,KAAK,EACvB,IAAI,CAACX,KAAK,CAACC,MAAM,CAACW,MAAK,CACxB;MACC,IAAIC;;MAIN;MACA,KAAK,IAAIC,IAAI,CAAC,EAAEA,IAAI,IAAI,CAACpB,IAAI,CAACqB,MAAM,EAAED,CAAC,EAAE,EAAE;QAEzC,IAAI,CAACE,KAAI,GAAI,CAAC,GAACxB,QAAQ,CAAC,IAAI,CAACE,IAAI,CAACoB,CAAC,CAAC,CAAC,GAAC,IAAI,CAACd,KAAK,CAACC,MAAM,CAACW,MAAM;QAC9D;QACAC,IAAKI,IAAI,CAACC,KAAK,CAACJ,CAAC,IAAIG,IAAI,CAACC,KAAK,CAAC,IAAI,CAAC,GAAI,IAAI,CAAClB,KAAK,CAACC,MAAM,CAACU,KAAI;QAC/D,IAAI,CAACZ,SAAS,CAACoB,SAAQ,GAAI,OAAO;QAClC,IAAI,CAACpB,SAAS,CAACqB,QAAQ,CAACP,CAAC,EAAE,IAAI,CAACb,KAAK,CAACC,MAAM,CAACW,MAAK,GAAI,IAAI,CAACI,KAAK,EAAE,CAAC,EAAE,IAAI,CAACA,KAAK,CAAC;MAClF;IACF,CAAC;IACDX,aAAa,2BAAG;MAAA;MACd;MACE;MACF,IAAI,CAACgB,UAAS,GAAIC,WAAW,CAAC,YAAM;QAClC,KAAI,CAACf,IAAI,EAAE;MACb,CAAC,EAAE,EAAE,CAAC;IACR;EACF,CAAC;EACDgB,QAAQ,EAAE;IACRC,cAAc,4BAAE;MACd,OAAM;QACJC,UAAU,EAAE,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC;MAChC;IACF;EACF,CAAC;EACDC,aAAa,2BAAG,CAAC;AACnB,CAAC","names":["Tone","dbToGain","gainToDb","data","timing","mounted","analyser","Analyser","canvasCtx","$refs","canvas","getContext","getDestination","connect","startAnalyzer","methods","draw","getValue","strokeStyle","clearRect","width","height","x","i","length","value","Math","log10","fillStyle","fillRect","intervalId","setInterval","computed","analyzerCanvas","background","colors","green","glow","beforeDestroy"],"sourceRoot":"","sources":["C:\\Home\\Projects\\Programmazione\\WebStorm\\myZenythPolisinT\\zenyth_polisint\\src\\views\\Synth\\Tools\\SpecAnalyzer.vue"],"sourcesContent":["<template>\r\n  <div class=\"spectral-analyzer\">\r\n    <canvas class=\"analyzerCanvas\" ref=\"canvas\" :style=\"this.analyzerCanvas\"></canvas>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as Tone from \"tone\";\r\nimport { dbToGain, gainToDb } from \"tone\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      timing: 10,\r\n    };\r\n  },\r\n  mounted() {\r\n    this.analyser = new Tone.Analyser(\"fft\", 2048);\r\n    this.canvasCtx = this.$refs.canvas.getContext(\"2d\");\r\n    Tone.getDestination().connect(this.analyser);\r\n    this.startAnalyzer()\r\n  },\r\n  methods: {\r\n    draw() {\r\n      //requestAnimationFrame(this.draw);\r\n\r\n      this.data = this.analyser.getValue();\r\n      this.canvasCtx.strokeStyle = \"#658060\";\r\n      //console.log(this.data)\r\n\r\n      // clear the canvas\r\n      this.canvasCtx.clearRect(\r\n        0,\r\n        0,\r\n        this.$refs.canvas.width,\r\n        this.$refs.canvas.height\r\n      );\r\n        let x\r\n\r\n        \r\n\r\n      // render the analysis on the canvas\r\n      for (let i = 0; i < this.data.length; i++) {\r\n        \r\n        this.value = 6*dbToGain(this.data[i])*this.$refs.canvas.height;\r\n        //console.log(this.value)\r\n        x = (Math.log10(i) / Math.log10(2048)) * this.$refs.canvas.width\r\n        this.canvasCtx.fillStyle = \"black\";\r\n        this.canvasCtx.fillRect(x, this.$refs.canvas.height - this.value, 1, this.value);\r\n      }\r\n    },\r\n    startAnalyzer() {\r\n      //console.log(this.$refs.canvas.height)\r\n        //console.log(\"avviando analyzer con timer \"+this.timing)\r\n      this.intervalId = setInterval(() => {\r\n        this.draw();\r\n      }, 10);\r\n    },\r\n  },\r\n  computed: {\r\n    analyzerCanvas(){\r\n      return{\r\n        background: this.colors.green.glow\r\n      }\r\n    }\r\n  },\r\n  beforeDestroy() {},\r\n};\r\n</script>\r\n\r\n<style>\r\n.spectral-analyzer{\r\n  grid-row: 1;\r\n  margin: 0.3vw 0.3vw 0.15vw;\r\n  box-sizing: border-box;\r\n}\r\n.analyzerCanvas {\r\n  width: 100%;\r\n  height: 100%;\r\n  border-radius: 0.2vw;\r\n  border: 0.1vw solid #334030;\r\n  box-sizing: border-box;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}