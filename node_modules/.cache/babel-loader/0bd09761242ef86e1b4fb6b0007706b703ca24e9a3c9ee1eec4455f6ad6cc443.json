{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nvar _withScopeId = function _withScopeId(n) {\n  return _pushScopeId(\"data-v-219a87d6\"), n = n(), _popScopeId(), n;\n};\nvar _hoisted_1 = {\n  \"class\": \"container\"\n};\nvar _hoisted_2 = {\n  \"class\": \"container\"\n};\nvar _hoisted_3 = {\n  \"class\": \"container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_Octave = _resolveComponent(\"Octave\");\n  var _component_MIDIKeyboard = _resolveComponent(\"MIDIKeyboard\");\n  return _openBlock(), _createElementBlock(\"div\", {\n    \"class\": \"span\",\n    onMouseleave: _cache[0] || (_cache[0] = function () {\n      return _ctx.handleMouseLeave && _ctx.handleMouseLeave.apply(_ctx, arguments);\n    })\n  }, [_createElementVNode(\"div\", _hoisted_1, [_createVNode(_component_Octave, {\n    ref: \"oct1\",\n    octaveNumber: 1,\n    onVirtualKeyDown: $options.handleNoteDown,\n    onVirtualKeyUp: $options.handleNoteUp\n  }, null, 8 /* PROPS */, [\"onVirtualKeyDown\", \"onVirtualKeyUp\"])]), _createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_Octave, {\n    ref: \"oct2\",\n    octaveNumber: 2,\n    onVirtualKeyDown: $options.handleNoteDown,\n    onVirtualKeyUp: $options.handleNoteUp\n  }, null, 8 /* PROPS */, [\"onVirtualKeyDown\", \"onVirtualKeyUp\"])]), _createElementVNode(\"div\", _hoisted_3, [_createVNode(_component_Octave, {\n    ref: \"oct3\",\n    octaveNumber: 3,\n    onVirtualKeyDown: $options.handleNoteDown,\n    onVirtualKeyUp: $options.handleNoteUp\n  }, null, 8 /* PROPS */, [\"onVirtualKeyDown\", \"onVirtualKeyUp\"])]), _createVNode(_component_MIDIKeyboard, {\n    onMIDIDown: $options.handleMIDIDown,\n    onMIDIUp: $options.handleMIDIUp\n  }, null, 8 /* PROPS */, [\"onMIDIDown\", \"onMIDIUp\"])], 32 /* HYDRATE_EVENTS */);\n}","map":{"version":3,"mappings":";;;;;EAES,SAAM;AAAW;;EAQjB,SAAM;AAAW;;EAQjB,SAAM;AAAW;;;;uBAjBxBA,oBA0BM;IA1BD,SAAM,MAAM;IAAEC,YAAU;MAAA,OAAEC,qEAAgB;IAAA;MAC7CC,oBAOM,OAPNC,UAOM,GANJC,aAKEC;IAJAC,GAAG,EAAC,MAAM;IACTC,YAAY,EAAE,CAAC;IACfC,gBAAc,EAAEC,uBAAc;IAC9BC,cAAY,EAAED;qEAGnBP,oBAOM,OAPNS,UAOM,GANJP,aAKEC;IAJAC,GAAG,EAAC,MAAM;IACTC,YAAY,EAAE,CAAC;IACfC,gBAAc,EAAEC,uBAAc;IAC9BC,cAAY,EAAED;qEAGnBP,oBAOM,OAPNU,UAOM,GANJR,aAKEC;IAJAC,GAAG,EAAC,MAAM;IACTC,YAAY,EAAE,CAAC;IACfC,gBAAc,EAAEC,uBAAc;IAC9BC,cAAY,EAAED;qEAGnBL,aAAkES;IAAnDC,UAAQ,EAAEL,uBAAc;IAAGM,QAAM,EAAEN","names":["_createElementBlock","onMouseleave","_ctx","_createElementVNode","_hoisted_1","_createVNode","_component_Octave","ref","octaveNumber","onVirtualKeyDown","$options","onVirtualKeyUp","_hoisted_2","_hoisted_3","_component_MIDIKeyboard","onMIDIDown","onMIDIUp"],"sourceRoot":"","sources":["C:\\Home\\Projects\\Programmazione\\WebStorm\\myZenythPolisinT\\zenyth_polisint\\src\\views\\Synth\\Keyboard\\PianoKeyboard.vue"],"sourcesContent":["<template>\r\n  <div class=\"span\" @mouseleave=\"handleMouseLeave\">\r\n    <div class=\"container\">\r\n      <Octave\r\n        ref=\"oct1\"\r\n        :octaveNumber=\"1\"\r\n        @virtualKeyDown=\"handleNoteDown\"\r\n        @virtualKeyUp=\"handleNoteUp\"\r\n      />\r\n    </div>\r\n    <div class=\"container\">\r\n      <Octave\r\n        ref=\"oct2\"\r\n        :octaveNumber=\"2\"\r\n        @virtualKeyDown=\"handleNoteDown\"\r\n        @virtualKeyUp=\"handleNoteUp\"\r\n      />\r\n    </div>\r\n    <div class=\"container\">\r\n      <Octave\r\n        ref=\"oct3\"\r\n        :octaveNumber=\"3\"\r\n        @virtualKeyDown=\"handleNoteDown\"\r\n        @virtualKeyUp=\"handleNoteUp\"\r\n      />\r\n    </div>\r\n    <MIDIKeyboard @MIDIDown=\"handleMIDIDown\" @MIDIUp=\"handleMIDIUp\" />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport MIDIKeyboard from \"./MIDIKeyboard.vue\";\r\nimport Octave from \"./Octave.vue\";\r\n\r\nexport default {\r\n  name: \"PianoKeyboard\",\r\n  components: {\r\n    Octave,\r\n    MIDIKeyboard,\r\n  },\r\n  data() {\r\n    return {\r\n      //From here we can transpose the whole keyboard by octaves\r\n      ocTranspose: 1,\r\n      // Object to track which keys are currently being held down\r\n      keysDown: {},\r\n      keys: \"awsedftgyhujkolpòà\",\r\n      notes: [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"],\r\n      //Transposition amount (in octaves) for the computer keyboard\r\n      keyboardTranspose: 0,\r\n      mouseDown: false,\r\n    };\r\n  },\r\n  mounted() {\r\n    // Add keydown and keyup event listeners to the window object\r\n    window.addEventListener(\"keydown\", this.handleKeyDown);\r\n    window.addEventListener(\"keyup\", this.handleKeyUp);\r\n  },\r\n  beforeDestroy() {\r\n    // Remove keydown and keyup event listeners from the window object\r\n    window.removeEventListener(\"keydown\", this.handleKeyDown);\r\n    window.removeEventListener(\"keyup\", this.handleKeyUp);\r\n  },\r\n\r\n  methods: {\r\n    handleMouseUp(){\r\n      this.mouseDown = false\r\n    },\r\n    handleKeyDown(event) {\r\n      // If the key is not currently being held down, handle the keydown event\r\n      if (!this.keysDown[event.key] && this.keys.includes(event.key)) {\r\n        let note = this.notes[this.keys.indexOf(event.key) % 12];\r\n        let octave = parseInt(this.keys.indexOf(event.key) / 12, 10);\r\n        this.handleNoteDown(note, 2 + octave + this.keyboardTranspose, 100);\r\n        // Set keyDown flag to true\r\n        this.keysDown[event.key] = true;\r\n        // Change color on keyboard\r\n        if (\r\n          2 + octave + this.keyboardTranspose > 0 &&\r\n          2 + octave + this.keyboardTranspose < 4\r\n        )\r\n          this.$refs[\r\n            \"oct\" + (2 + octave + this.keyboardTranspose)\r\n          ].switchColorPress(note);\r\n      }\r\n      // Change octave of computer keyboard with z or x\r\n      if (!this.keysDown[event.key] && event.key == \"z\") {\r\n        this.keyboardTranspose = this.keyboardTranspose - 1;\r\n      }\r\n      if (!this.keysDown[event.key] && event.key == \"x\") {\r\n        this.keyboardTranspose = this.keyboardTranspose + 1;\r\n      }\r\n    },\r\n    handleKeyUp(event) {\r\n      // If the key is currently being held down, handle the keyup event\r\n      if (this.keysDown[event.key]) {\r\n        let note = this.notes[this.keys.indexOf(event.key) % 12];\r\n        let octave = parseInt(this.keys.indexOf(event.key) / 12, 10);\r\n        this.handleNoteUp(note, 2 + octave + this.keyboardTranspose);\r\n        // Set keyDown flag to false\r\n        this.keysDown[event.key] = false;\r\n        // Change color on keyboard\r\n        if (\r\n          2 + octave + this.keyboardTranspose > 0 &&\r\n          2 + octave + this.keyboardTranspose < 4\r\n        )\r\n          this.$refs[\r\n            \"oct\" + (2 + octave + this.keyboardTranspose)\r\n          ].switchColorRelease(note);\r\n      }\r\n    },\r\n    handleMIDIDown(note, octave, velocity) {\r\n      if (octave > 0 && octave < 4)\r\n        this.$refs[\"oct\" + octave].switchColorPress(note);\r\n      this.synths.list.forEach(synth => {\r\n        //console.log(\"Play note: \"+(note+octave)+\" at velocity: \"+velocity+\" from MIDI\")\r\n        synth.playNote(note+octave, velocity);\r\n      });\r\n      //play filter envelopes\r\n      for(let chain in this.filterChains){\r\n        for( let filter in this.filterChains[chain]){\r\n          this.filterChains[chain][filter].playNote()\r\n        }\r\n      }\r\n      this.$emit(\"noteDown\", note)\r\n    },\r\n    handleMIDIUp(note, octave) {\r\n      //console.log(\"MIDI released \"+note+octave)\r\n      if (octave > 0 && octave < 4)\r\n        this.$refs[\"oct\" + octave].switchColorRelease(note);\r\n      this.synths.list.forEach(synth => {\r\n        synth.stopNote(note+octave);\r\n      });\r\n      //stop filter envelopes\r\n      for(let chain in this.filterChains){\r\n        for( let filter in this.filterChains[chain]){\r\n          this.filterChains[chain][filter].stopNote()\r\n        }\r\n      }\r\n    },\r\n\r\n    handleNoteDown(note, octave, velocity = 100) {\r\n      let finalOctave = parseInt(octave) + this.ocTranspose;\r\n      //console.log(note+finalOctave+\" pressed\")\r\n      this.synths.list.forEach(synth => {\r\n        synth.playNote(note+finalOctave, velocity);\r\n        //console.log(synth)\r\n      });\r\n      \r\n      //play filter envelopes\r\n      for(let chain in this.filterChains){\r\n        for( let filter in this.filterChains[chain]){\r\n          this.filterChains[chain][filter].playNote()\r\n        }\r\n      }\r\n      this.$emit(\"noteDown\", note+finalOctave)\r\n    },\r\n    handleNoteUp(note, octave) {\r\n      let finalOctave = parseInt(octave) + this.ocTranspose;\r\n      //console.log(note+finalOctave+\" released\")\r\n      this.synths.list.forEach(synth => {\r\n        synth.stopNote(note+finalOctave);\r\n      });\r\n      //stop filter envelopes\r\n      for(let chain in this.filterChains){\r\n        for( let filter in this.filterChains[chain]){\r\n          this.filterChains[chain][filter].stopNote()\r\n        }\r\n      }\r\n    },\r\n  }\r\n  \r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  background-color: white;\r\n  width: 100%;\r\n  height: 100%;\r\n  box-sizing: border-box;\r\n  position: relative;\r\n  border-top: .1vw solid gray\r\n}\r\n\r\n.span {\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-row: 3;\r\n  grid-column: span 3;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}