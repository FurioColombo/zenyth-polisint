{"ast":null,"code":"import { normalizeStyle as _normalizeStyle, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-044817f8\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"signalSum\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", null, null, -1 /* HOISTED */));\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: \"meter\",\n    style: _normalizeStyle(this.Meter)\n  }, [_createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"div\", {\n    ref: \"left\",\n    class: \"signal\",\n    style: _normalizeStyle($options.computedWidthLeft)\n  }, null, 4 /* STYLE */), _hoisted_2, _createElementVNode(\"div\", {\n    ref: \"right\",\n    class: \"signal\",\n    style: _normalizeStyle($options.computedWidthRight)\n  }, null, 4 /* STYLE */)])], 4 /* STYLE */);\n}","map":{"version":3,"mappings":";;;EAESA,KAAK,EAAC;AAAW;gEAEpBC,oBAAW;;;uBAHfC,oBAMM;IANDF,KAAK,EAAC,OAAO;IAAEG,KAAK,uBAAOC,KAAK;MACnCH,oBAIM,OAJNI,UAIM,GAHJJ,oBAAgE;IAA3DK,GAAG,EAAC,MAAM;IAACN,KAAK,EAAC,QAAQ;IAAEG,KAAK,kBAAEI,0BAAiB;2BACxDC,UAAW,EACXP,oBAAkE;IAA7DK,GAAG,EAAC,OAAO;IAACN,KAAK,EAAC,QAAQ;IAAEG,KAAK,kBAAEI,2BAAkB","names":["class","_createElementVNode","_createElementBlock","style","Meter","_hoisted_1","ref","$options","_hoisted_2"],"sourceRoot":"","sources":["/Users/guglielmofratticioli/Documents/POLIMI/FurioColombo.github.io/src/views/Synth/Tools/Meter.vue"],"sourcesContent":["<template>\n  <div class=\"meter\" :style=\"this.Meter\">\n    <div class=\"signalSum\">\n      <div ref=\"left\" class=\"signal\" :style=\"computedWidthLeft\"></div>\n      <div></div>\n      <div ref=\"right\" class=\"signal\" :style=\"computedWidthRight\"></div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { Meter } from \"tone\";\nimport { dbToGain, gainToDb } from \"tone\";\nimport * as Tone from \"tone\";\n\nexport default {\n  data() {\n    return {\n      widthLeft: 0,\n      widthRight: 0,\n    };\n  },\n  computed: {\n    computedWidthLeft() {\n      return { width: `${this.widthLeft}%` , background: this.colors.green.medium};\n    },\n    computedWidthRight() {\n      return { width: `${this.widthRight}%` , background: this.colors.green.medium};\n    },\n    Meter(){\n      return{\n        background: this.colors.green.glow,\n      }\n    },\n  },\n  mounted() {\n    this.meter = new Meter({channels: 2});\n    Tone.getDestination().connect(this.meter);\n    this.intervalId = setInterval(() => {\n      this.updateWidths();\n    }, 25);\n  },\n  \n  methods: {\n    updateWidths() {\n      //this.volume = this.meter.getValue();\n      [ this.leftVolume , this.rightVolume ] = this.meter.getValue();\n      if (!isFinite(this.leftVolume) && !isFinite(this.rightVolume)) return;\n      //console.log(this.meter.getValue()); \n      this.widthLeft = Math.min(dbToGain(this.leftVolume) * 100,100);\n      this.widthRight = Math.min(dbToGain(this.rightVolume) * 100,100);\n    },\n  },\n  beforeDestroy() {\n    this.meter.stop();\n    this.meter.dispose();\n    clearInterval(this.intervalId);\n  },\n};\n</script>\n\n<style scoped>\n.meter {\n  grid-row: 3;\n  border-radius: 0.2vw;\n  margin: 0vw 0.3vw 0.3vw;\n  display: flex;\n  border: 0.1vw solid #334030;\n}\n.signal {\n  height: 100%;\n  border-radius: 0.05vw;\n}\n.signalSum {\n  margin: 0.3vw;\n  display: grid;\n  grid-template-rows: 45% 10% 45%;\n  width: 100%;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}