{"ast":null,"code":"import { StereoEffect } from \"./StereoEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Scale } from \"../signal/Scale\";\nimport { Signal } from \"../signal/Signal\";\nimport { FeedbackCombFilter } from \"../component/filter/FeedbackCombFilter\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * an array of the comb filter delay time values\n */\nconst combFilterDelayTimes = [1687 / 25000, 1601 / 25000, 2053 / 25000, 2251 / 25000];\n/**\n * the resonances of each of the comb filters\n */\nconst combFilterResonances = [0.773, 0.802, 0.753, 0.733];\n/**\n * the allpass filter frequencies\n */\nconst allpassFilterFreqs = [347, 113, 37];\n/**\n * JCReverb is a simple [Schroeder Reverberator](https://ccrma.stanford.edu/~jos/pasp/Schroeder_Reverberators.html)\n * tuned by John Chowning in 1970.\n * It is made up of three allpass filters and four [[FeedbackCombFilter]].\n * JCReverb is now implemented with an AudioWorkletNode which may result on performance degradation on some platforms. Consider using [[Reverb]].\n * @example\n * const reverb = new Tone.JCReverb(0.4).toDestination();\n * const delay = new Tone.FeedbackDelay(0.5);\n * // connecting the synth to reverb through delay\n * const synth = new Tone.DuoSynth().chain(delay, reverb);\n * synth.triggerAttackRelease(\"A4\", \"8n\");\n *\n * @category Effect\n */\nexport class JCReverb extends StereoEffect {\n  constructor() {\n    super(optionsFromArguments(JCReverb.getDefaults(), arguments, [\"roomSize\"]));\n    this.name = \"JCReverb\";\n    /**\n     * a series of allpass filters\n     */\n    this._allpassFilters = [];\n    /**\n     * parallel feedback comb filters\n     */\n    this._feedbackCombFilters = [];\n    const options = optionsFromArguments(JCReverb.getDefaults(), arguments, [\"roomSize\"]);\n    this.roomSize = new Signal({\n      context: this.context,\n      value: options.roomSize,\n      units: \"normalRange\"\n    });\n    this._scaleRoomSize = new Scale({\n      context: this.context,\n      min: -0.733,\n      max: 0.197\n    });\n    // make the allpass filters\n    this._allpassFilters = allpassFilterFreqs.map(freq => {\n      const allpass = this.context.createBiquadFilter();\n      allpass.type = \"allpass\";\n      allpass.frequency.value = freq;\n      return allpass;\n    });\n    // and the comb filters\n    this._feedbackCombFilters = combFilterDelayTimes.map((delayTime, index) => {\n      const fbcf = new FeedbackCombFilter({\n        context: this.context,\n        delayTime\n      });\n      this._scaleRoomSize.connect(fbcf.resonance);\n      fbcf.resonance.value = combFilterResonances[index];\n      if (index < combFilterDelayTimes.length / 2) {\n        this.connectEffectLeft(...this._allpassFilters, fbcf);\n      } else {\n        this.connectEffectRight(...this._allpassFilters, fbcf);\n      }\n      return fbcf;\n    });\n    // chain the allpass filters together\n    this.roomSize.connect(this._scaleRoomSize);\n    readOnly(this, [\"roomSize\"]);\n  }\n  static getDefaults() {\n    return Object.assign(StereoEffect.getDefaults(), {\n      roomSize: 0.5\n    });\n  }\n  dispose() {\n    super.dispose();\n    this._allpassFilters.forEach(apf => apf.disconnect());\n    this._feedbackCombFilters.forEach(fbcf => fbcf.dispose());\n    this.roomSize.dispose();\n    this._scaleRoomSize.dispose();\n    return this;\n  }\n}","map":{"version":3,"mappings":"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","names":["StereoEffect","optionsFromArguments","Scale","Signal","FeedbackCombFilter","readOnly","combFilterDelayTimes","combFilterResonances","allpassFilterFreqs","JCReverb","constructor","getDefaults","arguments","options","roomSize","context","value","units","_scaleRoomSize","min","max","_allpassFilters","map","freq","allpass","createBiquadFilter","type","frequency","_feedbackCombFilters","delayTime","index","fbcf","connect","resonance","length","connectEffectLeft","connectEffectRight","Object","assign","dispose","forEach","apf","disconnect"],"sourceRoot":"","sources":["../../../Tone/effect/JCReverb.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}