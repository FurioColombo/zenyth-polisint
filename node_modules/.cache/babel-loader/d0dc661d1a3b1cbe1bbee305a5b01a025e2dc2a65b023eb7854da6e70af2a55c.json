{"ast":null,"code":"import { normalizeStyle as _normalizeStyle, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createBlock as _createBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nvar _withScopeId = function _withScopeId(n) {\n  return _pushScopeId(\"data-v-1dd12caa\"), n = n(), _popScopeId(), n;\n};\nvar _hoisted_1 = {\n  \"class\": \"chainHeadsRow\"\n};\nvar _hoisted_2 = {\n  \"class\": \"fxGrid\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _this = this;\n  var _component_FxCell = _resolveComponent(\"FxCell\");\n  return _openBlock(), _createElementBlock(\"div\", {\n    style: _normalizeStyle(this.fxBack)\n  }, [_createElementVNode(\"div\", {\n    \"class\": \"fxHost\",\n    style: _normalizeStyle(this.fxHost)\n  }, [_createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"div\", {\n    \"class\": \"chainHead\",\n    style: _normalizeStyle(this.chainHead1)\n  }, null, 4), _createElementVNode(\"div\", {\n    \"class\": \"chainHead\",\n    style: _normalizeStyle(this.chainHead2)\n  }, null, 4), _createElementVNode(\"div\", {\n    \"class\": \"chainHead\",\n    style: _normalizeStyle(this.chainHead3)\n  }, null, 4)]), _createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.Fx_chain1, function (fx) {\n    return _openBlock(), _createBlock(_component_FxCell, {\n      ref_for: true,\n      ref: \"effects\",\n      chainId: fx.chainId,\n      id: fx.id,\n      item: fx\n    }, null, 8, [\"chainId\", \"id\", \"item\"]);\n  }), 256)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.Fx_chain2, function (fx) {\n    return _openBlock(), _createBlock(_component_FxCell, {\n      chainId: fx.chainId,\n      id: fx.id,\n      item: fx\n    }, null, 8, [\"chainId\", \"id\", \"item\"]);\n  }), 256)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.Fx_chain3, function (fx) {\n    return _openBlock(), _createBlock(_component_FxCell, {\n      chainId: fx.chainId,\n      id: fx.id,\n      item: fx,\n      onFxMounted: _cache[0] || (_cache[0] = function ($event) {\n        return _this.initFxConnections();\n      })\n    }, null, 8, [\"chainId\", \"id\", \"item\"]);\n  }), 256))]), _createElementVNode(\"div\", {\n    \"class\": \"gainList\",\n    style: _normalizeStyle(this.gainList)\n  }, [_createElementVNode(\"div\", {\n    id: \"gain1\",\n    \"class\": \"channelGain\",\n    style: _normalizeStyle($options.channelGain(0)),\n    onMousedown: _cache[1] || (_cache[1] = function ($event) {\n      return $options.gainMouseDown(0);\n    })\n  }, [_createElementVNode(\"div\", {\n    \"class\": \"channelGainFader\",\n    style: _normalizeStyle($options.computedFxGainKnobStyle(0))\n  }, null, 4)], 36), _createElementVNode(\"div\", {\n    id: \"gain2\",\n    \"class\": \"channelGain\",\n    style: _normalizeStyle($options.channelGain(1)),\n    onMousedown: _cache[2] || (_cache[2] = function ($event) {\n      return $options.gainMouseDown(1);\n    })\n  }, [_createElementVNode(\"div\", {\n    \"class\": \"channelGainFader\",\n    style: _normalizeStyle($options.computedFxGainKnobStyle(1))\n  }, null, 4)], 36), _createElementVNode(\"div\", {\n    id: \"gain3\",\n    \"class\": \"channelGain\",\n    style: _normalizeStyle($options.channelGain(2)),\n    onMousedown: _cache[3] || (_cache[3] = function ($event) {\n      return $options.gainMouseDown(2);\n    })\n  }, [_createElementVNode(\"div\", {\n    \"class\": \"channelGainFader\",\n    style: _normalizeStyle($options.computedFxGainKnobStyle(2))\n  }, null, 4)], 36)], 4)], 4)], 4);\n}","map":{"version":3,"mappings":";;;;;EAIS,SAAM;AAAe;;EAKrB,SAAM;AAAQ;;;;uBARrBA,oBA0BI;IA1BEC,KAAK,uBAAOC,MAAM;MACxBC,oBAwBM;IAxBD,SAAM,QAAQ;IAAEF,KAAK,uBAAOG,MAAM;MAErCD,oBAIM,OAJNE,UAIM,GAHJF,oBAAuD;IAAlD,SAAM,WAAY;IAAEF,KAAK,uBAAOK,UAAU;eAC/CH,oBAAuD;IAAlD,SAAM,WAAY;IAAEF,KAAK,uBAAOM,UAAU;eAC/CJ,oBAAuD;IAAlD,SAAM,WAAY;IAAEF,KAAK,uBAAOO,UAAU;iBAEjDL,oBAKM,OALNM,UAKM,sBAJJT,oBAAsGU,6BAA/EC,eAAS,YAAhBC,EAAE;yBAAlBC,aAAsGC;;MAApEC,GAAG,EAAC,SAAS;MAAEC,OAAO,EAAEJ,EAAE,CAACI,OAAO;MAAGC,EAAE,EAAEL,EAAE,CAACK,EAAE;MAAGC,IAAI,EAAEN;;gCACzFZ,oBAAwFU,6BAAjEC,eAAS,YAAhBC,EAAE;yBAAlBC,aAAwFC;MAArDE,OAAO,EAAEJ,EAAE,CAACI,OAAO;MAAGC,EAAE,EAAEL,EAAE,CAACK,EAAE;MAAGC,IAAI,EAAEN;;gCAC3EZ,oBACuDU,6BADhCC,eAAS,YAAhBC,EAAE;yBAAlBC,aACuDC;MADpBE,OAAO,EAAEJ,EAAE,CAACI,OAAO;MAAGC,EAAE,EAAEL,EAAE,CAACK,EAAE;MAAGC,IAAI,EAAEN,EAAE;MACpEO,WAAS;QAAA,aAAOC,iBAAiB;MAAA;;eAE5CjB,oBAUM;IAVD,SAAM,UAAU;IAAEF,KAAK,uBAAOoB,QAAQ;MACzClB,oBAEM;IAFDc,EAAE,EAAC,OAAO;IAAC,SAAM,aAAa;IAAEhB,KAAK,kBAAEqB,oBAAW;IAAMC,WAAS;MAAA,OAAED,sBAAa;IAAA;MACnFnB,oBAAwE;IAAnE,SAAM,kBAAkB;IAAEF,KAAK,kBAAEqB,gCAAuB;qBAE/DnB,oBAEM;IAFDc,EAAE,EAAC,OAAO;IAAC,SAAM,aAAa;IAAEhB,KAAK,kBAAEqB,oBAAW;IAAMC,WAAS;MAAA,OAAED,sBAAa;IAAA;MACnFnB,oBAAwE;IAAnE,SAAM,kBAAkB;IAAEF,KAAK,kBAAEqB,gCAAuB;qBAE/DnB,oBAEM;IAFDc,EAAE,EAAC,OAAO;IAAC,SAAM,aAAa;IAAEhB,KAAK,kBAAEqB,oBAAW;IAAMC,WAAS;MAAA,OAAED,sBAAa;IAAA;MACnFnB,oBAAwE;IAAnE,SAAM,kBAAkB;IAAEF,KAAK,kBAAEqB,gCAAuB","names":["_createElementBlock","style","fxBack","_createElementVNode","fxHost","_hoisted_1","chainHead1","chainHead2","chainHead3","_hoisted_2","_Fragment","$data","fx","_createBlock","_component_FxCell","ref","chainId","id","item","onFxMounted","initFxConnections","gainList","$options","onMousedown"],"sourceRoot":"","sources":["/Users/eliapirrello/Documents/GitHub/zenyth/src/views/Synth/Effects/FxHost.vue"],"sourcesContent":["<template>\n  <div :style=\"this.fxBack\">\n  <div class=\"fxHost\" :style=\"this.fxHost\">\n\n    <div class=\"chainHeadsRow\">\n      <div class=\"chainHead \" :style=\"this.chainHead1\"></div>\n      <div class=\"chainHead \" :style=\"this.chainHead2\"></div>\n      <div class=\"chainHead \" :style=\"this.chainHead3\"></div>\n    </div>\n    <div class=\"fxGrid\">\n      <FxCell v-for=\"(fx) in Fx_chain1\" ref=\"effects\" :chainId=\"fx.chainId\" :id=\"fx.id\" :item=\"fx\"></FxCell>\n      <FxCell v-for=\"(fx) in Fx_chain2\" :chainId=\"fx.chainId\" :id=\"fx.id\" :item=\"fx\"></FxCell>\n      <FxCell v-for=\"(fx) in Fx_chain3\" :chainId=\"fx.chainId\" :id=\"fx.id\" :item=\"fx\"\n              @fxMounted=\"this.initFxConnections()\"></FxCell>\n    </div>\n    <div class=\"gainList\" :style=\"this.gainList\">\n      <div id=\"gain1\" class=\"channelGain\" :style=\"channelGain(0)\" @mousedown=\"gainMouseDown(0)\">\n        <div class=\"channelGainFader\" :style=\"computedFxGainKnobStyle(0)\"></div>\n      </div>\n      <div id=\"gain2\" class=\"channelGain\" :style=\"channelGain(1)\" @mousedown=\"gainMouseDown(1)\">\n        <div class=\"channelGainFader\" :style=\"computedFxGainKnobStyle(1)\"></div>\n      </div>\n      <div id=\"gain3\" class=\"channelGain\" :style=\"channelGain(2)\" @mousedown=\"gainMouseDown(2)\">\n        <div class=\"channelGainFader\" :style=\"computedFxGainKnobStyle(2)\"></div>\n      </div>\n    </div>\n  </div>\n</div>\n</template>\n\n<script>\nimport FxCell from '../Effects/FxCell.vue'\nimport {Gain, getDestination} from \"tone\";\n\nexport default {\n  name: \"FxHost\",\n  components: {FxCell},\n\n  data() {\n    return {\n      Fx_chain1: [],\n      Fx_chain2: [],\n      Fx_chain3: [],\n      isGainSelected: \"\",\n      chainsGains: \"\"\n    }\n  },\n\n  mounted() {\n    this.isGainSelected = Array(this.nFxChains).fill(false)\n    this.chainsGains = Array(this.nFxChains).fill(0);\n    this.chainsGains[0] = 0.8;\n    this.chainsGains[1] = 0.8;\n    this.chainsGains[2] = 0.8;\n    // note: refs are kept incremental through the chains, while everything else is indexed relatively to the chain\n    //console.log(\"creating fx\")\n    for (let i = 1; i <= this.nFxXchain; i++) {\n      this.Fx_chain1.push({id: i, ref: 'Fx' + i, chainId: 0});\n      this.Fx_chain2.push({id: i, ref: 'Fx' + i + this.nFxXchain, chainId: 1});\n      this.Fx_chain3.push({id: i, ref: 'Fx' + i + this.nFxXchain * 2, chainId: 2});\n      // console.log(i)\n    }\n\n    //console.log(this.fxChains)\n    for (let i = 0; i < this.nFxChains; i++) {\n      this.fxChains[i][0] = new Gain(1);\n      this.fxChains[i][this.nNodesXfxChain-1] = new Gain(+this.chainsGains[i]);\n    }\n  },\n\n  methods: {\n    // -------------------- AUDIO -----------------------\n    initFxConnections() {\n      //console.log(this.fxChains)\n      for (let i = 0; i < this.nFxChains; i++) {\n        // structure: Gain Filter Filter Filter Filter Filter Gain [7]\n        for (let j = 0; j < this.nNodesXfxChain-2; j++) {\n          //console.log(\"i: \", i, \"j: \", j)\n          this.fxChains[i][j].connect(this.fxChains[i][j + 1].getToneReference())\n          // console.log(\"chain \", i ,\" id: \", j, \" into chain \", i , \" id: \", j+1)\n        }\n        // connect last filter to volume\n        this.fxChains[i][this.nNodesXfxChain-2].connect(this.fxChains[i][this.nNodesXfxChain-1])\n        // connect vol to destination\n        this.fxChains[i][this.nNodesXfxChain-1].connect(getDestination())\n        // console.log(\"chain \", i, \" id: \", this.nFxXchain-1, \" into getDestination()\")\n      }\n    },\n\n    // first node of each chain is a gain node - we set its volume to adjust whole chain gain\n    setChainVolume(chainId, volume) {\n      this.fxChains[chainId][this.nNodesXfxChain-1].gain = volume;\n\n    },\n\n    // --------------------  GESTURE -----------------------\n    gainMouseDown(gainId) {\n      this.isGainSelected[gainId] = true;\n      // console.log(\"fx gainMouseDown\")\n    },\n\n    handleMouseUp(e) {\n      //Actions to execute when mouseup happens on any part of the screen\n      this.isGainSelected.fill(false)\n      // console.log(\"fx gainMouseUP\")\n\n    },\n    handleMouseMove(e) {\n      this.isGainSelected.forEach((isSelected, index) => {\n        // console.log(\"fx gain vol knob mouse drag\")\n        if (isSelected) {\n          //console.log(\"fx gain vol knob mouse drag of \", isSelected);\n          this.chainsGains[index] = this.chainsGains[index] - Math.floor(e.movementY) / 100;\n          this.chainsGains[index] = Math.max(this.chainsGains[index], 0);\n          this.chainsGains[index] = Math.min(this.chainsGains[index], 1);\n          //console.log(this.chainsGains[index])\n          //console.log(this.fxChains[index][0])\n          this.fxChains[index][this.nNodesXfxChain-1].set({\n            gain: this.chainsGains[index]\n          })\n        }\n      })\n    },\n    computedFxGainKnobStyle(id) {\n      let color = ''; \n      if(id === 0) color = this.colors.purple.medium\n      if(id === 1) color = this.colors.green.medium\n      if(id === 2) color = this.colors.pink.medium\n      return {\n        height: 100 * this.chainsGains[id] + \"%\",\n        top: 50 * (1-this.chainsGains[id]) + \"%\",\n        left: 50 * (1-this.chainsGains[id]) + \"%\",\n      \n        background: color,\n      }\n    },\n    channelGain(id) {\n      let color = ''\n      if(id == 0) color = this.colors.purple.glow\n      if(id == 1) color = this.colors.green.glow\n      if(id == 2) color = this.colors.pink.glow\n      return {\n        background: color,\n      }\n    }\n  },\n\n  computed : {\n\n    fxHost(){\n      return {\n        background: this.colors.orange.glow,\n        border: '.1vw solid '+this.colors.orange.dark,\n        boxSizing: 'border-box'\n      }\n    },\n    gainList(){\n      return {\n        background: this.colors.orange.light,\n        borderTop: '.1vw solid '+this.colors.orange.dark,\n        boxSizing: 'border-box',\n        height: '100%'\n      }\n    },\n    chainHead1(){\n      return {\n        background: this.colors.purple.light\n      }\n    },\n    chainHead2(){\n      return {\n        background: this.colors.green.medium\n      }\n    },\n    chainHead3(){\n      return {\n        background: this.colors.pink.light\n      }\n    },\n    fxBack(){\n      return {\n        position: 'relative',\n        height: '100%',\n        width: '100%',\n        background: this.colors.orange.light\n      }\n    }\n    \n  }\n}\n\n</script>\n\n<style scoped>\n  .fxHost{\n    display: grid;\n    margin: .3vw;\n    height: calc(100% - .6vw);\n    border-radius: 1%;\n    opacity: 90%;\n    grid-template-columns: 1fr;\n    grid-template-rows: 10% 70% 20%;\n    justify-content: center;\n    align-items: center;\n  }\n  .fxGrid{\n    justify-content: center;\n    align-items: center;\n    justify-items: stretch;\n    height: 100%;\n    width: 100%;\n    flex: 1;\n    display: grid;\n    grid-column: auto;\n    grid-template-rows:  1fr 1fr 1fr 1fr 1fr ;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-auto-flow: column;\n    box-sizing: border-box;\n  }\n\n  .gainList{\n    width: 100%;\n    position: relative;\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    flex-direction: row;\n  }\n\n.channelGainFader {\n  box-sizing: border-box;\n  position: relative;\n  left: 50%;\n  top: 50%;\n  aspect-ratio: 1;\n  border-radius: 50%;\n  align-self: center;\n}\n\n.channelGain {\n  box-sizing: border-box;\n  position: relative;\n  align-content: center;\n  height: 70%;\n  aspect-ratio: 1/1;\n  border-radius: 50%;\n  border: 0.06vw solid black;\n}\n\n.chainHeadsRow {\n  height: 60%;\n  width: 100%;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  flex-direction: row;\n  background-color: transparent;\n  margin-top: 2%;\n  box-sizing: border-box;;\n  border: 0;\n}\n\n\n  .chainHead {\n    height: 50%;\n    aspect-ratio: 1/1;\n    border: 0;\n    clip-path: circle(50%)\n  }\n\n  .head1 {\n    background-color: red;\n  }\n  .head2 {\n    background-color: green;\n  }\n  .head3 {\n    background-color: blue;\n  }\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}