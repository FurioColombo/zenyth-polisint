{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, normalizeStyle as _normalizeStyle } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_FilterChain = _resolveComponent(\"FilterChain\");\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: \"filterHost\",\n    style: _normalizeStyle(this.filterHost)\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(this.chainList, chain => {\n    return _openBlock(), _createElementBlock(_Fragment, {\n      key: chain.id\n    }, [_createVNode(_component_FilterChain, {\n      ref_for: true,\n      ref: chain.ref,\n      id: chain.id,\n      color: chain.color,\n      onFilterInitialized: _cache[0] || (_cache[0] = $event => $options.initConnections())\n    }, null, 8 /* PROPS */, [\"id\", \"color\"]), _createCommentVNode(\" todo: remove <FilterChain :ref=\\\"chain.ref\\\" :id=\\\"chain.id\\\" :color=\\\"chain.color\\\" @filterInitialized=\\\"handleFilterInitialized\\\" /> \")], 64 /* STABLE_FRAGMENT */);\n  }), 128 /* KEYED_FRAGMENT */))], 4 /* STYLE */);\n}","map":{"version":3,"mappings":";;;uBACEA,oBAKM;IALDC,KAAK,EAAC,YAAY;IAAEC,KAAK,uBAAOC,UAAU;yBAC7CH,oBAGaI,kCAHoBC,SAAS,EAAxBC,KAAK;;WAA2BA,KAAK,CAACC;QACpDC,aAA0GC;;MAA5FC,GAAG,EAAEJ,KAAK,CAACI,GAAG;MAAGH,EAAE,EAAED,KAAK,CAACC,EAAE;MAAGI,KAAK,EAAEL,KAAK,CAACK,KAAK;MAAGC,mBAAiB,sCAAEC,wBAAe;8CACtGC,+JAAuI","names":["_createElementBlock","class","style","filterHost","_Fragment","chainList","chain","id","_createVNode","_component_FilterChain","ref","color","onFilterInitialized","$options","_createCommentVNode"],"sourceRoot":"","sources":["/Users/guglielmofratticioli/Documents/POLIMI/FurioColombo.github.io/src/views/Synth/Filters/FilterHost.vue"],"sourcesContent":["<template>\n  <div class=\"filterHost\" :style=\"this.filterHost\">\n    <template v-for=\"(chain) in this.chainList\" :key=\"chain.id\" :item=\"chain\">\n        <FilterChain :ref=\"chain.ref\" :id=\"chain.id\" :color=\"chain.color\" @filterInitialized=\"initConnections()\"/>\n       <!-- todo: remove <FilterChain :ref=\"chain.ref\" :id=\"chain.id\" :color=\"chain.color\" @filterInitialized=\"handleFilterInitialized\" /> -->\n      </template>\n  </div>\n</template>\n\n<script>\nimport FilterChain from './FilterChain.vue'\nimport * as Tone from \"tone\";\nimport { isProxy, toRaw } from \"vue\";\n\nexport default {\n  name: \"FilterHost\",\n  components: {\n    FilterChain,\n  },\n\n  data() {\n    return {\n      chain_colors: [],\n      chainList: [],\n      nFilterChains: 3,\n    }\n  },\n  mounted() {\n    this.chain_colors = [this.colors.purple.medium, this.colors.green.medium, this.colors.pink.medium]\n    for (let index = 0; index < this.nFilterChains; index++) {\n      this.chainList.push({ id: index, ref:\"chain\"+index, color: this.chain_colors[index]})\n    }\n    // console.log(this.filterChains)\n  },\n  computed: {\n    filterHost(){\n      return {\n        background: this.colors.yellow.glow\n      }\n    }\n  },\n  methods: {\n    initConnections(){\n      //console.log(\"filter host init connections\")\n      for (let key in this.$refs) {\n        //console.log(toRaw(this.$refs[key][0]))\n        toRaw(this.$refs[key][0]).initConnections()\n      }\n      this.$emit('filterInitialized')\n      //console.log(\"filters initilised\")\n      //console.log(\"filters:\")\n      //console.log(this.filterChains)\n      //console.log(\"fx:\")\n      //console.log(this.fxChains)\n    }\n  }\n}\n\n// access a parameter of a vue component child from its father\n</script>\n\n<style scoped>\n\n.filterHost {\n  display: flex;\n  flex-direction: column;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}