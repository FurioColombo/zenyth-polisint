{"ast":null,"code":"import _classCallCheck from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { Volume } from \"../component/channel/Volume\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Base-class for all instruments\n */\nexport var Instrument = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Instrument, _ToneAudioNode);\n  var _super = _createSuper(Instrument);\n  function Instrument() {\n    var _this;\n    _classCallCheck(this, Instrument);\n    _this = _super.call(this, optionsFromArguments(Instrument.getDefaults(), arguments));\n    /**\n     * Keep track of all events scheduled to the transport\n     * when the instrument is 'synced'\n     */\n    _this._scheduledEvents = [];\n    /**\n     * If the instrument is currently synced\n     */\n    _this._synced = false;\n    _this._original_triggerAttack = _this.triggerAttack;\n    _this._original_triggerRelease = _this.triggerRelease;\n    var options = optionsFromArguments(Instrument.getDefaults(), arguments);\n    _this._volume = _this.output = new Volume({\n      context: _this.context,\n      volume: options.volume\n    });\n    _this.volume = _this._volume.volume;\n    readOnly(_assertThisInitialized(_this), \"volume\");\n    return _this;\n  }\n  _createClass(Instrument, [{\n    key: \"sync\",\n    value:\n    /**\n     * Sync the instrument to the Transport. All subsequent calls of\n     * [[triggerAttack]] and [[triggerRelease]] will be scheduled along the transport.\n     * @example\n     * const fmSynth = new Tone.FMSynth().toDestination();\n     * fmSynth.volume.value = -6;\n     * fmSynth.sync();\n     * // schedule 3 notes when the transport first starts\n     * fmSynth.triggerAttackRelease(\"C4\", \"8n\", 0);\n     * fmSynth.triggerAttackRelease(\"E4\", \"8n\", \"8n\");\n     * fmSynth.triggerAttackRelease(\"G4\", \"8n\", \"4n\");\n     * // start the transport to hear the notes\n     * Tone.Transport.start();\n     */\n    function sync() {\n      if (this._syncState()) {\n        this._syncMethod(\"triggerAttack\", 1);\n        this._syncMethod(\"triggerRelease\", 0);\n      }\n      return this;\n    }\n    /**\n     * set _sync\n     */\n  }, {\n    key: \"_syncState\",\n    value: function _syncState() {\n      var changed = false;\n      if (!this._synced) {\n        this._synced = true;\n        changed = true;\n      }\n      return changed;\n    }\n    /**\n     * Wrap the given method so that it can be synchronized\n     * @param method Which method to wrap and sync\n     * @param  timePosition What position the time argument appears in\n     */\n  }, {\n    key: \"_syncMethod\",\n    value: function _syncMethod(method, timePosition) {\n      var _this2 = this;\n      var originalMethod = this[\"_original_\" + method] = this[method];\n      this[method] = function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        var time = args[timePosition];\n        var id = _this2.context.transport.schedule(function (t) {\n          args[timePosition] = t;\n          originalMethod.apply(_this2, args);\n        }, time);\n        _this2._scheduledEvents.push(id);\n      };\n    }\n    /**\n     * Unsync the instrument from the Transport\n     */\n  }, {\n    key: \"unsync\",\n    value: function unsync() {\n      var _this3 = this;\n      this._scheduledEvents.forEach(function (id) {\n        return _this3.context.transport.clear(id);\n      });\n      this._scheduledEvents = [];\n      if (this._synced) {\n        this._synced = false;\n        this.triggerAttack = this._original_triggerAttack;\n        this.triggerRelease = this._original_triggerRelease;\n      }\n      return this;\n    }\n    /**\n     * Trigger the attack and then the release after the duration.\n     * @param  note     The note to trigger.\n     * @param  duration How long the note should be held for before\n     *                         triggering the release. This value must be greater than 0.\n     * @param time  When the note should be triggered.\n     * @param  velocity The velocity the note should be triggered at.\n     * @example\n     * const synth = new Tone.Synth().toDestination();\n     * // trigger \"C4\" for the duration of an 8th note\n     * synth.triggerAttackRelease(\"C4\", \"8n\");\n     */\n  }, {\n    key: \"triggerAttackRelease\",\n    value: function triggerAttackRelease(note, duration, time, velocity) {\n      var computedTime = this.toSeconds(time);\n      var computedDuration = this.toSeconds(duration);\n      this.triggerAttack(note, computedTime, velocity);\n      this.triggerRelease(computedTime + computedDuration);\n      return this;\n    }\n    /**\n     * clean up\n     * @returns {Instrument} this\n     */\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Instrument.prototype), \"dispose\", this).call(this);\n      this._volume.dispose();\n      this.unsync();\n      this._scheduledEvents = [];\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        volume: 0\n      });\n    }\n  }]);\n  return Instrument;\n}(ToneAudioNode);","map":{"version":3,"mappings":"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","names":["Volume","ToneAudioNode","optionsFromArguments","readOnly","Instrument","getDefaults","arguments","triggerAttack","triggerRelease","options","_volume","output","context","volume","_syncState","_syncMethod","changed","_synced","method","timePosition","originalMethod","args","time","id","transport","schedule","t","apply","_scheduledEvents","push","forEach","clear","_original_triggerAttack","_original_triggerRelease","note","duration","velocity","computedTime","toSeconds","computedDuration","dispose","unsync","Object","assign"],"sourceRoot":"","sources":["../../../Tone/instrument/Instrument.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}