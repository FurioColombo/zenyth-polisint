{"ast":null,"code":"import _classCallCheck from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { Effect } from \"./Effect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { WaveShaper } from \"../signal/WaveShaper\";\n/**\n * Chebyshev is a waveshaper which is good\n * for making different types of distortion sounds.\n * Note that odd orders sound very different from even ones,\n * and order = 1 is no change.\n * Read more at [music.columbia.edu](http://music.columbia.edu/cmc/musicandcomputers/chapter4/04_06.php).\n * @example\n * // create a new cheby\n * const cheby = new Tone.Chebyshev(50).toDestination();\n * // create a monosynth connected to our cheby\n * const synth = new Tone.MonoSynth().connect(cheby);\n * synth.triggerAttackRelease(\"C2\", 0.4);\n * @category Effect\n */\nexport var Chebyshev = /*#__PURE__*/function (_Effect) {\n  _inherits(Chebyshev, _Effect);\n  var _super = _createSuper(Chebyshev);\n  function Chebyshev() {\n    var _this;\n    _classCallCheck(this, Chebyshev);\n    _this = _super.call(this, optionsFromArguments(Chebyshev.getDefaults(), arguments, [\"order\"]));\n    _this.name = \"Chebyshev\";\n    var options = optionsFromArguments(Chebyshev.getDefaults(), arguments, [\"order\"]);\n    _this._shaper = new WaveShaper({\n      context: _this.context,\n      length: 4096\n    });\n    _this._order = options.order;\n    _this.connectEffect(_this._shaper);\n    _this.order = options.order;\n    _this.oversample = options.oversample;\n    return _this;\n  }\n  _createClass(Chebyshev, [{\n    key: \"_getCoefficient\",\n    value:\n    /**\n     * get the coefficient for that degree\n     * @param  x the x value\n     * @param  degree\n     * @param  memo memoize the computed value. this speeds up computation greatly.\n     */\n    function _getCoefficient(x, degree, memo) {\n      if (memo.has(degree)) {\n        return memo.get(degree);\n      } else if (degree === 0) {\n        memo.set(degree, 0);\n      } else if (degree === 1) {\n        memo.set(degree, x);\n      } else {\n        memo.set(degree, 2 * x * this._getCoefficient(x, degree - 1, memo) - this._getCoefficient(x, degree - 2, memo));\n      }\n      return memo.get(degree);\n    }\n    /**\n     * The order of the Chebyshev polynomial which creates the equation which is applied to the incoming\n     * signal through a Tone.WaveShaper. The equations are in the form:\n     * ```\n     * order 2: 2x^2 + 1\n     * order 3: 4x^3 + 3x\n     * ```\n     * @min 1\n     * @max 100\n     */\n  }, {\n    key: \"order\",\n    get: function get() {\n      return this._order;\n    },\n    set: function set(order) {\n      var _this2 = this;\n      this._order = order;\n      this._shaper.setMap(function (x) {\n        return _this2._getCoefficient(x, order, new Map());\n      });\n    }\n    /**\n     * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n     */\n  }, {\n    key: \"oversample\",\n    get: function get() {\n      return this._shaper.oversample;\n    },\n    set: function set(oversampling) {\n      this._shaper.oversample = oversampling;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Chebyshev.prototype), \"dispose\", this).call(this);\n      this._shaper.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Effect.getDefaults(), {\n        order: 1,\n        oversample: \"none\"\n      });\n    }\n  }]);\n  return Chebyshev;\n}(Effect);","map":{"version":3,"mappings":";;;;;;;;;;;AAAA,SAASA,MAAM,QAAuB,UAAU;AAEhD,SAASC,oBAAoB,QAAQ,uBAAuB;AAC5D,SAASC,UAAU,QAAQ,sBAAsB;AAOjD;;;;;;;;;;;;;;AAcA,WAAaC,SAAU;EAAA;EAAA;EAmBtB;IAAA;IAAA;IAEC,0BAAMF,oBAAoB,CAACE,SAAS,CAACC,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,OAAO,CAAC,CAAC;IAnBjE,UAAI,GAAW,WAAW;IAoBlC,IAAMC,OAAO,GAAGL,oBAAoB,CAACE,SAAS,CAACC,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,OAAO,CAAC,CAAC;IAEnF,MAAKE,OAAO,GAAG,IAAIL,UAAU,CAAC;MAC7BM,OAAO,EAAE,MAAKA,OAAO;MACrBC,MAAM,EAAE;KACR,CAAC;IACF,MAAKC,MAAM,GAAGJ,OAAO,CAACK,KAAK;IAE3B,MAAKC,aAAa,CAAC,MAAKL,OAAO,CAAC;IAChC,MAAKI,KAAK,GAAGL,OAAO,CAACK,KAAK;IAC1B,MAAKE,UAAU,GAAGP,OAAO,CAACO,UAAU;IAAC;EACtC;EAAC;IAAA;IAAA;IASD;;;;;;IAMQ,yBAAgBC,CAAS,EAAEC,MAAc,EAAEC,IAAyB;MAC3E,IAAIA,IAAI,CAACC,GAAG,CAACF,MAAM,CAAC,EAAE;QACrB,OAAOC,IAAI,CAACE,GAAG,CAACH,MAAM,CAAW;OACjC,MAAM,IAAIA,MAAM,KAAK,CAAC,EAAE;QACxBC,IAAI,CAACG,GAAG,CAACJ,MAAM,EAAE,CAAC,CAAC;OACnB,MAAM,IAAIA,MAAM,KAAK,CAAC,EAAE;QACxBC,IAAI,CAACG,GAAG,CAACJ,MAAM,EAAED,CAAC,CAAC;OACnB,MAAM;QACNE,IAAI,CAACG,GAAG,CAACJ,MAAM,EAAE,CAAC,GAAGD,CAAC,GAAG,IAAI,CAACM,eAAe,CAACN,CAAC,EAAEC,MAAM,GAAG,CAAC,EAAEC,IAAI,CAAC,GAAG,IAAI,CAACI,eAAe,CAACN,CAAC,EAAEC,MAAM,GAAG,CAAC,EAAEC,IAAI,CAAC,CAAC;;MAEhH,OAAOA,IAAI,CAACE,GAAG,CAACH,MAAM,CAAW;IAClC;IAEA;;;;;;;;;;EAAA;IAAA;IAAA,KAUA,eAAS;MACR,OAAO,IAAI,CAACL,MAAM;IACnB,CAAC;IAAA,KACD,aAAUC,KAAK;MAAA;MACd,IAAI,CAACD,MAAM,GAAGC,KAAK;MACnB,IAAI,CAACJ,OAAO,CAACc,MAAM,CAAE,WAAC,EAAG;QACxB,OAAO,MAAI,CAACD,eAAe,CAACN,CAAC,EAAEH,KAAK,EAAE,IAAIW,GAAG,EAAE,CAAC;MACjD,CAAC,CAAE;IACJ;IAEA;;;EAAA;IAAA;IAAA,KAGA,eAAc;MACb,OAAO,IAAI,CAACf,OAAO,CAACM,UAAU;IAC/B,CAAC;IAAA,KACD,aAAeU,YAAY;MAC1B,IAAI,CAAChB,OAAO,CAACM,UAAU,GAAGU,YAAY;IACvC;EAAC;IAAA;IAAA,OAED,mBAAO;MACN;MACA,IAAI,CAAChB,OAAO,CAACiB,OAAO,EAAE;MACtB,OAAO,IAAI;IACZ;EAAC;IAAA;IAAA,OA5DD,uBAAkB;MACjB,OAAOC,MAAM,CAACC,MAAM,CAAC1B,MAAM,CAACI,WAAW,EAAE,EAAE;QAC1CO,KAAK,EAAE,CAAC;QACRE,UAAU,EAAE;OACZ,CAAC;IACH;EAAC;EAAA;AAAA,EAxC6Bb,MAAwB","names":["Effect","optionsFromArguments","WaveShaper","Chebyshev","getDefaults","arguments","options","_shaper","context","length","_order","order","connectEffect","oversample","x","degree","memo","has","get","set","_getCoefficient","setMap","Map","oversampling","dispose","Object","assign"],"sourceRoot":"","sources":["../../../Tone/effect/Chebyshev.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}