{"ast":null,"code":"import * as Tone from \"tone\";\nimport { Envelope, LFO } from \"tone\";\nimport { toRaw } from \"vue\";\nexport default class MyFilter {\n  constructor(type = \"peaking\", cutoff = 0.5, resonance = 0.5) {\n    this.filter_type = type;\n    this.cutoff = cutoff;\n    this.resonance = resonance;\n    this.modulatorsData = {\n      envelope: {\n        amount: 0,\n        parameters: {\n          attack: 1,\n          decay: 0.3,\n          sustain: 0.8,\n          release: 1\n        }\n      },\n      lfo: {\n        amount: 0,\n        parameters: {\n          frequency: 10,\n          waveform: \"sine\",\n          min: 0,\n          max: 1\n        }\n      }\n    };\n\n    //to stop moduoators only when there is one left active voice and the note is released\n    this.activeNotes = 0;\n    this.modulators = {\n      envelope: {\n        signal: this.createModulator(\"envelope\"),\n        scale: new Tone.ScaleExp(0, 1, 3),\n        amount: 0\n      },\n      lfo: {\n        signal: this.createModulator(\"lfo\"),\n        scale: new Tone.ScaleExp(0, 1, 3),\n        amount: 0\n      }\n    };\n    this.filter = new Tone.Filter();\n    this.initFilterParams();\n  }\n  getCutoff() {\n    return this.cutoff;\n  }\n  getResonance() {\n    return this.resonance;\n  }\n  createModulator(type) {\n    //console.log(\"creating modulator of type: \"+type)\n    switch (type) {\n      case \"envelope\":\n        return new Envelope();\n      case \"lfo\":\n        return new LFO();\n      default:\n        console.log(\"Error creating modulator\");\n        return null;\n    }\n  }\n\n  // ----------- AUDIO SETTERS--------------\n  initFilterParams() {\n    let self = this;\n\n    // init switched off filters\n    switch (this.filter_type) {\n      case \"lowpass\":\n        this.cutoff = .9;\n        this.resonance = 1;\n        break;\n      case \"highpass\":\n        this.cutoff = 0.1;\n        this.resonance = 1;\n        break;\n      case \"peaking\":\n        this.cutoff = 0.5;\n        this.resonance = 0.5;\n        break;\n      case \"bandpass\":\n        break;\n      case \"lowshelf\":\n        break;\n      case \"highshelf\":\n        break;\n      case \"notch\":\n        break;\n      case \"allpass\":\n        break;\n      default:\n        console.log(\"Invalid filter type\");\n    }\n    this.filter.set({\n      frequency: self.cutoffLogMapping(this.cutoff),\n      type: this.filter_type\n    });\n    this.scaleSetter(this.modulators.envelope);\n    this.scaleSetter(this.modulators.lfo);\n    this.connectModulator(this.modulators.envelope);\n    this.connectModulator(this.modulators.lfo);\n    this.updateModulators();\n  }\n\n  //------------MODULATORS LOGIC----------\n\n  scaleSetter(modulator, target = \"\") {\n    //console.log(modulator)\n    toRaw(modulator.scale).set({\n      min: Math.pow(10, Math.log10(this.cutoffLogMapping(this.cutoff)) - 1 * modulator.amount),\n      max: Math.pow(10, Math.log10(this.cutoffLogMapping(this.cutoff)) + 1 * modulator.amount)\n    });\n  }\n  connectModulator(modulator) {\n    modulator.signal.chain(modulator.scale, this.filter.frequency);\n  }\n  setModulatorParameters(type, target, parameters) {\n    this.modulatorsData[type].parameters = parameters;\n    this.updateModulators();\n  }\n  setModulatorAmount(type, target, amount) {\n    this.modulatorsData[type].amount = amount;\n    this.updateModulators();\n  }\n  updateModulators() {\n    for (let type in this.modulators) {\n      //update amount from preset\n      this.modulators[type].amount = this.modulatorsData[type].amount;\n      //reset scale\n      this.scaleSetter(this.modulators[type]);\n      //reset modulator\n      this.modulatorSetter(toRaw(this.modulators[type].signal), type, this.modulatorsData[type].parameters);\n    }\n  }\n  modulatorSetter(modulator, type, parameters) {\n    if (!toRaw(parameters).waveform) toRaw(parameters).waveform = modulator.type;\n    switch (type) {\n      case \"envelope\":\n        modulator.set({\n          \"attack\": parameters.attack,\n          \"decay\": parameters.decay,\n          \"sustain\": parameters.sustain,\n          \"release\": parameters.release + 0.001\n        });\n        break;\n      case \"lfo\":\n        modulator.set({\n          \"type\": toRaw(parameters).waveform,\n          \"frequency\": toRaw(parameters).frequency\n        });\n        break;\n      default:\n        console.log(\"Error setting modulator parameters, invalid args\");\n        break;\n    }\n  }\n  playNote(note = \"\", velocity = \"\") {\n    //trigger attack in modulators\n    this.modulators.envelope.signal.cancel(Tone.now());\n    this.modulators.envelope.signal.triggerAttack(Tone.now());\n    this.modulators.lfo.signal.stop();\n    this.modulators.lfo.signal.start();\n    //console.log(\"PLAYED FILTER MODULATORS\")\n    this.activeNotes++;\n  }\n  stopNote(note = \"\") {\n    if (this.activeNotes <= 1) {\n      this.modulators.envelope.signal.triggerRelease(Tone.now());\n      //lfos never stopped\n      //this.modulators.lfo.signal.stop()\n      //console.log(\"STOPPED FILTER MODULATORS\")\n    }\n\n    this.activeNotes--;\n  }\n\n  //--------------------\n\n  setCutoff(cutoff = this.cutoff) {\n    this.cutoff = cutoff;\n    let self = this;\n    this.filter.set({\n      frequency: self.cutoffLogMapping(this.cutoff)\n    });\n    /*\n    console.log(\n        this.filter_type +\n        \" cutoff: \" +\n        this.cutoff.toFixed(2) +\n        \" - \" +\n        this.cutoffLogMapping(this.cutoff).toFixed(0) +\n        \" Hz\"\n    );\n      */\n    this.updateModulators();\n  }\n  setResonance(resonance = this.resonance) {\n    this.resonance = resonance;\n    let self = this;\n    if (this.filter_type === \"lowshelf\" || this.filter_type === \"highshelf\" || this.filter_type === \"peaking\") {\n      // bell delta amplitude is controlled changing the 'gain' parameter\n      this.filter.set({\n        gain: self.resonanceRangeNormalizer(1 - self.resonance, this.filter_type)\n      });\n      /*\n      console.log(\n          \"Setting Peaking Resonance: \" +\n          self.resonanceRangeNormalizer(1 - self.resonance, this.filter_type)\n      );\n        */\n    } else if (this.filter_type === \"lowpass\" || this.filter_type === \"highpass\") {\n      // filter's Q is controlled changing the 'Q' parameter\n      this.filter.set({\n        Q: self.resonanceRangeNormalizer(1 - self.resonance, this.filter_type)\n      });\n      /*\n      console.log(\n          \"Setting LowPass/HighPass Resonance: \" +\n          self.resonanceRangeNormalizer(1 - self.resonance, this.filter_type)\n      );\n        */\n    }\n    /*\n        console.log(\n          \"resonance: \" +\n            this.resonance.toFixed(2) +\n            \" - \" +\n            Math.round(this.resonanceRangeNormalizer((self.resonance), this.type)) +\n            \" dB\"\n        );\n    */\n  }\n\n  connect(destination) {\n    try {\n      this.filter.connect(destination);\n    } catch (err) {\n      console.log(\"ERROR: \" + err + \" - myfilter: \", this.filter, \" -connect to destination: \", destination);\n    }\n  }\n  disconnect(destination) {\n    if (destination) {\n      this.filter.disconnect(destination);\n    } else {\n      this.filter.disconnect(destination);\n    }\n  }\n  getToneFilter() {\n    return this.filter;\n  }\n\n  // ----------- AUDIO HELPERS--------------\n  // takes value in [0, 1] range and it maps it to [50, 16000] interval in a logarithmic fashion\n  cutoffLogMapping(x) {\n    if (x < 0 || x > 1) {\n      console.error(\"Input value must be between 0 and 1.\");\n      return;\n    }\n    return 20 * Math.pow(10, Math.log10(22000 / 20) * x);\n  }\n\n  // takes value in [0, 1] range and it maps it to [0, 10] linearly\n  resonanceRangeNormalizer(x, type) {\n    if (x < 0 || x > 1) {\n      console.error(\"Input value must be between 0 and 1.\");\n      return;\n    }\n    switch (type) {\n      case \"lowpass\":\n        return 15 * x;\n      case \"highpass\":\n        return 15 * x;\n      case \"peaking\":\n        return 30 * (x - 0.5);\n      default:\n        break;\n    }\n  }\n}","map":{"version":3,"names":["Tone","Envelope","LFO","toRaw","MyFilter","constructor","type","cutoff","resonance","filter_type","modulatorsData","envelope","amount","parameters","attack","decay","sustain","release","lfo","frequency","waveform","min","max","activeNotes","modulators","signal","createModulator","scale","ScaleExp","filter","Filter","initFilterParams","getCutoff","getResonance","console","log","self","set","cutoffLogMapping","scaleSetter","connectModulator","updateModulators","modulator","target","Math","pow","log10","chain","setModulatorParameters","setModulatorAmount","modulatorSetter","playNote","note","velocity","cancel","now","triggerAttack","stop","start","stopNote","triggerRelease","setCutoff","setResonance","gain","resonanceRangeNormalizer","Q","connect","destination","err","disconnect","getToneFilter","x","error"],"sources":["/Users/guglielmofratticioli/Documents/POLIMI/FurioColombo.github.io/src/views/Synth/Filters/MyFilter.js"],"sourcesContent":["import * as Tone from \"tone\";\nimport {Envelope, LFO} from \"tone\";\nimport {toRaw} from \"vue\";\n\nexport default class MyFilter {\n    constructor(type = \"peaking\", cutoff = 0.5, resonance = 0.5) {\n\n        this.filter_type = type;\n        this.cutoff = cutoff;\n        this.resonance = resonance;\n\n        this.modulatorsData = {\n            envelope: {\n                amount: 0,\n                parameters: {\n                    attack: 1,\n                    decay: 0.3,\n                    sustain: 0.8,\n                    release: 1\n                }\n            },\n            lfo: {\n                amount: 0,\n                parameters: {\n                    frequency: 10,\n                    waveform: \"sine\",\n                    min: 0,\n                    max: 1\n                }\n            }\n        }\n\n        //to stop moduoators only when there is one left active voice and the note is released\n        this.activeNotes=0\n\n        this.modulators = {\n            envelope: {\n                signal: this.createModulator(\"envelope\"),\n                scale: new Tone.ScaleExp(0, 1, 3),\n                amount: 0\n            },\n            lfo: {\n                signal: this.createModulator(\"lfo\"),\n                scale: new Tone.ScaleExp(0, 1, 3),\n                amount: 0\n            }\n        }\n\n        this.filter = new Tone.Filter();\n        this.initFilterParams();\n\n\n    }\n\n    getCutoff() {\n        return this.cutoff\n    }\n\n    getResonance() {\n        return this.resonance\n    }\n\n    createModulator(type) {\n        //console.log(\"creating modulator of type: \"+type)\n        switch (type) {\n            case \"envelope\":\n                return new Envelope\n            case \"lfo\":\n                return new LFO\n            default:\n                console.log(\"Error creating modulator\")\n                return null\n        }\n    }\n\n\n    // ----------- AUDIO SETTERS--------------\n    initFilterParams() {\n        let self = this;\n\n        // init switched off filters\n        switch (this.filter_type) {\n            case \"lowpass\":\n                this.cutoff = .9;\n                this.resonance = 1;\n                break;\n            case \"highpass\":\n                this.cutoff = 0.1;\n                this.resonance = 1;\n                break;\n            case \"peaking\":\n                this.cutoff = 0.5;\n                this.resonance = 0.5;\n                break;\n            case \"bandpass\":\n                break;\n            case \"lowshelf\":\n                break;\n            case \"highshelf\":\n                break;\n            case \"notch\":\n                break;\n            case \"allpass\":\n                break;\n            default:\n                console.log(\"Invalid filter type\");\n        }\n\n        this.filter.set({\n            frequency: self.cutoffLogMapping(this.cutoff),\n            type: this.filter_type,\n        })\n\n        this.scaleSetter(this.modulators.envelope)\n        this.scaleSetter(this.modulators.lfo)\n        this.connectModulator(this.modulators.envelope)\n        this.connectModulator(this.modulators.lfo)\n        this.updateModulators()\n\n    }\n\n\n    //------------MODULATORS LOGIC----------\n\n    scaleSetter(modulator, target = \"\") {\n        //console.log(modulator)\n        toRaw(modulator.scale).set({\n\n            min: (Math.pow(10, Math.log10(this.cutoffLogMapping(this.cutoff)) - 1 * modulator.amount)),\n            max: (Math.pow(10, Math.log10(this.cutoffLogMapping(this.cutoff)) + 1 * modulator.amount)),\n        })\n\n    }\n\n    connectModulator(modulator) {\n        modulator.signal.chain(modulator.scale, this.filter.frequency)\n    }\n\n    setModulatorParameters(type, target, parameters) {\n        this.modulatorsData[type].parameters = parameters\n        this.updateModulators()\n    }\n\n    setModulatorAmount(type, target, amount) {\n        this.modulatorsData[type].amount = amount\n        this.updateModulators()\n    }\n\n    updateModulators() {\n        for (let type in this.modulators) {\n            //update amount from preset\n            this.modulators[type].amount = this.modulatorsData[type].amount\n            //reset scale\n            this.scaleSetter(this.modulators[type])\n            //reset modulator\n            this.modulatorSetter(toRaw(this.modulators[type].signal), type, this.modulatorsData[type].parameters)\n        }\n    }\n\n    modulatorSetter(modulator, type, parameters) {\n        if (!toRaw(parameters).waveform) toRaw(parameters).waveform = modulator.type\n        switch (type) {\n            case \"envelope\":\n                modulator.set({\n                    \"attack\": parameters.attack,\n                    \"decay\": parameters.decay,\n                    \"sustain\": parameters.sustain,\n                    \"release\": parameters.release + 0.001,\n                })\n                break;\n            case \"lfo\":\n                modulator.set({\n                    \"type\": toRaw(parameters).waveform,\n                    \"frequency\": toRaw(parameters).frequency\n                })\n                break;\n            default:\n                console.log(\"Error setting modulator parameters, invalid args\")\n                break;\n        }\n    }\n\n    playNote(note = \"\", velocity = \"\") {\n        //trigger attack in modulators\n        this.modulators.envelope.signal.cancel(Tone.now())\n        this.modulators.envelope.signal.triggerAttack(Tone.now())\n        this.modulators.lfo.signal.stop()\n        this.modulators.lfo.signal.start()\n        //console.log(\"PLAYED FILTER MODULATORS\")\n        this.activeNotes++\n    }\n    stopNote(note=\"\") {\n        if(this.activeNotes<=1){\n            this.modulators.envelope.signal.triggerRelease(Tone.now())\n            //lfos never stopped\n            //this.modulators.lfo.signal.stop()\n            //console.log(\"STOPPED FILTER MODULATORS\")\n        }\n        this.activeNotes--\n    }\n\n\n    //--------------------\n\n\n    setCutoff(cutoff = this.cutoff) {\n        this.cutoff = cutoff;\n        let self = this;\n        this.filter.set({\n            frequency: self.cutoffLogMapping(this.cutoff),\n        });\n        /*\n        console.log(\n            this.filter_type +\n            \" cutoff: \" +\n            this.cutoff.toFixed(2) +\n            \" - \" +\n            this.cutoffLogMapping(this.cutoff).toFixed(0) +\n            \" Hz\"\n        );\n\n         */\n        this.updateModulators()\n    }\n\n    setResonance(resonance = this.resonance) {\n        this.resonance = resonance;\n        let self = this;\n\n        if (this.filter_type === \"lowshelf\" || this.filter_type === \"highshelf\" || this.filter_type === \"peaking\") {\n            // bell delta amplitude is controlled changing the 'gain' parameter\n            this.filter.set({\n                gain: self.resonanceRangeNormalizer(1 - self.resonance, this.filter_type),\n            });\n            /*\n            console.log(\n                \"Setting Peaking Resonance: \" +\n                self.resonanceRangeNormalizer(1 - self.resonance, this.filter_type)\n            );\n\n             */\n        } else if (this.filter_type === \"lowpass\" || this.filter_type === \"highpass\") {\n            // filter's Q is controlled changing the 'Q' parameter\n            this.filter.set({\n                Q: self.resonanceRangeNormalizer(1 - self.resonance, this.filter_type),\n            });\n            /*\n            console.log(\n                \"Setting LowPass/HighPass Resonance: \" +\n                self.resonanceRangeNormalizer(1 - self.resonance, this.filter_type)\n            );\n\n             */\n        }\n        /*\n            console.log(\n              \"resonance: \" +\n                this.resonance.toFixed(2) +\n                \" - \" +\n                Math.round(this.resonanceRangeNormalizer((self.resonance), this.type)) +\n                \" dB\"\n            );\n        */\n    }\n\n    connect(destination) {\n        try {\n            this.filter.connect(destination);\n        } catch (err) {\n            console.log(\"ERROR: \" + err + \" - myfilter: \", this.filter, \" -connect to destination: \", destination);\n        }\n    }\n\n    disconnect(destination) {\n        if (destination) {\n            this.filter.disconnect(destination)\n        } else {\n            this.filter.disconnect(destination)\n        }\n    }\n\n    getToneFilter() {\n        return this.filter;\n    }\n\n    // ----------- AUDIO HELPERS--------------\n    // takes value in [0, 1] range and it maps it to [50, 16000] interval in a logarithmic fashion\n    cutoffLogMapping(x) {\n        if (x < 0 || x > 1) {\n            console.error(\"Input value must be between 0 and 1.\");\n            return;\n        }\n        return 20 * Math.pow(10, Math.log10(22000 / 20) * x);\n    }\n\n    // takes value in [0, 1] range and it maps it to [0, 10] linearly\n    resonanceRangeNormalizer(x, type) {\n        if (x < 0 || x > 1) {\n            console.error(\"Input value must be between 0 and 1.\");\n            return;\n        }\n        switch (type) {\n            case \"lowpass\":\n                return 15 * x;\n            case \"highpass\":\n                return 15 * x;\n            case \"peaking\":\n                return 30 * (x - 0.5);\n            default:\n                break;\n        }\n    }\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}