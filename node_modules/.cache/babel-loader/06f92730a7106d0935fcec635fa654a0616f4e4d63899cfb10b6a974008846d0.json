{"ast":null,"code":"import _classCallCheck from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n/**\n * Compressor is a thin wrapper around the Web Audio\n * [DynamicsCompressorNode](http://webaudio.github.io/web-audio-api/#the-dynamicscompressornode-interface).\n * Compression reduces the volume of loud sounds or amplifies quiet sounds\n * by narrowing or \"compressing\" an audio signal's dynamic range.\n * Read more on [Wikipedia](https://en.wikipedia.org/wiki/Dynamic_range_compression).\n * @example\n * const comp = new Tone.Compressor(-30, 3);\n * @category Component\n */\nexport var Compressor = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Compressor, _ToneAudioNode);\n  var _super = _createSuper(Compressor);\n  function Compressor() {\n    var _this;\n    _classCallCheck(this, Compressor);\n    _this = _super.call(this, optionsFromArguments(Compressor.getDefaults(), arguments, [\"threshold\", \"ratio\"]));\n    _this.name = \"Compressor\";\n    /**\n     * the compressor node\n     */\n    _this._compressor = _this.context.createDynamicsCompressor();\n    _this.input = _this._compressor;\n    _this.output = _this._compressor;\n    var options = optionsFromArguments(Compressor.getDefaults(), arguments, [\"threshold\", \"ratio\"]);\n    _this.threshold = new Param({\n      minValue: _this._compressor.threshold.minValue,\n      maxValue: _this._compressor.threshold.maxValue,\n      context: _this.context,\n      convert: false,\n      param: _this._compressor.threshold,\n      units: \"decibels\",\n      value: options.threshold\n    });\n    _this.attack = new Param({\n      minValue: _this._compressor.attack.minValue,\n      maxValue: _this._compressor.attack.maxValue,\n      context: _this.context,\n      param: _this._compressor.attack,\n      units: \"time\",\n      value: options.attack\n    });\n    _this.release = new Param({\n      minValue: _this._compressor.release.minValue,\n      maxValue: _this._compressor.release.maxValue,\n      context: _this.context,\n      param: _this._compressor.release,\n      units: \"time\",\n      value: options.release\n    });\n    _this.knee = new Param({\n      minValue: _this._compressor.knee.minValue,\n      maxValue: _this._compressor.knee.maxValue,\n      context: _this.context,\n      convert: false,\n      param: _this._compressor.knee,\n      units: \"decibels\",\n      value: options.knee\n    });\n    _this.ratio = new Param({\n      minValue: _this._compressor.ratio.minValue,\n      maxValue: _this._compressor.ratio.maxValue,\n      context: _this.context,\n      convert: false,\n      param: _this._compressor.ratio,\n      units: \"positive\",\n      value: options.ratio\n    });\n    // set the defaults\n    readOnly(_assertThisInitialized(_this), [\"knee\", \"release\", \"attack\", \"ratio\", \"threshold\"]);\n    return _this;\n  }\n  _createClass(Compressor, [{\n    key: \"reduction\",\n    get:\n    /**\n     * A read-only decibel value for metering purposes, representing the current amount of gain\n     * reduction that the compressor is applying to the signal. If fed no signal the value will be 0 (no gain reduction).\n     */\n    function get() {\n      return this._compressor.reduction;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Compressor.prototype), \"dispose\", this).call(this);\n      this._compressor.disconnect();\n      this.attack.dispose();\n      this.release.dispose();\n      this.threshold.dispose();\n      this.ratio.dispose();\n      this.knee.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        attack: 0.003,\n        knee: 30,\n        ratio: 12,\n        release: 0.25,\n        threshold: -24\n      });\n    }\n  }]);\n  return Compressor;\n}(ToneAudioNode);","map":{"version":3,"mappings":";;;;;;;;AAAA,SAASA,KAAK,QAAQ,0BAA0B;AAChD,SAASC,aAAa,QAA8B,kCAAkC;AAEtF,SAASC,oBAAoB,QAAQ,0BAA0B;AAC/D,SAASC,QAAQ,QAAQ,2BAA2B;AAUpD;;;;;;;;;;AAUA,WAAaC,UAAW;EAAA;EAAA;EAqDvB;IAAA;IAAA;IAEC,0BAAMF,oBAAoB,CAACE,UAAU,CAACC,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;IArD/E,UAAI,GAAW,YAAY;IAEpC;;;IAGQ,iBAAW,GAA2B,MAAKC,OAAO,CAACC,wBAAwB,EAAE;IAC5E,WAAK,GAAG,MAAKC,WAAW;IACxB,YAAM,GAAG,MAAKA,WAAW;IA+CjC,IAAMC,OAAO,GAAGR,oBAAoB,CAACE,UAAU,CAACC,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;IAEjG,MAAKK,SAAS,GAAG,IAAIX,KAAK,CAAC;MAC1BY,QAAQ,EAAE,MAAKH,WAAW,CAACE,SAAS,CAACC,QAAQ;MAC7CC,QAAQ,EAAE,MAAKJ,WAAW,CAACE,SAAS,CAACE,QAAQ;MAC7CN,OAAO,EAAE,MAAKA,OAAO;MACrBO,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE,MAAKN,WAAW,CAACE,SAAS;MACjCK,KAAK,EAAE,UAAU;MACjBC,KAAK,EAAEP,OAAO,CAACC;KACf,CAAC;IAEF,MAAKO,MAAM,GAAG,IAAIlB,KAAK,CAAC;MACvBY,QAAQ,EAAE,MAAKH,WAAW,CAACS,MAAM,CAACN,QAAQ;MAC1CC,QAAQ,EAAE,MAAKJ,WAAW,CAACS,MAAM,CAACL,QAAQ;MAC1CN,OAAO,EAAE,MAAKA,OAAO;MACrBQ,KAAK,EAAE,MAAKN,WAAW,CAACS,MAAM;MAC9BF,KAAK,EAAE,MAAM;MACbC,KAAK,EAAEP,OAAO,CAACQ;KACf,CAAC;IAEF,MAAKC,OAAO,GAAG,IAAInB,KAAK,CAAC;MACxBY,QAAQ,EAAE,MAAKH,WAAW,CAACU,OAAO,CAACP,QAAQ;MAC3CC,QAAQ,EAAE,MAAKJ,WAAW,CAACU,OAAO,CAACN,QAAQ;MAC3CN,OAAO,EAAE,MAAKA,OAAO;MACrBQ,KAAK,EAAE,MAAKN,WAAW,CAACU,OAAO;MAC/BH,KAAK,EAAE,MAAM;MACbC,KAAK,EAAEP,OAAO,CAACS;KACf,CAAC;IAEF,MAAKC,IAAI,GAAG,IAAIpB,KAAK,CAAC;MACrBY,QAAQ,EAAE,MAAKH,WAAW,CAACW,IAAI,CAACR,QAAQ;MACxCC,QAAQ,EAAE,MAAKJ,WAAW,CAACW,IAAI,CAACP,QAAQ;MACxCN,OAAO,EAAE,MAAKA,OAAO;MACrBO,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE,MAAKN,WAAW,CAACW,IAAI;MAC5BJ,KAAK,EAAE,UAAU;MACjBC,KAAK,EAAEP,OAAO,CAACU;KACf,CAAC;IAEF,MAAKC,KAAK,GAAG,IAAIrB,KAAK,CAAC;MACtBY,QAAQ,EAAE,MAAKH,WAAW,CAACY,KAAK,CAACT,QAAQ;MACzCC,QAAQ,EAAE,MAAKJ,WAAW,CAACY,KAAK,CAACR,QAAQ;MACzCN,OAAO,EAAE,MAAKA,OAAO;MACrBO,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE,MAAKN,WAAW,CAACY,KAAK;MAC7BL,KAAK,EAAE,UAAU;MACjBC,KAAK,EAAEP,OAAO,CAACW;KACf,CAAC;IAEF;IACAlB,QAAQ,gCAAO,CAAC,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC;IAAC;EACrE;EAAC;IAAA;IAAA;IAYD;;;;IAIA,eAAa;MACZ,OAAO,IAAI,CAACM,WAAW,CAACa,SAAS;IAClC;EAAC;IAAA;IAAA,OAED,mBAAO;MACN;MACA,IAAI,CAACb,WAAW,CAACc,UAAU,EAAE;MAC7B,IAAI,CAACL,MAAM,CAACM,OAAO,EAAE;MACrB,IAAI,CAACL,OAAO,CAACK,OAAO,EAAE;MACtB,IAAI,CAACb,SAAS,CAACa,OAAO,EAAE;MACxB,IAAI,CAACH,KAAK,CAACG,OAAO,EAAE;MACpB,IAAI,CAACJ,IAAI,CAACI,OAAO,EAAE;MACnB,OAAO,IAAI;IACZ;EAAC;IAAA;IAAA,OA3BD,uBAAkB;MACjB,OAAOC,MAAM,CAACC,MAAM,CAACzB,aAAa,CAACI,WAAW,EAAE,EAAE;QACjDa,MAAM,EAAE,KAAK;QACbE,IAAI,EAAE,EAAE;QACRC,KAAK,EAAE,EAAE;QACTF,OAAO,EAAE,IAAI;QACbR,SAAS,EAAE,CAAC;OACZ,CAAC;IACH;EAAC;EAAA;AAAA,EAtH8BV,aAAgC","names":["Param","ToneAudioNode","optionsFromArguments","readOnly","Compressor","getDefaults","arguments","context","createDynamicsCompressor","_compressor","options","threshold","minValue","maxValue","convert","param","units","value","attack","release","knee","ratio","reduction","disconnect","dispose","Object","assign"],"sourceRoot":"","sources":["../../../../Tone/component/dynamics/Compressor.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}