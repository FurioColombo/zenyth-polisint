{"ast":null,"code":"import { normalizeStyle as _normalizeStyle, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"oscilloscope\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"canvas\", {\n    ref: \"canvas\",\n    \"class\": \"oscilloscopeCanvas\",\n    style: _normalizeStyle(this.oscilloscopeCanvas)\n  }, null, 4)]);\n}","map":{"version":3,"mappings":";;EACO,SAAM;AAAc;;uBAAzBA,oBAEM,OAFNC,UAEM,GADJC,oBAA0F;IAAlFC,GAAG,EAAC,QAAQ;IAAC,SAAM,oBAAoB;IAAEC,KAAK,uBAAOC,kBAAkB","names":["_createElementBlock","_hoisted_1","_createElementVNode","ref","style","oscilloscopeCanvas"],"sourceRoot":"","sources":["C:\\Home\\Projects\\Programmazione\\WebStorm\\myZenythPolisinT\\zenyth_polisint\\src\\views\\Synth\\Tools\\Oscilloscope.vue"],"sourcesContent":["<template>\r\n  <div class=\"oscilloscope\">\r\n    <canvas ref=\"canvas\" class=\"oscilloscopeCanvas\" :style=\"this.oscilloscopeCanvas\"></canvas>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as Tone from \"tone\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      oscilloscopeData: [],\r\n      timing: 10,\r\n    };\r\n  },\r\n\r\n  mounted() {\r\n    this.oscilloscope = new Tone.Waveform();\r\n    Tone.getDestination().connect(this.oscilloscope);\r\n    this.startOscilloscope();\r\n\r\n    // use the ref to get the canvas element\r\n    this.canvas = this.$refs.canvas;\r\n\r\n    // set the canvas width and height to 100%\r\n    this.canvas.width = 4*this.canvas.offsetWidth;\r\n    this.canvas.height = 4*this.canvas.offsetHeight;\r\n\r\n    // get the canvas context\r\n    this.ctx = this.canvas.getContext(\"2d\");\r\n  },\r\n  methods: {\r\n    setTiming(timing) {\r\n      this.timing = timing;\r\n      clearInterval(this.intervalId);\r\n      this.startOscilloscope();\r\n    },\r\n    startOscilloscope() {\r\n        //console.log(\"avviando oscilloscope con timer \"+this.timing)\r\n      this.intervalId = setInterval(() => {\r\n        this.updateOscilloscopeData();\r\n      }, this.timing);\r\n    },\r\n    draw(data) {\r\n      // clear the canvas\r\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n      // draw the data on the canvas\r\n      // set the line color\r\n      this.ctx.strokeStyle = \"#658060\";\r\n      // set the line width\r\n      this.ctx.lineWidth = 6;\r\n      this.ctx.beginPath();\r\n\r\n      // loop through the data and plot it on the canvas\r\n      for (let i = 0; i < data.length; i++) {\r\n        // calculate the x and y position of the point\r\n        let x = i * (this.canvas.width / data.length);\r\n        let y = (this.canvas.height / 2) * (1 - data[i]);\r\n\r\n        // move to the x and y position\r\n        this.ctx.moveTo(x, y);\r\n        // draw a line to the next point\r\n        this.ctx.lineTo(x + this.canvas.width / data.length, y);\r\n      }\r\n      // draw the line\r\n      this.ctx.stroke();\r\n      this.ctx.moveTo(0, 0);\r\n    },\r\n    updateOscilloscopeData() {\r\n      this.oscilloscopeData = this.oscilloscope.getValue();\r\n      this.draw(this.oscilloscopeData);\r\n      //console.log(this.oscilloscopeData);\r\n    },\r\n  },\r\n  computed: {\r\n    oscilloscopeCanvas(){\r\n      return{\r\n        background: this.colors.green.glow,\r\n      }\r\n    }\r\n  },\r\n  beforeDestroy() {\r\n    this.oscilloscope.dispose();\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n.oscilloscope {\r\n  grid-row: 2;\r\n  margin: 0.15vw 0.3vw 0.3vw;\r\n  box-sizing: border-box;\r\n  \r\n}\r\n.oscilloscopeCanvas {\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: #caffbf;\r\n  border-radius: 0.2vw;\r\n  border: 0.1vw solid #334030;\r\n  box-sizing: border-box;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}