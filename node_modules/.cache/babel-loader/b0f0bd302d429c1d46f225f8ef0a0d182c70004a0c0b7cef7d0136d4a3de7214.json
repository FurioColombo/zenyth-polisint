{"ast":null,"code":"import { normalizeStyle as _normalizeStyle, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"spectral-analyzer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"canvas\", {\n    \"class\": \"analyzerCanvas\",\n    ref: \"canvas\",\n    style: _normalizeStyle(this.analyzerCanvas)\n  }, null, 4)]);\n}","map":{"version":3,"mappings":";;EACO,SAAM;AAAmB;;uBAA9BA,oBAEM,OAFNC,UAEM,GADJC,oBAAkF;IAA1E,SAAM,gBAAgB;IAACC,GAAG,EAAC,QAAQ;IAAEC,KAAK,uBAAOC,cAAc","names":["_createElementBlock","_hoisted_1","_createElementVNode","ref","style","analyzerCanvas"],"sourceRoot":"","sources":["C:\\Home\\Projects\\Programmazione\\WebStorm\\myZenythPolisinT\\zenyth_polisint\\src\\views\\Synth\\Tools\\SpecAnalyzer.vue"],"sourcesContent":["<template>\r\n  <div class=\"spectral-analyzer\">\r\n    <canvas class=\"analyzerCanvas\" ref=\"canvas\" :style=\"this.analyzerCanvas\"></canvas>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as Tone from \"tone\";\r\nimport { dbToGain, gainToDb } from \"tone\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      timing: 10,\r\n    };\r\n  },\r\n  mounted() {\r\n    this.analyser = new Tone.Analyser(\"fft\", 2048);\r\n    this.canvasCtx = this.$refs.canvas.getContext(\"2d\");\r\n    Tone.getDestination().connect(this.analyser);\r\n    this.startAnalyzer()\r\n  },\r\n  methods: {\r\n    draw() {\r\n      //requestAnimationFrame(this.draw);\r\n\r\n      this.data = this.analyser.getValue();\r\n      this.canvasCtx.strokeStyle = \"#658060\";\r\n      //console.log(this.data)\r\n\r\n      // clear the canvas\r\n      this.canvasCtx.clearRect(\r\n        0,\r\n        0,\r\n        this.$refs.canvas.width,\r\n        this.$refs.canvas.height\r\n      );\r\n        let x\r\n\r\n        \r\n\r\n      // render the analysis on the canvas\r\n      for (let i = 0; i < this.data.length; i++) {\r\n        \r\n        this.value = 6*dbToGain(this.data[i])*this.$refs.canvas.height;\r\n        //console.log(this.value)\r\n        x = (Math.log10(i) / Math.log10(2048)) * this.$refs.canvas.width\r\n        this.canvasCtx.fillStyle = \"black\";\r\n        this.canvasCtx.fillRect(x, this.$refs.canvas.height - this.value, 1, this.value);\r\n      }\r\n    },\r\n    startAnalyzer() {\r\n      //console.log(this.$refs.canvas.height)\r\n        //console.log(\"avviando analyzer con timer \"+this.timing)\r\n      this.intervalId = setInterval(() => {\r\n        this.draw();\r\n      }, 10);\r\n    },\r\n  },\r\n  computed: {\r\n    analyzerCanvas(){\r\n      return{\r\n        background: this.colors.green.glow\r\n      }\r\n    }\r\n  },\r\n  beforeDestroy() {},\r\n};\r\n</script>\r\n\r\n<style>\r\n.spectral-analyzer{\r\n  grid-row: 1;\r\n  margin: 0.3vw 0.3vw 0.15vw;\r\n  box-sizing: border-box;\r\n}\r\n.analyzerCanvas {\r\n  width: 100%;\r\n  height: 100%;\r\n  border-radius: 0.2vw;\r\n  border: 0.1vw solid #334030;\r\n  box-sizing: border-box;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}