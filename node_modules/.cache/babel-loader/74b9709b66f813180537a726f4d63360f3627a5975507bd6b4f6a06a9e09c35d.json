{"ast":null,"code":"import { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { MultibandSplit } from \"../channel/MultibandSplit\";\n/**\n * EQ3 provides 3 equalizer bins: Low/Mid/High.\n * @category Component\n */\nexport class EQ3 extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]));\n    this.name = \"EQ3\";\n    /**\n     * the output\n     */\n    this.output = new Gain({\n      context: this.context\n    });\n    this._internalChannels = [];\n    const options = optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]);\n    this.input = this._multibandSplit = new MultibandSplit({\n      context: this.context,\n      highFrequency: options.highFrequency,\n      lowFrequency: options.lowFrequency\n    });\n    this._lowGain = new Gain({\n      context: this.context,\n      gain: options.low,\n      units: \"decibels\"\n    });\n    this._midGain = new Gain({\n      context: this.context,\n      gain: options.mid,\n      units: \"decibels\"\n    });\n    this._highGain = new Gain({\n      context: this.context,\n      gain: options.high,\n      units: \"decibels\"\n    });\n    this.low = this._lowGain.gain;\n    this.mid = this._midGain.gain;\n    this.high = this._highGain.gain;\n    this.Q = this._multibandSplit.Q;\n    this.lowFrequency = this._multibandSplit.lowFrequency;\n    this.highFrequency = this._multibandSplit.highFrequency;\n    // the frequency bands\n    this._multibandSplit.low.chain(this._lowGain, this.output);\n    this._multibandSplit.mid.chain(this._midGain, this.output);\n    this._multibandSplit.high.chain(this._highGain, this.output);\n    readOnly(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n    this._internalChannels = [this._multibandSplit];\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      high: 0,\n      highFrequency: 2500,\n      low: 0,\n      lowFrequency: 400,\n      mid: 0\n    });\n  }\n  /**\n   * Clean up.\n   */\n  dispose() {\n    super.dispose();\n    writable(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n    this._multibandSplit.dispose();\n    this.lowFrequency.dispose();\n    this.highFrequency.dispose();\n    this._lowGain.dispose();\n    this._midGain.dispose();\n    this._highGain.dispose();\n    this.low.dispose();\n    this.mid.dispose();\n    this.high.dispose();\n    this.Q.dispose();\n    return this;\n  }\n}","map":{"version":3,"mappings":"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","names":["Gain","ToneAudioNode","optionsFromArguments","readOnly","writable","MultibandSplit","EQ3","constructor","getDefaults","arguments","context","options","input","_multibandSplit","highFrequency","lowFrequency","_lowGain","gain","low","units","_midGain","mid","_highGain","high","Q","chain","output","_internalChannels","Object","assign","dispose"],"sourceRoot":"","sources":["../../../../Tone/component/filter/EQ3.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}