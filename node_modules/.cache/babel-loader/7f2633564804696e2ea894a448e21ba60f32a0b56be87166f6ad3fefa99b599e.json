{"ast":null,"code":"import _objectSpread from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport \"core-js/modules/es.array-buffer.slice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.float32-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.find-last.js\";\nimport \"core-js/modules/es.typed-array.find-last-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nvar DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  curve: null,\n  oversample: 'none'\n};\nexport var createWaveShaperNodeConstructor = function createWaveShaperNodeConstructor(audioNodeConstructor, createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) {\n  return /*#__PURE__*/function (_audioNodeConstructor) {\n    _inherits(WaveShaperNode, _audioNodeConstructor);\n    var _super = _createSuper(WaveShaperNode);\n    function WaveShaperNode(context, options) {\n      var _this;\n      _classCallCheck(this, WaveShaperNode);\n      var nativeContext = getNativeContext(context);\n      var mergedOptions = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n      var nativeWaveShaperNode = createNativeWaveShaperNode(nativeContext, mergedOptions);\n      var isOffline = isNativeOfflineAudioContext(nativeContext);\n      var waveShaperNodeRenderer = isOffline ? createWaveShaperNodeRenderer() : null;\n      // @todo Add a mechanism to only switch a WaveShaperNode to active while it is connected.\n      _this = _super.call(this, context, true, nativeWaveShaperNode, waveShaperNodeRenderer);\n      _this._isCurveNullified = false;\n      _this._nativeWaveShaperNode = nativeWaveShaperNode;\n      // @todo Determine a meaningful tail-time instead of just using one second.\n      setAudioNodeTailTime(_assertThisInitialized(_this), 1);\n      return _this;\n    }\n    _createClass(WaveShaperNode, [{\n      key: \"curve\",\n      get: function get() {\n        if (this._isCurveNullified) {\n          return null;\n        }\n        return this._nativeWaveShaperNode.curve;\n      },\n      set: function set(value) {\n        // Bug #103: Safari does not allow to set the curve to null.\n        if (value === null) {\n          this._isCurveNullified = true;\n          this._nativeWaveShaperNode.curve = new Float32Array([0, 0]);\n        } else {\n          // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n          // Bug #104: Chrome and Edge will throw an InvalidAccessError when the curve has less than two samples.\n          if (value.length < 2) {\n            throw createInvalidStateError();\n          }\n          this._isCurveNullified = false;\n          this._nativeWaveShaperNode.curve = value;\n        }\n      }\n    }, {\n      key: \"oversample\",\n      get: function get() {\n        return this._nativeWaveShaperNode.oversample;\n      },\n      set: function set(value) {\n        this._nativeWaveShaperNode.oversample = value;\n      }\n    }]);\n    return WaveShaperNode;\n  }(audioNodeConstructor);\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,IAAMA,eAAe,GAAG;EACpBC,YAAY,EAAE,CAAC;EACfC,gBAAgB,EAAE,KAAK;EACvBC,qBAAqB,EAAE,UAAU;EACjCC,KAAK,EAAE,IAAI;EACXC,UAAU,EAAE;CACN;AAEV,OAAO,IAAMC,+BAA+B,GAAsC,SAArEA,+BAA+B,CACxCC,oBAAoB,EACpBC,uBAAuB,EACvBC,0BAA0B,EAC1BC,4BAA4B,EAC5BC,gBAAgB,EAChBC,2BAA2B,EAC3BC,oBAAoB,EACpB;EACA;IAAA;IAAA;IAKI,wBAAYC,OAAU,EAAEC,OAAqC;MAAA;MAAA;MACzD,IAAMC,aAAa,GAAGL,gBAAgB,CAACG,OAAO,CAAC;MAC/C,IAAMG,aAAa,mCAAQjB,eAAe,GAAKe,OAAO,CAAE;MACxD,IAAMG,oBAAoB,GAAGT,0BAA0B,CAACO,aAAa,EAAEC,aAAa,CAAC;MACrF,IAAME,SAAS,GAAGP,2BAA2B,CAACI,aAAa,CAAC;MAC5D,IAAMI,sBAAsB,GAAiCD,SAAS,GAAGT,4BAA4B,EAAE,GAAG,IAAK;MAE/G;MACA,0BAAMI,OAAO,EAAE,IAAI,EAAEI,oBAAoB,EAAEE,sBAAsB;MAEjE,MAAKC,iBAAiB,GAAG,KAAK;MAC9B,MAAKC,qBAAqB,GAAGJ,oBAAoB;MAEjD;MACAL,oBAAoB,gCAAO,CAAC,CAAC;MAAC;IAClC;IAAC;MAAA;MAAA,KAED,eAAS;QACL,IAAI,IAAI,CAACQ,iBAAiB,EAAE;UACxB,OAAO,IAAI;;QAGf,OAAO,IAAI,CAACC,qBAAqB,CAAClB,KAAK;MAC3C,CAAC;MAAA,KAED,aAAUmB,KAAK;QACX;QACA,IAAIA,KAAK,KAAK,IAAI,EAAE;UAChB,IAAI,CAACF,iBAAiB,GAAG,IAAI;UAC7B,IAAI,CAACC,qBAAqB,CAAClB,KAAK,GAAG,IAAIoB,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;SAC9D,MAAM;UACH;UACA;UACA,IAAID,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE;YAClB,MAAMjB,uBAAuB,EAAE;;UAGnC,IAAI,CAACa,iBAAiB,GAAG,KAAK;UAC9B,IAAI,CAACC,qBAAqB,CAAClB,KAAK,GAAGmB,KAAK;;MAEhD;IAAC;MAAA;MAAA,KAED,eAAc;QACV,OAAO,IAAI,CAACD,qBAAqB,CAACjB,UAAU;MAChD,CAAC;MAAA,KAED,aAAekB,KAAK;QAChB,IAAI,CAACD,qBAAqB,CAACjB,UAAU,GAAGkB,KAAK;MACjD;IAAC;IAAA;EAAA,EArDmDhB,oBAAuB;AAuDnF,CAAC","names":["DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","curve","oversample","createWaveShaperNodeConstructor","audioNodeConstructor","createInvalidStateError","createNativeWaveShaperNode","createWaveShaperNodeRenderer","getNativeContext","isNativeOfflineAudioContext","setAudioNodeTailTime","context","options","nativeContext","mergedOptions","nativeWaveShaperNode","isOffline","waveShaperNodeRenderer","_isCurveNullified","_nativeWaveShaperNode","value","Float32Array","length"],"sourceRoot":"","sources":["../../../src/factories/wave-shaper-node-constructor.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}