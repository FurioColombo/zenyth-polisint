{"ast":null,"code":"import { Param } from \"../context/Param\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode } from \"./ToneAudioNode\";\n/**\n * Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface).\n * @category Core\n * @example\n * return Tone.Offline(() => {\n * \tconst delay = new Tone.Delay(0.1).toDestination();\n * \t// connect the signal to both the delay and the destination\n * \tconst pulse = new Tone.PulseOscillator().connect(delay).toDestination();\n * \t// start and stop the pulse\n * \tpulse.start(0).stop(0.01);\n * }, 0.5, 1);\n */\nexport class Delay extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]));\n    this.name = \"Delay\";\n    const options = optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]);\n    const maxDelayInSeconds = this.toSeconds(options.maxDelay);\n    this._maxDelay = Math.max(maxDelayInSeconds, this.toSeconds(options.delayTime));\n    this._delayNode = this.input = this.output = this.context.createDelay(maxDelayInSeconds);\n    this.delayTime = new Param({\n      context: this.context,\n      param: this._delayNode.delayTime,\n      units: \"time\",\n      value: options.delayTime,\n      minValue: 0,\n      maxValue: this.maxDelay\n    });\n    readOnly(this, \"delayTime\");\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      delayTime: 0,\n      maxDelay: 1\n    });\n  }\n  /**\n   * The maximum delay time. This cannot be changed after\n   * the value is passed into the constructor.\n   */\n  get maxDelay() {\n    return this._maxDelay;\n  }\n  /**\n   * Clean up.\n   */\n  dispose() {\n    super.dispose();\n    this._delayNode.disconnect();\n    this.delayTime.dispose();\n    return this;\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,KAAK,QAAQ,kBAAkB;AAExC,SAASC,oBAAoB,QAAQ,kBAAkB;AACvD,SAASC,QAAQ,QAAQ,mBAAmB;AAC5C,SAASC,aAAa,QAA8B,iBAAiB;AAOrE;;;;;;;;;;;;AAYA,OAAM,MAAOC,KAAM,SAAQD,aAA2B;EAiCrDE;IACC,KAAK,CAACJ,oBAAoB,CAACG,KAAK,CAACE,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC,CAAC;IAhC9E,SAAI,GAAW,OAAO;IAkC9B,MAAMC,OAAO,GAAGP,oBAAoB,CAACG,KAAK,CAACE,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;IAE/F,MAAME,iBAAiB,GAAG,IAAI,CAACC,SAAS,CAACF,OAAO,CAACG,QAAQ,CAAC;IAC1D,IAAI,CAACC,SAAS,GAAGC,IAAI,CAACC,GAAG,CAACL,iBAAiB,EAAE,IAAI,CAACC,SAAS,CAACF,OAAO,CAACO,SAAS,CAAC,CAAC;IAE/E,IAAI,CAACC,UAAU,GAAG,IAAI,CAACC,KAAK,GAAG,IAAI,CAACC,MAAM,GAAG,IAAI,CAACC,OAAO,CAACC,WAAW,CAACX,iBAAiB,CAAC;IAExF,IAAI,CAACM,SAAS,GAAG,IAAIf,KAAK,CAAC;MAC1BmB,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBE,KAAK,EAAE,IAAI,CAACL,UAAU,CAACD,SAAS;MAChCO,KAAK,EAAE,MAAM;MACbC,KAAK,EAAEf,OAAO,CAACO,SAAS;MACxBS,QAAQ,EAAE,CAAC;MACXC,QAAQ,EAAE,IAAI,CAACd;KACf,CAAC;IAEFT,QAAQ,CAAC,IAAI,EAAE,WAAW,CAAC;EAC5B;EAEA,OAAOI,WAAW;IACjB,OAAOoB,MAAM,CAACC,MAAM,CAACxB,aAAa,CAACG,WAAW,EAAE,EAAE;MACjDS,SAAS,EAAE,CAAC;MACZJ,QAAQ,EAAE;KACV,CAAC;EACH;EAEA;;;;EAIA,IAAIA,QAAQ;IACX,OAAO,IAAI,CAACC,SAAS;EACtB;EAEA;;;EAGAgB,OAAO;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACZ,UAAU,CAACa,UAAU,EAAE;IAC5B,IAAI,CAACd,SAAS,CAACa,OAAO,EAAE;IACxB,OAAO,IAAI;EACZ","names":["Param","optionsFromArguments","readOnly","ToneAudioNode","Delay","constructor","getDefaults","arguments","options","maxDelayInSeconds","toSeconds","maxDelay","_maxDelay","Math","max","delayTime","_delayNode","input","output","context","createDelay","param","units","value","minValue","maxValue","Object","assign","dispose","disconnect"],"sourceRoot":"","sources":["../../../../Tone/core/context/Delay.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}