{"ast":null,"code":"import { normalizeStyle as _normalizeStyle, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"spectral-analyzer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"canvas\", {\n    \"class\": \"analyzerCanvas\",\n    ref: \"canvas\",\n    style: _normalizeStyle(this.analyzerCanvas)\n  }, null, 4)]);\n}","map":{"version":3,"mappings":";;EACO,SAAM;AAAmB;;uBAA9BA,oBAEM,OAFNC,UAEM,GADJC,oBAAkF;IAA1E,SAAM,gBAAgB;IAACC,GAAG,EAAC,QAAQ;IAAEC,KAAK,uBAAOC,cAAc","names":["_createElementBlock","_hoisted_1","_createElementVNode","ref","style","analyzerCanvas"],"sourceRoot":"","sources":["/Users/eliapirrello/Documents/GitHub/zenyth/src/views/Synth/Tools/SpecAnalyzer.vue"],"sourcesContent":["<template>\n  <div class=\"spectral-analyzer\">\n    <canvas class=\"analyzerCanvas\" ref=\"canvas\" :style=\"this.analyzerCanvas\"></canvas>\n  </div>\n</template>\n\n<script>\nimport * as Tone from \"tone\";\nimport { dbToGain, gainToDb } from \"tone\";\n\nexport default {\n  data() {\n    return {\n      timing: 10,\n    };\n  },\n  mounted() {\n    this.analyser = new Tone.Analyser(\"fft\", 2048);\n    this.canvasCtx = this.$refs.canvas.getContext(\"2d\");\n    Tone.getDestination().connect(this.analyser);\n    this.startAnalyzer()\n  },\n  methods: {\n    draw() {\n      //requestAnimationFrame(this.draw);\n\n      this.data = this.analyser.getValue();\n      this.canvasCtx.strokeStyle = \"#658060\";\n      //console.log(this.data)\n\n      // clear the canvas\n      this.canvasCtx.clearRect(\n        0,\n        0,\n        this.$refs.canvas.width,\n        this.$refs.canvas.height\n      );\n        let x\n\n        \n\n      // render the analysis on the canvas\n      for (let i = 0; i < this.data.length; i++) {\n        \n        this.value = 6*dbToGain(this.data[i])*this.$refs.canvas.height;\n        //console.log(this.value)\n        x = (Math.log10(i) / Math.log10(2048)) * this.$refs.canvas.width\n        this.canvasCtx.fillStyle = \"black\";\n        this.canvasCtx.fillRect(x, this.$refs.canvas.height - this.value, 1, this.value);\n      }\n    },\n    startAnalyzer() {\n      //console.log(this.$refs.canvas.height)\n        //console.log(\"avviando analyzer con timer \"+this.timing)\n      this.intervalId = setInterval(() => {\n        this.draw();\n      }, 10);\n    },\n  },\n  computed: {\n    analyzerCanvas(){\n      return{\n        background: this.colors.green.glow\n      }\n    }\n  },\n  beforeDestroy() {},\n};\n</script>\n\n<style>\n.spectral-analyzer{\n  grid-row: 1;\n  margin: 0.3vw 0.3vw 0.15vw;\n  box-sizing: border-box;\n}\n.analyzerCanvas {\n  width: 100%;\n  height: 100%;\n  border-radius: 0.2vw;\n  border: 0.1vw solid #334030;\n  box-sizing: border-box;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}