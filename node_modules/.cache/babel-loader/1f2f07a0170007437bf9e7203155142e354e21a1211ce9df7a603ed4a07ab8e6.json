{"ast":null,"code":"import { Tone } from \"../Tone\";\nimport { isDefined, isObject, isString, isUndef } from \"../util/TypeCheck\";\n/**\n * TimeBase is a flexible encoding of time which can be evaluated to and from a string.\n */\nexport class TimeBaseClass extends Tone {\n  /**\n   * @param context The context associated with the time value. Used to compute\n   * Transport and context-relative timing.\n   * @param  value  The time value as a number, string or object\n   * @param  units  Unit values\n   */\n  constructor(context, value, units) {\n    super();\n    /**\n     * The default units\n     */\n    this.defaultUnits = \"s\";\n    this._val = value;\n    this._units = units;\n    this.context = context;\n    this._expressions = this._getExpressions();\n  }\n  /**\n   * All of the time encoding expressions\n   */\n  _getExpressions() {\n    return {\n      hz: {\n        method: value => {\n          return this._frequencyToUnits(parseFloat(value));\n        },\n        regexp: /^(\\d+(?:\\.\\d+)?)hz$/i\n      },\n      i: {\n        method: value => {\n          return this._ticksToUnits(parseInt(value, 10));\n        },\n        regexp: /^(\\d+)i$/i\n      },\n      m: {\n        method: value => {\n          return this._beatsToUnits(parseInt(value, 10) * this._getTimeSignature());\n        },\n        regexp: /^(\\d+)m$/i\n      },\n      n: {\n        method: (value, dot) => {\n          const numericValue = parseInt(value, 10);\n          const scalar = dot === \".\" ? 1.5 : 1;\n          if (numericValue === 1) {\n            return this._beatsToUnits(this._getTimeSignature()) * scalar;\n          } else {\n            return this._beatsToUnits(4 / numericValue) * scalar;\n          }\n        },\n        regexp: /^(\\d+)n(\\.?)$/i\n      },\n      number: {\n        method: value => {\n          return this._expressions[this.defaultUnits].method.call(this, value);\n        },\n        regexp: /^(\\d+(?:\\.\\d+)?)$/\n      },\n      s: {\n        method: value => {\n          return this._secondsToUnits(parseFloat(value));\n        },\n        regexp: /^(\\d+(?:\\.\\d+)?)s$/\n      },\n      samples: {\n        method: value => {\n          return parseInt(value, 10) / this.context.sampleRate;\n        },\n        regexp: /^(\\d+)samples$/\n      },\n      t: {\n        method: value => {\n          const numericValue = parseInt(value, 10);\n          return this._beatsToUnits(8 / (Math.floor(numericValue) * 3));\n        },\n        regexp: /^(\\d+)t$/i\n      },\n      tr: {\n        method: (m, q, s) => {\n          let total = 0;\n          if (m && m !== \"0\") {\n            total += this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n          }\n          if (q && q !== \"0\") {\n            total += this._beatsToUnits(parseFloat(q));\n          }\n          if (s && s !== \"0\") {\n            total += this._beatsToUnits(parseFloat(s) / 4);\n          }\n          return total;\n        },\n        regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?$/\n      }\n    };\n  }\n  //-------------------------------------\n  // \tVALUE OF\n  //-------------------------------------\n  /**\n   * Evaluate the time value. Returns the time in seconds.\n   */\n  valueOf() {\n    if (this._val instanceof TimeBaseClass) {\n      this.fromType(this._val);\n    }\n    if (isUndef(this._val)) {\n      return this._noArg();\n    } else if (isString(this._val) && isUndef(this._units)) {\n      for (const units in this._expressions) {\n        if (this._expressions[units].regexp.test(this._val.trim())) {\n          this._units = units;\n          break;\n        }\n      }\n    } else if (isObject(this._val)) {\n      let total = 0;\n      for (const typeName in this._val) {\n        if (isDefined(this._val[typeName])) {\n          const quantity = this._val[typeName];\n          // @ts-ignore\n          const time = new this.constructor(this.context, typeName).valueOf() * quantity;\n          total += time;\n        }\n      }\n      return total;\n    }\n    if (isDefined(this._units)) {\n      const expr = this._expressions[this._units];\n      const matching = this._val.toString().trim().match(expr.regexp);\n      if (matching) {\n        return expr.method.apply(this, matching.slice(1));\n      } else {\n        return expr.method.call(this, this._val);\n      }\n    } else if (isString(this._val)) {\n      return parseFloat(this._val);\n    } else {\n      return this._val;\n    }\n  }\n  //-------------------------------------\n  // \tUNIT CONVERSIONS\n  //-------------------------------------\n  /**\n   * Returns the value of a frequency in the current units\n   */\n  _frequencyToUnits(freq) {\n    return 1 / freq;\n  }\n  /**\n   * Return the value of the beats in the current units\n   */\n  _beatsToUnits(beats) {\n    return 60 / this._getBpm() * beats;\n  }\n  /**\n   * Returns the value of a second in the current units\n   */\n  _secondsToUnits(seconds) {\n    return seconds;\n  }\n  /**\n   * Returns the value of a tick in the current time units\n   */\n  _ticksToUnits(ticks) {\n    return ticks * this._beatsToUnits(1) / this._getPPQ();\n  }\n  /**\n   * With no arguments, return 'now'\n   */\n  _noArg() {\n    return this._now();\n  }\n  //-------------------------------------\n  // \tTEMPO CONVERSIONS\n  //-------------------------------------\n  /**\n   * Return the bpm\n   */\n  _getBpm() {\n    return this.context.transport.bpm.value;\n  }\n  /**\n   * Return the timeSignature\n   */\n  _getTimeSignature() {\n    return this.context.transport.timeSignature;\n  }\n  /**\n   * Return the PPQ or 192 if Transport is not available\n   */\n  _getPPQ() {\n    return this.context.transport.PPQ;\n  }\n  //-------------------------------------\n  // \tCONVERSION INTERFACE\n  //-------------------------------------\n  /**\n   * Coerce a time type into this units type.\n   * @param type Any time type units\n   */\n  fromType(type) {\n    this._units = undefined;\n    switch (this.defaultUnits) {\n      case \"s\":\n        this._val = type.toSeconds();\n        break;\n      case \"i\":\n        this._val = type.toTicks();\n        break;\n      case \"hz\":\n        this._val = type.toFrequency();\n        break;\n      case \"midi\":\n        this._val = type.toMidi();\n        break;\n    }\n    return this;\n  }\n  /**\n   * Return the value in hertz\n   */\n  toFrequency() {\n    return 1 / this.toSeconds();\n  }\n  /**\n   * Return the time in samples\n   */\n  toSamples() {\n    return this.toSeconds() * this.context.sampleRate;\n  }\n  /**\n   * Return the time in milliseconds.\n   */\n  toMilliseconds() {\n    return this.toSeconds() * 1000;\n  }\n}","map":{"version":3,"mappings":"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","names":["Tone","isDefined","isObject","isString","isUndef","TimeBaseClass","constructor","context","value","units","_val","_units","_expressions","_getExpressions","hz","method","_frequencyToUnits","parseFloat","regexp","i","_ticksToUnits","parseInt","m","_beatsToUnits","_getTimeSignature","n","dot","numericValue","scalar","number","defaultUnits","call","s","_secondsToUnits","samples","sampleRate","t","Math","floor","tr","q","total","valueOf","fromType","_noArg","test","trim","typeName","quantity","time","expr","matching","toString","match","apply","slice","freq","beats","_getBpm","seconds","ticks","_getPPQ","_now","transport","bpm","timeSignature","PPQ","type","undefined","toSeconds","toTicks","toFrequency","toMidi","toSamples","toMilliseconds"],"sourceRoot":"","sources":["../../../../Tone/core/type/TimeBase.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}