{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.weak-map.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.reflect.define-property.js\";\nimport \"core-js/modules/es.reflect.to-string-tag.js\";\nimport { assertRange } from \"./Debug\";\n/**\n * Assert that the number is in the given range.\n */\nexport function range(min) {\n  var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\n  var valueMap = new WeakMap();\n  return function (target, propertyKey) {\n    Reflect.defineProperty(target, propertyKey, {\n      configurable: true,\n      enumerable: true,\n      get: function get() {\n        return valueMap.get(this);\n      },\n      set: function set(newValue) {\n        assertRange(newValue, min, max);\n        valueMap.set(this, newValue);\n      }\n    });\n  };\n}\n/**\n * Convert the time to seconds and assert that the time is in between the two\n * values when being set.\n */\nexport function timeRange(min) {\n  var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\n  var valueMap = new WeakMap();\n  return function (target, propertyKey) {\n    Reflect.defineProperty(target, propertyKey, {\n      configurable: true,\n      enumerable: true,\n      get: function get() {\n        return valueMap.get(this);\n      },\n      set: function set(newValue) {\n        assertRange(this.toSeconds(newValue), min, max);\n        valueMap.set(this, newValue);\n      }\n    });\n  };\n}","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,WAAW,QAAQ,SAAS;AAGrC;;;AAGA,OAAM,SAAUC,KAAK,CAACC,GAAW,EAAgB;EAAA,IAAdC,GAAG,uEAAGC,QAAQ;EAChD,IAAMC,QAAQ,GAAyB,IAAIC,OAAO,EAAE;EACpD,OAAO,UAASC,MAAW,EAAEC,WAA4B;IACxDC,OAAO,CAACC,cAAc,CACrBH,MAAM,EACNC,WAAW,EACX;MACCG,YAAY,EAAE,IAAI;MAClBC,UAAU,EAAE,IAAI;MAChBC,GAAG,EAAE;QACJ,OAAOR,QAAQ,CAACQ,GAAG,CAAC,IAAI,CAAC;MAC1B,CAAC;MACDC,GAAG,EAAE,aAASC,QAAgB;QAC7Bf,WAAW,CAACe,QAAQ,EAAEb,GAAG,EAAEC,GAAG,CAAC;QAC/BE,QAAQ,CAACS,GAAG,CAAC,IAAI,EAAEC,QAAQ,CAAC;MAC7B;KACA,CACD;EACF,CAAC;AACF;AAEA;;;;AAIA,OAAM,SAAUC,SAAS,CAACd,GAAW,EAAgB;EAAA,IAAdC,GAAG,uEAAGC,QAAQ;EACpD,IAAMC,QAAQ,GAAuB,IAAIC,OAAO,EAAE;EAClD,OAAO,UAASC,MAAW,EAAEC,WAAmB;IAC/CC,OAAO,CAACC,cAAc,CACrBH,MAAM,EACNC,WAAW,EACX;MACCG,YAAY,EAAE,IAAI;MAClBC,UAAU,EAAE,IAAI;MAChBC,GAAG,EAAE;QACJ,OAAOR,QAAQ,CAACQ,GAAG,CAAC,IAAI,CAAC;MAC1B,CAAC;MACDC,GAAG,EAAE,aAASC,QAAc;QAC3Bf,WAAW,CAAC,IAAI,CAACiB,SAAS,CAACF,QAAQ,CAAC,EAAEb,GAAG,EAAEC,GAAG,CAAC;QAC/CE,QAAQ,CAACS,GAAG,CAAC,IAAI,EAAEC,QAAQ,CAAC;MAC7B;KACA,CACD;EACF,CAAC;AACF","names":["assertRange","range","min","max","Infinity","valueMap","WeakMap","target","propertyKey","Reflect","defineProperty","configurable","enumerable","get","set","newValue","timeRange","toSeconds"],"sourceRoot":"","sources":["../../../../Tone/core/util/Decorator.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}