{"ast":null,"code":"import _classCallCheck from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.reverse.js\";\nimport \"core-js/modules/es.function.bind.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport { Source } from \"../Source\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Clock } from \"../../core/clock/Clock\";\nimport { ToneBufferSource } from \"./ToneBufferSource\";\nimport { intervalToFrequencyRatio } from \"../../core/type/Conversions\";\nimport { assertRange } from \"../../core/util/Debug\";\n/**\n * GrainPlayer implements [granular synthesis](https://en.wikipedia.org/wiki/Granular_synthesis).\n * Granular Synthesis enables you to adjust pitch and playback rate independently. The grainSize is the\n * amount of time each small chunk of audio is played for and the overlap is the\n * amount of crossfading transition time between successive grains.\n * @category Source\n */\nexport var GrainPlayer = /*#__PURE__*/function (_Source) {\n  _inherits(GrainPlayer, _Source);\n  var _super = _createSuper(GrainPlayer);\n  function GrainPlayer() {\n    var _this;\n    _classCallCheck(this, GrainPlayer);\n    _this = _super.call(this, optionsFromArguments(GrainPlayer.getDefaults(), arguments, [\"url\", \"onload\"]));\n    _this.name = \"GrainPlayer\";\n    /**\n     * Internal loopStart value\n     */\n    _this._loopStart = 0;\n    /**\n     * Internal loopStart value\n     */\n    _this._loopEnd = 0;\n    /**\n     * All of the currently playing BufferSources\n     */\n    _this._activeSources = [];\n    var options = optionsFromArguments(GrainPlayer.getDefaults(), arguments, [\"url\", \"onload\"]);\n    _this.buffer = new ToneAudioBuffer({\n      onload: options.onload,\n      onerror: options.onerror,\n      reverse: options.reverse,\n      url: options.url\n    });\n    _this._clock = new Clock({\n      context: _this.context,\n      callback: _this._tick.bind(_assertThisInitialized(_this)),\n      frequency: 1 / options.grainSize\n    });\n    _this._playbackRate = options.playbackRate;\n    _this._grainSize = options.grainSize;\n    _this._overlap = options.overlap;\n    _this.detune = options.detune;\n    // setup\n    _this.overlap = options.overlap;\n    _this.loop = options.loop;\n    _this.playbackRate = options.playbackRate;\n    _this.grainSize = options.grainSize;\n    _this.loopStart = options.loopStart;\n    _this.loopEnd = options.loopEnd;\n    _this.reverse = options.reverse;\n    _this._clock.on(\"stop\", _this._onstop.bind(_assertThisInitialized(_this)));\n    return _this;\n  }\n  _createClass(GrainPlayer, [{\n    key: \"_start\",\n    value:\n    /**\n     * Internal start method\n     */\n    function _start(time, offset, duration) {\n      offset = defaultArg(offset, 0);\n      offset = this.toSeconds(offset);\n      time = this.toSeconds(time);\n      var grainSize = 1 / this._clock.frequency.getValueAtTime(time);\n      this._clock.start(time, offset / grainSize);\n      if (duration) {\n        this.stop(time + this.toSeconds(duration));\n      }\n    }\n    /**\n     * Stop and then restart the player from the beginning (or offset)\n     * @param  time When the player should start.\n     * @param  offset The offset from the beginning of the sample to start at.\n     * @param  duration How long the sample should play. If no duration is given,\n     * \t\t\t\t\tit will default to the full length of the sample (minus any offset)\n     */\n  }, {\n    key: \"restart\",\n    value: function restart(time, offset, duration) {\n      _get(_getPrototypeOf(GrainPlayer.prototype), \"restart\", this).call(this, time, offset, duration);\n      return this;\n    }\n  }, {\n    key: \"_restart\",\n    value: function _restart(time, offset, duration) {\n      this._stop(time);\n      this._start(time, offset, duration);\n    }\n    /**\n     * Internal stop method\n     */\n  }, {\n    key: \"_stop\",\n    value: function _stop(time) {\n      this._clock.stop(time);\n    }\n    /**\n     * Invoked when the clock is stopped\n     */\n  }, {\n    key: \"_onstop\",\n    value: function _onstop(time) {\n      // stop the players\n      this._activeSources.forEach(function (source) {\n        source.fadeOut = 0;\n        source.stop(time);\n      });\n      this.onstop(this);\n    }\n    /**\n     * Invoked on each clock tick. scheduled a new grain at this time.\n     */\n  }, {\n    key: \"_tick\",\n    value: function _tick(time) {\n      var _this2 = this;\n      // check if it should stop looping\n      var ticks = this._clock.getTicksAtTime(time);\n      var offset = ticks * this._grainSize;\n      this.log(\"offset\", offset);\n      if (!this.loop && offset > this.buffer.duration) {\n        this.stop(time);\n        return;\n      }\n      // at the beginning of the file, the fade in should be 0\n      var fadeIn = offset < this._overlap ? 0 : this._overlap;\n      // create a buffer source\n      var source = new ToneBufferSource({\n        context: this.context,\n        url: this.buffer,\n        fadeIn: fadeIn,\n        fadeOut: this._overlap,\n        loop: this.loop,\n        loopStart: this._loopStart,\n        loopEnd: this._loopEnd,\n        // compute the playbackRate based on the detune\n        playbackRate: intervalToFrequencyRatio(this.detune / 100)\n      }).connect(this.output);\n      source.start(time, this._grainSize * ticks);\n      source.stop(time + this._grainSize / this.playbackRate);\n      // add it to the active sources\n      this._activeSources.push(source);\n      // remove it when it's done\n      source.onended = function () {\n        var index = _this2._activeSources.indexOf(source);\n        if (index !== -1) {\n          _this2._activeSources.splice(index, 1);\n        }\n      };\n    }\n    /**\n     * The playback rate of the sample\n     */\n  }, {\n    key: \"playbackRate\",\n    get: function get() {\n      return this._playbackRate;\n    },\n    set: function set(rate) {\n      assertRange(rate, 0.001);\n      this._playbackRate = rate;\n      this.grainSize = this._grainSize;\n    }\n    /**\n     * The loop start time.\n     */\n  }, {\n    key: \"loopStart\",\n    get: function get() {\n      return this._loopStart;\n    },\n    set: function set(time) {\n      if (this.buffer.loaded) {\n        assertRange(this.toSeconds(time), 0, this.buffer.duration);\n      }\n      this._loopStart = this.toSeconds(time);\n    }\n    /**\n     * The loop end time.\n     */\n  }, {\n    key: \"loopEnd\",\n    get: function get() {\n      return this._loopEnd;\n    },\n    set: function set(time) {\n      if (this.buffer.loaded) {\n        assertRange(this.toSeconds(time), 0, this.buffer.duration);\n      }\n      this._loopEnd = this.toSeconds(time);\n    }\n    /**\n     * The direction the buffer should play in\n     */\n  }, {\n    key: \"reverse\",\n    get: function get() {\n      return this.buffer.reverse;\n    },\n    set: function set(rev) {\n      this.buffer.reverse = rev;\n    }\n    /**\n     * The size of each chunk of audio that the\n     * buffer is chopped into and played back at.\n     */\n  }, {\n    key: \"grainSize\",\n    get: function get() {\n      return this._grainSize;\n    },\n    set: function set(size) {\n      this._grainSize = this.toSeconds(size);\n      this._clock.frequency.setValueAtTime(this._playbackRate / this._grainSize, this.now());\n    }\n    /**\n     * The duration of the cross-fade between successive grains.\n     */\n  }, {\n    key: \"overlap\",\n    get: function get() {\n      return this._overlap;\n    },\n    set: function set(time) {\n      var computedTime = this.toSeconds(time);\n      assertRange(computedTime, 0);\n      this._overlap = computedTime;\n    }\n    /**\n     * If all the buffer is loaded\n     */\n  }, {\n    key: \"loaded\",\n    get: function get() {\n      return this.buffer.loaded;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(GrainPlayer.prototype), \"dispose\", this).call(this);\n      this.buffer.dispose();\n      this._clock.dispose();\n      this._activeSources.forEach(function (source) {\n        return source.dispose();\n      });\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Source.getDefaults(), {\n        onload: noOp,\n        onerror: noOp,\n        overlap: 0.1,\n        grainSize: 0.2,\n        playbackRate: 1,\n        detune: 0,\n        loop: false,\n        loopStart: 0,\n        loopEnd: 0,\n        reverse: false\n      });\n    }\n  }]);\n  return GrainPlayer;\n}(Source);","map":{"version":3,"mappings":"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","names":["Source","noOp","ToneAudioBuffer","defaultArg","optionsFromArguments","Clock","ToneBufferSource","intervalToFrequencyRatio","assertRange","GrainPlayer","getDefaults","arguments","options","buffer","onload","onerror","reverse","url","_clock","context","callback","_tick","bind","frequency","grainSize","_playbackRate","playbackRate","_grainSize","_overlap","overlap","detune","loop","loopStart","loopEnd","on","_onstop","time","offset","duration","toSeconds","getValueAtTime","start","stop","_stop","_start","_activeSources","forEach","source","fadeOut","onstop","ticks","getTicksAtTime","log","fadeIn","_loopStart","_loopEnd","connect","output","push","onended","index","indexOf","splice","rate","loaded","rev","size","setValueAtTime","now","computedTime","dispose","Object","assign"],"sourceRoot":"","sources":["../../../../Tone/source/buffer/GrainPlayer.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}