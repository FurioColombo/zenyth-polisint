{"ast":null,"code":"import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Compressor } from \"./Compressor\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MidSideSplit } from \"../channel/MidSideSplit\";\nimport { MidSideMerge } from \"../channel/MidSideMerge\";\nimport { readOnly } from \"../../core/util/Interface\";\n/**\n * MidSideCompressor applies two different compressors to the [[mid]]\n * and [[side]] signal components of the input. See [[MidSideSplit]] and [[MidSideMerge]].\n * @category Component\n */\nexport class MidSideCompressor extends ToneAudioNode {\n  constructor() {\n    super(Object.assign(optionsFromArguments(MidSideCompressor.getDefaults(), arguments)));\n    this.name = \"MidSideCompressor\";\n    const options = optionsFromArguments(MidSideCompressor.getDefaults(), arguments);\n    this._midSideSplit = this.input = new MidSideSplit({\n      context: this.context\n    });\n    this._midSideMerge = this.output = new MidSideMerge({\n      context: this.context\n    });\n    this.mid = new Compressor(Object.assign(options.mid, {\n      context: this.context\n    }));\n    this.side = new Compressor(Object.assign(options.side, {\n      context: this.context\n    }));\n    this._midSideSplit.mid.chain(this.mid, this._midSideMerge.mid);\n    this._midSideSplit.side.chain(this.side, this._midSideMerge.side);\n    readOnly(this, [\"mid\", \"side\"]);\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      mid: {\n        ratio: 3,\n        threshold: -24,\n        release: 0.03,\n        attack: 0.02,\n        knee: 16\n      },\n      side: {\n        ratio: 6,\n        threshold: -30,\n        release: 0.25,\n        attack: 0.03,\n        knee: 10\n      }\n    });\n  }\n  dispose() {\n    super.dispose();\n    this.mid.dispose();\n    this.side.dispose();\n    this._midSideSplit.dispose();\n    this._midSideMerge.dispose();\n    return this;\n  }\n}","map":{"version":3,"mappings":"AAAA,SAAgCA,aAAa,QAA8B,kCAAkC;AAC7G,SAASC,UAAU,QAA2B,cAAc;AAC5D,SAASC,oBAAoB,QAAQ,0BAA0B;AAC/D,SAASC,YAAY,QAAQ,yBAAyB;AACtD,SAASC,YAAY,QAAQ,yBAAyB;AACtD,SAASC,QAAQ,QAA0B,2BAA2B;AAOtE;;;;;AAKA,OAAM,MAAOC,iBAAkB,SAAQN,aAAuC;EA4B7EO;IACC,KAAK,CAACC,MAAM,CAACC,MAAM,CAACP,oBAAoB,CAACI,iBAAiB,CAACI,WAAW,EAAE,EAAEC,SAAS,CAAC,CAAC,CAAC;IA3B9E,SAAI,GAAW,mBAAmB;IA4B1C,MAAMC,OAAO,GAAGV,oBAAoB,CAACI,iBAAiB,CAACI,WAAW,EAAE,EAAEC,SAAS,CAAC;IAEhF,IAAI,CAACE,aAAa,GAAG,IAAI,CAACC,KAAK,GAAG,IAAIX,YAAY,CAAC;MAAEY,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE,CAAC;IAC7E,IAAI,CAACC,aAAa,GAAG,IAAI,CAACC,MAAM,GAAG,IAAIb,YAAY,CAAC;MAAEW,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE,CAAC;IAC9E,IAAI,CAACG,GAAG,GAAG,IAAIjB,UAAU,CAACO,MAAM,CAACC,MAAM,CAACG,OAAO,CAACM,GAAG,EAAE;MAAEH,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE,CAAC,CAAC;IAChF,IAAI,CAACI,IAAI,GAAG,IAAIlB,UAAU,CAACO,MAAM,CAACC,MAAM,CAACG,OAAO,CAACO,IAAI,EAAE;MAAEJ,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE,CAAC,CAAC;IAElF,IAAI,CAACF,aAAa,CAACK,GAAG,CAACE,KAAK,CAAC,IAAI,CAACF,GAAG,EAAE,IAAI,CAACF,aAAa,CAACE,GAAG,CAAC;IAC9D,IAAI,CAACL,aAAa,CAACM,IAAI,CAACC,KAAK,CAAC,IAAI,CAACD,IAAI,EAAE,IAAI,CAACH,aAAa,CAACG,IAAI,CAAC;IACjEd,QAAQ,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;EAChC;EAEA,OAAOK,WAAW;IACjB,OAAOF,MAAM,CAACC,MAAM,CAACT,aAAa,CAACU,WAAW,EAAE,EAAE;MACjDQ,GAAG,EAAE;QACJG,KAAK,EAAE,CAAC;QACRC,SAAS,EAAE,CAAC,EAAE;QACdC,OAAO,EAAE,IAAI;QACbC,MAAM,EAAE,IAAI;QACZC,IAAI,EAAE;OACN;MACDN,IAAI,EAAE;QACLE,KAAK,EAAE,CAAC;QACRC,SAAS,EAAE,CAAC,EAAE;QACdC,OAAO,EAAE,IAAI;QACbC,MAAM,EAAE,IAAI;QACZC,IAAI,EAAE;;KAEP,CAAC;EACH;EAEAC,OAAO;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACR,GAAG,CAACQ,OAAO,EAAE;IAClB,IAAI,CAACP,IAAI,CAACO,OAAO,EAAE;IACnB,IAAI,CAACb,aAAa,CAACa,OAAO,EAAE;IAC5B,IAAI,CAACV,aAAa,CAACU,OAAO,EAAE;IAC5B,OAAO,IAAI;EACZ","names":["ToneAudioNode","Compressor","optionsFromArguments","MidSideSplit","MidSideMerge","readOnly","MidSideCompressor","constructor","Object","assign","getDefaults","arguments","options","_midSideSplit","input","context","_midSideMerge","output","mid","side","chain","ratio","threshold","release","attack","knee","dispose"],"sourceRoot":"","sources":["../../../../Tone/component/dynamics/MidSideCompressor.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}