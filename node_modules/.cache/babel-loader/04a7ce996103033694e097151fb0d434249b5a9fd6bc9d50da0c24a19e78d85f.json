{"ast":null,"code":"import \"core-js/modules/es.array.fill.js\";\nimport \"core-js/modules/web.timers.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.number.to-fixed.js\";\nimport { nextTick } from \"vue\";\nvar qualFactor = 50;\nvar sinValsBuffer = new Array(qualFactor).fill(0);\nvar triValsBuffer = new Array(qualFactor).fill(0);\nvar sqValsBuffer = new Array(qualFactor).fill(0);\nvar sawValsBuffer = new Array(qualFactor).fill(0);\n\n//todo: rmv real audio\n// todo: remap dept in -0.5 + 0.5 range\n// todo: start only when needs to be visualized\n\nexport default {\n  components: {},\n  props: [\"freq\", \"depth\", \"wave\"],\n  data: function data() {\n    return {\n      timing: 10,\n      //freq: this.freq,\n      //depth: this.depth,\n      intervalId: \"\",\n      waveform: this.wave\n    };\n  },\n  mounted: function mounted() {\n    //console.log(\"mounted LfoVisual\")\n    this.timing = 1000 / (qualFactor * this.$props.freq);\n    for (var i = 0; i < qualFactor; i++) {\n      sinValsBuffer[i] = Math.sin(Math.PI * 2 / qualFactor * i) * this.$props.depth;\n      triValsBuffer[i] = this.$props.depth - 2 * Math.abs(2 * (i - qualFactor / 2) / qualFactor) * this.$props.depth;\n      i >= qualFactor / 2 ? sqValsBuffer[i] = this.$props.depth : sqValsBuffer[i] = -this.$props.depth;\n      sawValsBuffer[i] = this.depth * (2 * i / qualFactor - 1);\n    }\n    switch (this.waveform) {\n      case 'sine':\n        this.oscilloscopeData = sinValsBuffer;\n        break;\n      case 'triangle':\n        this.oscilloscopeData = triValsBuffer;\n        break;\n      case 'square':\n        this.oscilloscopeData = sqValsBuffer;\n        break;\n      case 'sawtooth':\n        this.oscilloscopeData = sawValsBuffer;\n        break;\n      default:\n        console.log(\"ERROR - waveform not recognised\");\n    }\n\n    // --------- GRAPHICS INIT --------\n    // use the ref to get the canvas element\n    this.canvas = this.$refs.canvas;\n\n    // set the canvas width and height to 100%\n    this.canvas.width = 4 * this.canvas.offsetWidth;\n    this.canvas.height = 4 * this.canvas.offsetHeight;\n    // get the canvas context\n    this.ctx = this.canvas.getContext(\"2d\");\n  },\n  methods: {\n    updateParams: function updateParams(_ref) {\n      var _this = this;\n      var _ref$freq = _ref.freq,\n        freq = _ref$freq === void 0 ? this.$props.freq : _ref$freq,\n        _ref$depth = _ref.depth,\n        depth = _ref$depth === void 0 ? this.$props.depth : _ref$depth,\n        _ref$waveform = _ref.waveform,\n        waveform = _ref$waveform === void 0 ? this.waveform : _ref$waveform;\n      //this.$props.freq = freq;\n      //this.$props.depth = depth;\n      this.waveform = waveform;\n      //console.log(\"this.wave: \" + waveform);\n\n      this.timing = 1000 / (qualFactor * this.$props.freq);\n      switch (this.waveform) {\n        case 'sine':\n          this.oscilloscopeData = sinValsBuffer;\n          break;\n        case 'triangle':\n          this.oscilloscopeData = triValsBuffer;\n          break;\n        case 'square':\n          this.oscilloscopeData = sqValsBuffer;\n          break;\n        case 'sawtooth':\n          this.oscilloscopeData = sawValsBuffer;\n          break;\n        default:\n          console.log(\"ERROR - waveform not recognised\");\n      }\n      if (this.intervalId) {\n        clearInterval(this.intervalId);\n      }\n      this.stopOscilloscope();\n      //console.log(\"end - this.wave: \" + waveform)\n\n      nextTick(function () {\n        _this.startOscilloscope();\n      });\n    },\n    startOscilloscope: function startOscilloscope() {\n      var _this2 = this;\n      this.canvas.width = 4 * this.canvas.offsetWidth;\n      this.canvas.height = 4 * this.canvas.offsetHeight;\n      //console.log(\"start - this.waveform: \" + this.waveform)\n\n      // console.log(\"this.timing: \" + this.timing)\n      // console.log(\"avviando oscilloscope con timer \" + this.timing)\n      this.intervalId = setInterval(function () {\n        var t = _this2.oscilloscopeData.shift();\n        _this2.oscilloscopeData.push(t);\n        _this2.draw(_this2.oscilloscopeData);\n      }, this.timing);\n      //console.log(\"this.timing:  \" + this.intervalId);\n    },\n    stopOscilloscope: function stopOscilloscope() {\n      if (this.intervalId) {\n        clearInterval(this.intervalId);\n      }\n    },\n    draw: function draw(data) {\n      // clear the canvas\n      //console.log(\"drawing\")\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n      var x, y, y_next;\n\n      // draw the data on the canvas\n      // set the line color\n      this.ctx.strokeStyle = \"black\";\n      // set the line width\n      this.ctx.lineWidth = 2;\n      this.ctx.beginPath();\n      y_next = this.canvas.height / 2 * (1 - data[0]).toFixed(3);\n      // loop through the data and plot it on the canvas\n      for (var i = 1; i < data.length; i++) {\n        y = y_next;\n        // calculate the x and y position of the point\n        x = i * (this.canvas.width / data.length).toFixed(3);\n        y_next = this.canvas.height / 2 * (1 - data[i]).toFixed(3);\n        // move to the x and y position\n        this.ctx.moveTo(x, y);\n        // draw a line to the next point\n        this.ctx.lineTo(x + this.canvas.width / data.length, y_next);\n        // console.log(x, y)\n      }\n      // draw the line\n      this.ctx.stroke();\n      this.ctx.moveTo(0, 0);\n    },\n    beforeDestroy: function beforeDestroy() {\n      if (this.oscilloscope) {\n        this.oscilloscope.disconnect();\n        this.oscilloscope.dispose();\n      }\n    }\n  },\n  computed: {\n    oscilloscopeCanvas: function oscilloscopeCanvas() {\n      return {\n        background: this.colors.purple.glow\n      };\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["nextTick","qualFactor","sinValsBuffer","Array","fill","triValsBuffer","sqValsBuffer","sawValsBuffer","components","props","data","timing","intervalId","waveform","wave","mounted","$props","freq","i","Math","sin","PI","depth","abs","oscilloscopeData","console","log","canvas","$refs","width","offsetWidth","height","offsetHeight","ctx","getContext","methods","updateParams","clearInterval","stopOscilloscope","startOscilloscope","setInterval","t","shift","push","draw","clearRect","x","y","y_next","strokeStyle","lineWidth","beginPath","toFixed","length","moveTo","lineTo","stroke","beforeDestroy","oscilloscope","disconnect","dispose","computed","oscilloscopeCanvas","background","colors","purple","glow"],"sourceRoot":"","sources":["C:\\Home\\Projects\\Programmazione\\WebStorm\\myZenythPolisinT\\zenyth_polisint\\src\\views\\Synth\\Modulators\\LfoVisualizer.vue"],"sourcesContent":["<template>\r\n  <div class=\"lfoOscilloscope\">\r\n    <canvas ref=\"canvas\" class=\"lfoOscilloscopeCanvas\" :style=\"this.oscilloscopeCanvas\"></canvas>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {nextTick} from \"vue\";\r\n\r\nconst qualFactor = 50\r\nconst sinValsBuffer = new Array(qualFactor).fill(0);\r\nconst triValsBuffer = new Array(qualFactor).fill(0);\r\nconst sqValsBuffer = new Array(qualFactor).fill(0);\r\nconst sawValsBuffer = new Array(qualFactor).fill(0);\r\n\r\n//todo: rmv real audio\r\n// todo: remap dept in -0.5 + 0.5 range\r\n// todo: start only when needs to be visualized\r\n\r\nexport default {\r\n  components: {},\r\n  props: [\"freq\", \"depth\", \"wave\"],\r\n  data() {\r\n    return {\r\n      timing: 10,\r\n      //freq: this.freq,\r\n      //depth: this.depth,\r\n      intervalId: \"\",\r\n      waveform: this.wave\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    //console.log(\"mounted LfoVisual\")\r\n    this.timing = 1000 / (qualFactor * this.$props.freq);\r\n    for (let i = 0; i < qualFactor; i++) {\r\n      sinValsBuffer[i] = Math.sin(Math.PI*2/qualFactor * i) * this.$props.depth;\r\n      triValsBuffer[i] = this.$props.depth - 2*Math.abs(2*(i - qualFactor/2)/qualFactor) * this.$props.depth\r\n      i >= qualFactor/2? sqValsBuffer[i] = this.$props.depth : sqValsBuffer[i] = - this.$props.depth\r\n      sawValsBuffer[i] = this.depth * (2*i/qualFactor -1)\r\n    }\r\n\r\n    switch (this.waveform) {\r\n      case 'sine':\r\n        this.oscilloscopeData = sinValsBuffer\r\n        break;\r\n      case 'triangle':\r\n        this.oscilloscopeData = triValsBuffer\r\n        break;\r\n      case 'square':\r\n        this.oscilloscopeData = sqValsBuffer;\r\n        break;\r\n      case 'sawtooth':\r\n        this.oscilloscopeData = sawValsBuffer;\r\n        break;\r\n      default:\r\n        console.log(\"ERROR - waveform not recognised\")\r\n    }\r\n\r\n    // --------- GRAPHICS INIT --------\r\n    // use the ref to get the canvas element\r\n    this.canvas = this.$refs.canvas;\r\n\r\n    // set the canvas width and height to 100%\r\n    this.canvas.width = 4*this.canvas.offsetWidth;\r\n    this.canvas.height = 4*this.canvas.offsetHeight;\r\n    // get the canvas context\r\n    this.ctx = this.canvas.getContext(\"2d\");\r\n  },\r\n\r\n  methods: {\r\n    updateParams({ freq = this.$props.freq, depth = this.$props.depth, waveform = this.waveform }) {\r\n      //this.$props.freq = freq;\r\n      //this.$props.depth = depth;\r\n      this.waveform = waveform;\r\n      //console.log(\"this.wave: \" + waveform);\r\n\r\n      this.timing = 1000 / (qualFactor * this.$props.freq);\r\n      switch (this.waveform) {\r\n        case 'sine':\r\n          this.oscilloscopeData = sinValsBuffer\r\n          break;\r\n        case 'triangle':\r\n          this.oscilloscopeData = triValsBuffer\r\n          break;\r\n        case 'square':\r\n          this.oscilloscopeData = sqValsBuffer;\r\n          break;\r\n        case 'sawtooth':\r\n          this.oscilloscopeData = sawValsBuffer;\r\n          break;\r\n        default:\r\n          console.log(\"ERROR - waveform not recognised\")\r\n      }\r\n\r\n      if(this.intervalId){ clearInterval(this.intervalId) }\r\n      this.stopOscilloscope();\r\n      //console.log(\"end - this.wave: \" + waveform)\r\n\r\n      nextTick(() => {\r\n        this.startOscilloscope()\r\n      })\r\n    },\r\n\r\n    startOscilloscope() {\r\n      this.canvas.width = 4*this.canvas.offsetWidth;\r\n      this.canvas.height = 4*this.canvas.offsetHeight;\r\n      //console.log(\"start - this.waveform: \" + this.waveform)\r\n\r\n     // console.log(\"this.timing: \" + this.timing)\r\n     // console.log(\"avviando oscilloscope con timer \" + this.timing)\r\n      this.intervalId = setInterval(() => {\r\n        let t = this.oscilloscopeData.shift();\r\n        this.oscilloscopeData.push(t);\r\n        this.draw(this.oscilloscopeData);\r\n      }, this.timing);\r\n      //console.log(\"this.timing:  \" + this.intervalId);\r\n    },\r\n\r\n    stopOscilloscope(){\r\n      if(this.intervalId){ clearInterval(this.intervalId) }\r\n    },\r\n\r\n    draw(data) {\r\n      // clear the canvas\r\n      //console.log(\"drawing\")\r\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n      let x, y, y_next;\r\n\r\n      // draw the data on the canvas\r\n      // set the line color\r\n      this.ctx.strokeStyle = \"black\";\r\n      // set the line width\r\n      this.ctx.lineWidth = 2;\r\n      this.ctx.beginPath();\r\n\r\n      y_next = (this.canvas.height / 2) * (1 - data[0]).toFixed(3);\r\n      // loop through the data and plot it on the canvas\r\n      for (let i = 1; i < data.length; i++) {\r\n        y = y_next;\r\n        // calculate the x and y position of the point\r\n        x = i * (this.canvas.width / data.length).toFixed(3);\r\n        y_next = (this.canvas.height / 2) * (1 - data[i]).toFixed(3);\r\n        // move to the x and y position\r\n        this.ctx.moveTo(x, y);\r\n        // draw a line to the next point\r\n        this.ctx.lineTo(x + this.canvas.width / data.length, y_next );\r\n        // console.log(x, y)\r\n      }\r\n      // draw the line\r\n      this.ctx.stroke();\r\n      this.ctx.moveTo(0, 0);\r\n    },\r\n\r\n    beforeDestroy() {\r\n      if (this.oscilloscope) {\r\n        this.oscilloscope.disconnect();\r\n        this.oscilloscope.dispose();\r\n      }\r\n    },\r\n  }, \r\n  computed: {\r\n    oscilloscopeCanvas(){\r\n      return {\r\n        background: this.colors.purple.glow\r\n      } \r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.lfoOscilloscope {\r\n  margin: 0.4vw;\r\n  margin-right: 0.1vw;;\r\n  height: 90%;\r\n  width: 90%;\r\n  border: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n  position: relative;\r\n}\r\n\r\n.lfoOscilloscopeCanvas {\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  border-radius: 0.2vw;\r\n  border: 0.06vw solid #334030;\r\n  box-sizing: border-box;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}