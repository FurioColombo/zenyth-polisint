{"ast":null,"code":"import _slicedToArray from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.every.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.function.bind.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { isNativeAudioNode } from '../guards/native-audio-node';\nexport var wrapAudioNodeDisconnectMethod = function wrapAudioNodeDisconnectMethod(nativeAudioNode) {\n  var connections = new Map();\n  nativeAudioNode.connect = function (connect) {\n    // tslint:disable-next-line:invalid-void no-inferrable-types\n    return function (destination) {\n      var output = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var input = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var returnValue = isNativeAudioNode(destination) ? connect(destination, output, input) : connect(destination, output);\n      // Save the new connection only if the calls to connect above didn't throw an error.\n      var connectionsToDestination = connections.get(destination);\n      if (connectionsToDestination === undefined) {\n        connections.set(destination, [{\n          input: input,\n          output: output\n        }]);\n      } else {\n        if (connectionsToDestination.every(function (connection) {\n          return connection.input !== input || connection.output !== output;\n        })) {\n          connectionsToDestination.push({\n            input: input,\n            output: output\n          });\n        }\n      }\n      return returnValue;\n    };\n  }(nativeAudioNode.connect.bind(nativeAudioNode));\n  nativeAudioNode.disconnect = function (disconnect) {\n    return function (destinationOrOutput, output, input) {\n      disconnect.apply(nativeAudioNode);\n      if (destinationOrOutput === undefined) {\n        connections.clear();\n      } else if (typeof destinationOrOutput === 'number') {\n        var _iterator = _createForOfIteratorHelper(connections),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _step$value = _slicedToArray(_step.value, 2),\n              destination = _step$value[0],\n              connectionsToDestination = _step$value[1];\n            var filteredConnections = connectionsToDestination.filter(function (connection) {\n              return connection.output !== destinationOrOutput;\n            });\n            if (filteredConnections.length === 0) {\n              connections[\"delete\"](destination);\n            } else {\n              connections.set(destination, filteredConnections);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      } else if (connections.has(destinationOrOutput)) {\n        if (output === undefined) {\n          connections[\"delete\"](destinationOrOutput);\n        } else {\n          var _connectionsToDestination = connections.get(destinationOrOutput);\n          if (_connectionsToDestination !== undefined) {\n            var _filteredConnections = _connectionsToDestination.filter(function (connection) {\n              return connection.output !== output && (connection.input !== input || input === undefined);\n            });\n            if (_filteredConnections.length === 0) {\n              connections[\"delete\"](destinationOrOutput);\n            } else {\n              connections.set(destinationOrOutput, _filteredConnections);\n            }\n          }\n        }\n      }\n      var _iterator2 = _createForOfIteratorHelper(connections),\n        _step2;\n      try {\n        var _loop = function _loop() {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n            destination = _step2$value[0],\n            connectionsToDestination = _step2$value[1];\n          connectionsToDestination.forEach(function (connection) {\n            if (isNativeAudioNode(destination)) {\n              nativeAudioNode.connect(destination, connection.output, connection.input);\n            } else {\n              nativeAudioNode.connect(destination, connection.output);\n            }\n          });\n        };\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    };\n  }(nativeAudioNode.disconnect);\n};","map":{"version":3,"mappings":"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","names":["isNativeAudioNode","wrapAudioNodeDisconnectMethod","nativeAudioNode","connections","Map","connect","destination","output","input","returnValue","connectionsToDestination","get","undefined","set","every","connection","push","bind","disconnect","destinationOrOutput","apply","clear","filteredConnections","filter","length","has","forEach"],"sourceRoot":"","sources":["../../../src/helpers/wrap-audio-node-disconnect-method.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}