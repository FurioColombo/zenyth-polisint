{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nexport var createStartRendering = function createStartRendering(audioBufferStore, cacheTestResult, getAudioNodeRenderer, getUnrenderedAudioWorkletNodes, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) {\n  return function (destination, nativeOfflineAudioContext) {\n    return getAudioNodeRenderer(destination).render(destination, nativeOfflineAudioContext)\n    /*\n     * Bug #86 & #87: Invoking the renderer of an AudioWorkletNode might be necessary if it has no direct or indirect connection to the\n     * destination.\n     */.then(function () {\n      return Promise.all(Array.from(getUnrenderedAudioWorkletNodes(nativeOfflineAudioContext)).map(function (audioWorkletNode) {\n        return getAudioNodeRenderer(audioWorkletNode).render(audioWorkletNode, nativeOfflineAudioContext);\n      }));\n    }).then(function () {\n      return renderNativeOfflineAudioContext(nativeOfflineAudioContext);\n    }).then(function (audioBuffer) {\n      // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n      // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n      if (typeof audioBuffer.copyFromChannel !== 'function') {\n        wrapAudioBufferCopyChannelMethods(audioBuffer);\n        wrapAudioBufferGetChannelDataMethod(audioBuffer);\n        // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.\n      } else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, function () {\n        return testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer);\n      })) {\n        wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n      }\n      audioBufferStore.add(audioBuffer);\n      return audioBuffer;\n    });\n  };\n};","map":{"version":3,"mappings":";;;;;AAAA,SAASA,mCAAmC,QAAQ,sDAAsD;AAG1G,OAAO,IAAMC,oBAAoB,GAA2B,SAA/CA,oBAAoB,CAC7BC,gBAAgB,EAChBC,eAAe,EACfC,oBAAoB,EACpBC,8BAA8B,EAC9BC,+BAA+B,EAC/BC,mDAAmD,EACnDC,iCAAiC,EACjCC,4CAA4C,EAC5C;EACA,OAAO,UAACC,WAAW,EAAEC,yBAAyB;IAAA,OAC1CP,oBAAoB,CAACM,WAAW,CAAC,CAC5BE,MAAM,CAACF,WAAW,EAAEC,yBAAyB;IAC9C;;;OAAA,CAICE,IAAI,CAAC;MAAA,OACFC,OAAO,CAACC,GAAG,CACPC,KAAK,CAACC,IAAI,CAACZ,8BAA8B,CAACM,yBAAyB,CAAC,CAAC,CAACO,GAAG,CAAC,UAACC,gBAAgB;QAAA,OACvFf,oBAAoB,CAACe,gBAAgB,CAAC,CAACP,MAAM,CAACO,gBAAgB,EAAER,yBAAyB,CAAC;MAAA,EAC7F,CACJ;IAAA,EACJ,CACAE,IAAI,CAAC;MAAA,OAAMP,+BAA+B,CAACK,yBAAyB,CAAC;IAAA,EAAC,CACtEE,IAAI,CAAC,UAACO,WAAW,EAAI;MAClB;MACA;MACA,IAAI,OAAOA,WAAW,CAACC,eAAe,KAAK,UAAU,EAAE;QACnDb,iCAAiC,CAACY,WAAW,CAAC;QAC9CpB,mCAAmC,CAACoB,WAAW,CAAC;QAChD;OACH,MAAM,IACH,CAACjB,eAAe,CAACI,mDAAmD,EAAE;QAAA,OAClEA,mDAAmD,CAACa,WAAW,CAAC;MAAA,EACnE,EACH;QACEX,4CAA4C,CAACW,WAAW,CAAC;;MAG7DlB,gBAAgB,CAACoB,GAAG,CAACF,WAAW,CAAC;MAEjC,OAAOA,WAAW;IACtB,CAAC,CAAC;EAAA;AACd,CAAC","names":["wrapAudioBufferGetChannelDataMethod","createStartRendering","audioBufferStore","cacheTestResult","getAudioNodeRenderer","getUnrenderedAudioWorkletNodes","renderNativeOfflineAudioContext","testAudioBufferCopyChannelMethodsOutOfBoundsSupport","wrapAudioBufferCopyChannelMethods","wrapAudioBufferCopyChannelMethodsOutOfBounds","destination","nativeOfflineAudioContext","render","then","Promise","all","Array","from","map","audioWorkletNode","audioBuffer","copyFromChannel","add"],"sourceRoot":"","sources":["../../../src/factories/start-rendering.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}