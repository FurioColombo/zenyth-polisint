{"ast":null,"code":"import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Solo } from \"./Solo\";\nimport { PanVol } from \"./PanVol\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Gain } from \"../../core/context/Gain\";\n/**\n * Channel provides a channel strip interface with volume, pan, solo and mute controls.\n * See [[PanVol]] and [[Solo]]\n * @example\n * // pan the incoming signal left and drop the volume 12db\n * const channel = new Tone.Channel(-0.25, -12);\n * @category Component\n */\nexport class Channel extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Channel.getDefaults(), arguments, [\"volume\", \"pan\"]));\n    this.name = \"Channel\";\n    const options = optionsFromArguments(Channel.getDefaults(), arguments, [\"volume\", \"pan\"]);\n    this._solo = this.input = new Solo({\n      solo: options.solo,\n      context: this.context\n    });\n    this._panVol = this.output = new PanVol({\n      context: this.context,\n      pan: options.pan,\n      volume: options.volume,\n      mute: options.mute,\n      channelCount: options.channelCount\n    });\n    this.pan = this._panVol.pan;\n    this.volume = this._panVol.volume;\n    this._solo.connect(this._panVol);\n    readOnly(this, [\"pan\", \"volume\"]);\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      pan: 0,\n      volume: 0,\n      mute: false,\n      solo: false,\n      channelCount: 1\n    });\n  }\n  /**\n   * Solo/unsolo the channel. Soloing is only relative to other [[Channels]] and [[Solo]] instances\n   */\n  get solo() {\n    return this._solo.solo;\n  }\n  set solo(solo) {\n    this._solo.solo = solo;\n  }\n  /**\n   * If the current instance is muted, i.e. another instance is soloed,\n   * or the channel is muted\n   */\n  get muted() {\n    return this._solo.muted || this.mute;\n  }\n  /**\n   * Mute/unmute the volume\n   */\n  get mute() {\n    return this._panVol.mute;\n  }\n  set mute(mute) {\n    this._panVol.mute = mute;\n  }\n  /**\n   * Get the gain node belonging to the bus name. Create it if\n   * it doesn't exist\n   * @param name The bus name\n   */\n  _getBus(name) {\n    if (!Channel.buses.has(name)) {\n      Channel.buses.set(name, new Gain({\n        context: this.context\n      }));\n    }\n    return Channel.buses.get(name);\n  }\n  /**\n   * Send audio to another channel using a string. `send` is a lot like\n   * [[connect]], except it uses a string instead of an object. This can\n   * be useful in large applications to decouple sections since [[send]]\n   * and [[receive]] can be invoked separately in order to connect an object\n   * @param name The channel name to send the audio\n   * @param volume The amount of the signal to send.\n   * \tDefaults to 0db, i.e. send the entire signal\n   * @returns Returns the gain node of this connection.\n   */\n  send(name, volume = 0) {\n    const bus = this._getBus(name);\n    const sendKnob = new Gain({\n      context: this.context,\n      units: \"decibels\",\n      gain: volume\n    });\n    this.connect(sendKnob);\n    sendKnob.connect(bus);\n    return sendKnob;\n  }\n  /**\n   * Receive audio from a channel which was connected with [[send]].\n   * @param name The channel name to receive audio from.\n   */\n  receive(name) {\n    const bus = this._getBus(name);\n    bus.connect(this);\n    return this;\n  }\n  dispose() {\n    super.dispose();\n    this._panVol.dispose();\n    this.pan.dispose();\n    this.volume.dispose();\n    this._solo.dispose();\n    return this;\n  }\n}\n/**\n * Store the send/receive channels by name.\n */\nChannel.buses = new Map();","map":{"version":3,"mappings":"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","names":["ToneAudioNode","optionsFromArguments","Solo","PanVol","readOnly","Gain","Channel","constructor","getDefaults","arguments","options","_solo","input","solo","context","_panVol","output","pan","volume","mute","channelCount","connect","Object","assign","muted","_getBus","name","buses","has","set","get","send","bus","sendKnob","units","gain","receive","dispose","Map"],"sourceRoot":"","sources":["../../../../Tone/component/channel/Channel.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}