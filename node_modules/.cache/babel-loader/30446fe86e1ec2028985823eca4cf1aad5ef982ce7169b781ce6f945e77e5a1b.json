{"ast":null,"code":"import _objectSpread from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport \"core-js/modules/es.math.log2.js\";\nimport \"core-js/modules/es.math.log10.js\";\nimport { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nvar DEFAULT_OPTIONS = {\n  Q: 1,\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  detune: 0,\n  frequency: 350,\n  gain: 0,\n  type: 'lowpass'\n};\nexport var createBiquadFilterNodeConstructor = function createBiquadFilterNodeConstructor(audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) {\n  return /*#__PURE__*/function (_audioNodeConstructor) {\n    _inherits(BiquadFilterNode, _audioNodeConstructor);\n    var _super = _createSuper(BiquadFilterNode);\n    function BiquadFilterNode(context, options) {\n      var _this;\n      _classCallCheck(this, BiquadFilterNode);\n      var nativeContext = getNativeContext(context);\n      var mergedOptions = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n      var nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeContext, mergedOptions);\n      var isOffline = isNativeOfflineAudioContext(nativeContext);\n      var biquadFilterNodeRenderer = isOffline ? createBiquadFilterNodeRenderer() : null;\n      _this = _super.call(this, context, false, nativeBiquadFilterNode, biquadFilterNodeRenderer);\n      // Bug #80: Safari does not export the correct values for maxValue and minValue.\n      _this._Q = createAudioParam(_assertThisInitialized(_this), isOffline, nativeBiquadFilterNode.Q, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      // Bug #78: Firefox & Safari do not export the correct values for maxValue and minValue.\n      _this._detune = createAudioParam(_assertThisInitialized(_this), isOffline, nativeBiquadFilterNode.detune, 1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT), -1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT));\n      // Bug #77: Firefox & Safari do not export the correct value for minValue.\n      _this._frequency = createAudioParam(_assertThisInitialized(_this), isOffline, nativeBiquadFilterNode.frequency, context.sampleRate / 2, 0);\n      // Bug #79: Firefox & Safari do not export the correct values for maxValue and minValue.\n      _this._gain = createAudioParam(_assertThisInitialized(_this), isOffline, nativeBiquadFilterNode.gain, 40 * Math.log10(MOST_POSITIVE_SINGLE_FLOAT), MOST_NEGATIVE_SINGLE_FLOAT);\n      _this._nativeBiquadFilterNode = nativeBiquadFilterNode;\n      // @todo Determine a meaningful tail-time instead of just using one second.\n      setAudioNodeTailTime(_assertThisInitialized(_this), 1);\n      return _this;\n    }\n    _createClass(BiquadFilterNode, [{\n      key: \"detune\",\n      get: function get() {\n        return this._detune;\n      }\n    }, {\n      key: \"frequency\",\n      get: function get() {\n        return this._frequency;\n      }\n    }, {\n      key: \"gain\",\n      get: function get() {\n        return this._gain;\n      }\n    }, {\n      key: \"Q\",\n      get: function get() {\n        return this._Q;\n      }\n    }, {\n      key: \"type\",\n      get: function get() {\n        return this._nativeBiquadFilterNode.type;\n      },\n      set: function set(value) {\n        this._nativeBiquadFilterNode.type = value;\n      }\n    }, {\n      key: \"getFrequencyResponse\",\n      value: function getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n        // Bug #189: Safari does throw an InvalidStateError.\n        try {\n          this._nativeBiquadFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n        } catch (err) {\n          if (err.code === 11) {\n            throw createInvalidAccessError();\n          }\n          throw err;\n        }\n        // Bug #68: Safari does not throw an error if the parameters differ in their length.\n        if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {\n          throw createInvalidAccessError();\n        }\n      }\n    }]);\n    return BiquadFilterNode;\n  }(audioNodeConstructor);\n};","map":{"version":3,"mappings":";;;;;;;;AAAA,SAASA,0BAA0B,EAAEC,0BAA0B,QAAQ,cAAc;AAIrF,IAAMC,eAAe,GAAG;EACpBC,CAAC,EAAE,CAAC;EACJC,YAAY,EAAE,CAAC;EACfC,gBAAgB,EAAE,KAAK;EACvBC,qBAAqB,EAAE,UAAU;EACjCC,MAAM,EAAE,CAAC;EACTC,SAAS,EAAE,GAAG;EACdC,IAAI,EAAE,CAAC;EACPC,IAAI,EAAE;CACA;AAEV,OAAO,IAAMC,iCAAiC,GAAwC,SAAzEA,iCAAiC,CAC1CC,oBAAoB,EACpBC,gBAAgB,EAChBC,8BAA8B,EAC9BC,wBAAwB,EACxBC,4BAA4B,EAC5BC,gBAAgB,EAChBC,2BAA2B,EAC3BC,oBAAoB,EACpB;EACA;IAAA;IAAA;IAWI,0BAAYC,OAAU,EAAEC,OAAuC;MAAA;MAAA;MAC3D,IAAMC,aAAa,GAAGL,gBAAgB,CAACG,OAAO,CAAC;MAC/C,IAAMG,aAAa,mCAAQrB,eAAe,GAAKmB,OAAO,CAAE;MACxD,IAAMG,sBAAsB,GAAGR,4BAA4B,CAACM,aAAa,EAAEC,aAAa,CAAC;MACzF,IAAME,SAAS,GAAGP,2BAA2B,CAACI,aAAa,CAAC;MAC5D,IAAMI,wBAAwB,GAAiCD,SAAS,GAAGX,8BAA8B,EAAE,GAAG,IAAK;MAEnH,0BAAMM,OAAO,EAAE,KAAK,EAAEI,sBAAsB,EAAEE,wBAAwB;MAEtE;MACA,MAAKC,EAAE,GAAGd,gBAAgB,gCAAOY,SAAS,EAAED,sBAAsB,CAACrB,CAAC,EAAEF,0BAA0B,EAAED,0BAA0B,CAAC;MAC7H;MACA,MAAK4B,OAAO,GAAGf,gBAAgB,gCAE3BY,SAAS,EACTD,sBAAsB,CAACjB,MAAM,EAC7B,IAAI,GAAGsB,IAAI,CAACC,IAAI,CAAC7B,0BAA0B,CAAC,EAC5C,CAAC,IAAI,GAAG4B,IAAI,CAACC,IAAI,CAAC7B,0BAA0B,CAAC,CAChD;MACD;MACA,MAAK8B,UAAU,GAAGlB,gBAAgB,gCAAOY,SAAS,EAAED,sBAAsB,CAAChB,SAAS,EAAEY,OAAO,CAACY,UAAU,GAAG,CAAC,EAAE,CAAC,CAAC;MAChH;MACA,MAAKC,KAAK,GAAGpB,gBAAgB,gCAEzBY,SAAS,EACTD,sBAAsB,CAACf,IAAI,EAC3B,EAAE,GAAGoB,IAAI,CAACK,KAAK,CAACjC,0BAA0B,CAAC,EAC3CD,0BAA0B,CAC7B;MACD,MAAKmC,uBAAuB,GAAGX,sBAAsB;MAErD;MACAL,oBAAoB,gCAAO,CAAC,CAAC;MAAC;IAClC;IAAC;MAAA;MAAA,KAED,eAAU;QACN,OAAO,IAAI,CAACS,OAAO;MACvB;IAAC;MAAA;MAAA,KAED,eAAa;QACT,OAAO,IAAI,CAACG,UAAU;MAC1B;IAAC;MAAA;MAAA,KAED,eAAQ;QACJ,OAAO,IAAI,CAACE,KAAK;MACrB;IAAC;MAAA;MAAA,KAED,eAAK;QACD,OAAO,IAAI,CAACN,EAAE;MAClB;IAAC;MAAA;MAAA,KAED,eAAQ;QACJ,OAAO,IAAI,CAACQ,uBAAuB,CAACzB,IAAI;MAC5C,CAAC;MAAA,KAED,aAAS0B,KAAK;QACV,IAAI,CAACD,uBAAuB,CAACzB,IAAI,GAAG0B,KAAK;MAC7C;IAAC;MAAA;MAAA,OAEM,8BAAqBC,WAAyB,EAAEC,WAAyB,EAAEC,aAA2B;QACzG;QACA,IAAI;UACA,IAAI,CAACJ,uBAAuB,CAACK,oBAAoB,CAACH,WAAW,EAAEC,WAAW,EAAEC,aAAa,CAAC;SAC7F,CAAC,OAAOE,GAAG,EAAE;UACV,IAAIA,GAAG,CAACC,IAAI,KAAK,EAAE,EAAE;YACjB,MAAM3B,wBAAwB,EAAE;;UAGpC,MAAM0B,GAAG;;QAGb;QACA,IAAIJ,WAAW,CAACM,MAAM,KAAKL,WAAW,CAACK,MAAM,IAAIL,WAAW,CAACK,MAAM,KAAKJ,aAAa,CAACI,MAAM,EAAE;UAC1F,MAAM5B,wBAAwB,EAAE;;MAExC;IAAC;IAAA;EAAA,EAtFqDH,oBAAuB;AAwFrF,CAAC","names":["MOST_NEGATIVE_SINGLE_FLOAT","MOST_POSITIVE_SINGLE_FLOAT","DEFAULT_OPTIONS","Q","channelCount","channelCountMode","channelInterpretation","detune","frequency","gain","type","createBiquadFilterNodeConstructor","audioNodeConstructor","createAudioParam","createBiquadFilterNodeRenderer","createInvalidAccessError","createNativeBiquadFilterNode","getNativeContext","isNativeOfflineAudioContext","setAudioNodeTailTime","context","options","nativeContext","mergedOptions","nativeBiquadFilterNode","isOffline","biquadFilterNodeRenderer","_Q","_detune","Math","log2","_frequency","sampleRate","_gain","log10","_nativeBiquadFilterNode","value","frequencyHz","magResponse","phaseResponse","getFrequencyResponse","err","code","length"],"sourceRoot":"","sources":["../../../src/factories/biquad-filter-node-constructor.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}