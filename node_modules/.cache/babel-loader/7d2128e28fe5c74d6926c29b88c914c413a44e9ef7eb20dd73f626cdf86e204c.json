{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isUndef } from \"../../core/util/TypeCheck\";\nimport { Source } from \"../Source\";\nimport { ToneBufferSource } from \"./ToneBufferSource\";\nimport { assertRange } from \"../../core/util/Debug\";\nimport { timeRange } from \"../../core/util/Decorator\";\n/**\n * Player is an audio file player with start, loop, and stop functions.\n * @example\n * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/gong_1.mp3\").toDestination();\n * // play as soon as the buffer is loaded\n * player.autostart = true;\n * @category Source\n */\nexport class Player extends Source {\n  constructor() {\n    super(optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]));\n    this.name = \"Player\";\n    /**\n     * All of the active buffer source nodes\n     */\n    this._activeSources = new Set();\n    const options = optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]);\n    this._buffer = new ToneAudioBuffer({\n      onload: this._onload.bind(this, options.onload),\n      onerror: options.onerror,\n      reverse: options.reverse,\n      url: options.url\n    });\n    this.autostart = options.autostart;\n    this._loop = options.loop;\n    this._loopStart = options.loopStart;\n    this._loopEnd = options.loopEnd;\n    this._playbackRate = options.playbackRate;\n    this.fadeIn = options.fadeIn;\n    this.fadeOut = options.fadeOut;\n  }\n  static getDefaults() {\n    return Object.assign(Source.getDefaults(), {\n      autostart: false,\n      fadeIn: 0,\n      fadeOut: 0,\n      loop: false,\n      loopEnd: 0,\n      loopStart: 0,\n      onload: noOp,\n      onerror: noOp,\n      playbackRate: 1,\n      reverse: false\n    });\n  }\n  /**\n   * Load the audio file as an audio buffer.\n   * Decodes the audio asynchronously and invokes\n   * the callback once the audio buffer loads.\n   * Note: this does not need to be called if a url\n   * was passed in to the constructor. Only use this\n   * if you want to manually load a new url.\n   * @param url The url of the buffer to load. Filetype support depends on the browser.\n   */\n  load(url) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this._buffer.load(url);\n      this._onload();\n      return this;\n    });\n  }\n  /**\n   * Internal callback when the buffer is loaded.\n   */\n  _onload(callback = noOp) {\n    callback();\n    if (this.autostart) {\n      this.start();\n    }\n  }\n  /**\n   * Internal callback when the buffer is done playing.\n   */\n  _onSourceEnd(source) {\n    // invoke the onstop function\n    this.onstop(this);\n    // delete the source from the active sources\n    this._activeSources.delete(source);\n    if (this._activeSources.size === 0 && !this._synced && this._state.getValueAtTime(this.now()) === \"started\") {\n      // remove the 'implicitEnd' event and replace with an explicit end\n      this._state.cancel(this.now());\n      this._state.setStateAtTime(\"stopped\", this.now());\n    }\n  }\n  /**\n   * Play the buffer at the given startTime. Optionally add an offset\n   * and/or duration which will play the buffer from a position\n   * within the buffer for the given duration.\n   *\n   * @param  time When the player should start.\n   * @param  offset The offset from the beginning of the sample to start at.\n   * @param  duration How long the sample should play. If no duration is given, it will default to the full length of the sample (minus any offset)\n   */\n  start(time, offset, duration) {\n    super.start(time, offset, duration);\n    return this;\n  }\n  /**\n   * Internal start method\n   */\n  _start(startTime, offset, duration) {\n    // if it's a loop the default offset is the loopStart point\n    if (this._loop) {\n      offset = defaultArg(offset, this._loopStart);\n    } else {\n      // otherwise the default offset is 0\n      offset = defaultArg(offset, 0);\n    }\n    // compute the values in seconds\n    const computedOffset = this.toSeconds(offset);\n    // compute the duration which is either the passed in duration of the buffer.duration - offset\n    const origDuration = duration;\n    duration = defaultArg(duration, Math.max(this._buffer.duration - computedOffset, 0));\n    let computedDuration = this.toSeconds(duration);\n    // scale it by the playback rate\n    computedDuration = computedDuration / this._playbackRate;\n    // get the start time\n    startTime = this.toSeconds(startTime);\n    // make the source\n    const source = new ToneBufferSource({\n      url: this._buffer,\n      context: this.context,\n      fadeIn: this.fadeIn,\n      fadeOut: this.fadeOut,\n      loop: this._loop,\n      loopEnd: this._loopEnd,\n      loopStart: this._loopStart,\n      onended: this._onSourceEnd.bind(this),\n      playbackRate: this._playbackRate\n    }).connect(this.output);\n    // set the looping properties\n    if (!this._loop && !this._synced) {\n      // cancel the previous stop\n      this._state.cancel(startTime + computedDuration);\n      // if it's not looping, set the state change at the end of the sample\n      this._state.setStateAtTime(\"stopped\", startTime + computedDuration, {\n        implicitEnd: true\n      });\n    }\n    // add it to the array of active sources\n    this._activeSources.add(source);\n    // start it\n    if (this._loop && isUndef(origDuration)) {\n      source.start(startTime, computedOffset);\n    } else {\n      // subtract the fade out time\n      source.start(startTime, computedOffset, computedDuration - this.toSeconds(this.fadeOut));\n    }\n  }\n  /**\n   * Stop playback.\n   */\n  _stop(time) {\n    const computedTime = this.toSeconds(time);\n    this._activeSources.forEach(source => source.stop(computedTime));\n  }\n  /**\n   * Stop and then restart the player from the beginning (or offset)\n   * @param  time When the player should start.\n   * @param  offset The offset from the beginning of the sample to start at.\n   * @param  duration How long the sample should play. If no duration is given,\n   * \t\t\t\t\tit will default to the full length of the sample (minus any offset)\n   */\n  restart(time, offset, duration) {\n    super.restart(time, offset, duration);\n    return this;\n  }\n  _restart(time, offset, duration) {\n    this._stop(time);\n    this._start(time, offset, duration);\n  }\n  /**\n   * Seek to a specific time in the player's buffer. If the\n   * source is no longer playing at that time, it will stop.\n   * @param offset The time to seek to.\n   * @param when The time for the seek event to occur.\n   * @example\n   * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/gurgling_theremin_1.mp3\", () => {\n   * \tplayer.start();\n   * \t// seek to the offset in 1 second from now\n   * \tplayer.seek(0.4, \"+1\");\n   * }).toDestination();\n   */\n  seek(offset, when) {\n    const computedTime = this.toSeconds(when);\n    if (this._state.getValueAtTime(computedTime) === \"started\") {\n      const computedOffset = this.toSeconds(offset);\n      // if it's currently playing, stop it\n      this._stop(computedTime);\n      // restart it at the given time\n      this._start(computedTime, computedOffset);\n    }\n    return this;\n  }\n  /**\n   * Set the loop start and end. Will only loop if loop is set to true.\n   * @param loopStart The loop start time\n   * @param loopEnd The loop end time\n   * @example\n   * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/malevoices_aa2_F3.mp3\").toDestination();\n   * // loop between the given points\n   * player.setLoopPoints(0.2, 0.3);\n   * player.loop = true;\n   * player.autostart = true;\n   */\n  setLoopPoints(loopStart, loopEnd) {\n    this.loopStart = loopStart;\n    this.loopEnd = loopEnd;\n    return this;\n  }\n  /**\n   * If loop is true, the loop will start at this position.\n   */\n  get loopStart() {\n    return this._loopStart;\n  }\n  set loopStart(loopStart) {\n    this._loopStart = loopStart;\n    if (this.buffer.loaded) {\n      assertRange(this.toSeconds(loopStart), 0, this.buffer.duration);\n    }\n    // get the current source\n    this._activeSources.forEach(source => {\n      source.loopStart = loopStart;\n    });\n  }\n  /**\n   * If loop is true, the loop will end at this position.\n   */\n  get loopEnd() {\n    return this._loopEnd;\n  }\n  set loopEnd(loopEnd) {\n    this._loopEnd = loopEnd;\n    if (this.buffer.loaded) {\n      assertRange(this.toSeconds(loopEnd), 0, this.buffer.duration);\n    }\n    // get the current source\n    this._activeSources.forEach(source => {\n      source.loopEnd = loopEnd;\n    });\n  }\n  /**\n   * The audio buffer belonging to the player.\n   */\n  get buffer() {\n    return this._buffer;\n  }\n  set buffer(buffer) {\n    this._buffer.set(buffer);\n  }\n  /**\n   * If the buffer should loop once it's over.\n   * @example\n   * const player = new Tone.Player(\"https://tonejs.github.io/audio/drum-samples/breakbeat.mp3\").toDestination();\n   * player.loop = true;\n   * player.autostart = true;\n   */\n  get loop() {\n    return this._loop;\n  }\n  set loop(loop) {\n    // if no change, do nothing\n    if (this._loop === loop) {\n      return;\n    }\n    this._loop = loop;\n    // set the loop of all of the sources\n    this._activeSources.forEach(source => {\n      source.loop = loop;\n    });\n    if (loop) {\n      // remove the next stopEvent\n      const stopEvent = this._state.getNextState(\"stopped\", this.now());\n      if (stopEvent) {\n        this._state.cancel(stopEvent.time);\n      }\n    }\n  }\n  /**\n   * Normal speed is 1. The pitch will change with the playback rate.\n   * @example\n   * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/femalevoices_aa2_A5.mp3\").toDestination();\n   * // play at 1/4 speed\n   * player.playbackRate = 0.25;\n   * // play as soon as the buffer is loaded\n   * player.autostart = true;\n   */\n  get playbackRate() {\n    return this._playbackRate;\n  }\n  set playbackRate(rate) {\n    this._playbackRate = rate;\n    const now = this.now();\n    // cancel the stop event since it's at a different time now\n    const stopEvent = this._state.getNextState(\"stopped\", now);\n    if (stopEvent && stopEvent.implicitEnd) {\n      this._state.cancel(stopEvent.time);\n      this._activeSources.forEach(source => source.cancelStop());\n    }\n    // set all the sources\n    this._activeSources.forEach(source => {\n      source.playbackRate.setValueAtTime(rate, now);\n    });\n  }\n  /**\n   * If the buffer should be reversed\n   * @example\n   * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/chime_1.mp3\").toDestination();\n   * player.autostart = true;\n   * player.reverse = true;\n   */\n  get reverse() {\n    return this._buffer.reverse;\n  }\n  set reverse(rev) {\n    this._buffer.reverse = rev;\n  }\n  /**\n   * If the buffer is loaded\n   */\n  get loaded() {\n    return this._buffer.loaded;\n  }\n  dispose() {\n    super.dispose();\n    // disconnect all of the players\n    this._activeSources.forEach(source => source.dispose());\n    this._activeSources.clear();\n    this._buffer.dispose();\n    return this;\n  }\n}\n__decorate([timeRange(0)], Player.prototype, \"fadeIn\", void 0);\n__decorate([timeRange(0)], Player.prototype, \"fadeOut\", void 0);","map":{"version":3,"mappings":"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","names":["ToneAudioBuffer","defaultArg","optionsFromArguments","noOp","isUndef","Source","ToneBufferSource","assertRange","timeRange","Player","constructor","getDefaults","arguments","Set","options","_buffer","onload","_onload","bind","onerror","reverse","url","autostart","_loop","loop","_loopStart","loopStart","_loopEnd","loopEnd","_playbackRate","playbackRate","fadeIn","fadeOut","Object","assign","load","callback","start","_onSourceEnd","source","onstop","_activeSources","delete","size","_synced","_state","getValueAtTime","now","cancel","setStateAtTime","time","offset","duration","_start","startTime","computedOffset","toSeconds","origDuration","Math","max","computedDuration","context","onended","connect","output","implicitEnd","add","_stop","computedTime","forEach","stop","restart","_restart","seek","when","setLoopPoints","buffer","loaded","set","stopEvent","getNextState","rate","cancelStop","setValueAtTime","rev","dispose","clear","__decorate"],"sourceRoot":"","sources":["../../../../Tone/source/buffer/Player.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}