{"ast":null,"code":"import _classCallCheck from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { StereoEffect } from \"./StereoEffect\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Signal } from \"../signal/Signal\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Tremolo modulates the amplitude of an incoming signal using an [[LFO]].\n * The effect is a stereo effect where the modulation phase is inverted in each channel.\n *\n * @example\n * // create a tremolo and start it's LFO\n * const tremolo = new Tone.Tremolo(9, 0.75).toDestination().start();\n * // route an oscillator through the tremolo and start it\n * const oscillator = new Tone.Oscillator().connect(tremolo).start();\n *\n * @category Effect\n */\nexport var Tremolo = /*#__PURE__*/function (_StereoEffect) {\n  _inherits(Tremolo, _StereoEffect);\n  var _super = _createSuper(Tremolo);\n  function Tremolo() {\n    var _this;\n    _classCallCheck(this, Tremolo);\n    _this = _super.call(this, optionsFromArguments(Tremolo.getDefaults(), arguments, [\"frequency\", \"depth\"]));\n    _this.name = \"Tremolo\";\n    var options = optionsFromArguments(Tremolo.getDefaults(), arguments, [\"frequency\", \"depth\"]);\n    _this._lfoL = new LFO({\n      context: _this.context,\n      type: options.type,\n      min: 1,\n      max: 0\n    });\n    _this._lfoR = new LFO({\n      context: _this.context,\n      type: options.type,\n      min: 1,\n      max: 0\n    });\n    _this._amplitudeL = new Gain({\n      context: _this.context\n    });\n    _this._amplitudeR = new Gain({\n      context: _this.context\n    });\n    _this.frequency = new Signal({\n      context: _this.context,\n      value: options.frequency,\n      units: \"frequency\"\n    });\n    _this.depth = new Signal({\n      context: _this.context,\n      value: options.depth,\n      units: \"normalRange\"\n    });\n    readOnly(_assertThisInitialized(_this), [\"frequency\", \"depth\"]);\n    _this.connectEffectLeft(_this._amplitudeL);\n    _this.connectEffectRight(_this._amplitudeR);\n    _this._lfoL.connect(_this._amplitudeL.gain);\n    _this._lfoR.connect(_this._amplitudeR.gain);\n    _this.frequency.fan(_this._lfoL.frequency, _this._lfoR.frequency);\n    _this.depth.fan(_this._lfoR.amplitude, _this._lfoL.amplitude);\n    _this.spread = options.spread;\n    return _this;\n  }\n  _createClass(Tremolo, [{\n    key: \"start\",\n    value:\n    /**\n     * Start the tremolo.\n     */\n    function start(time) {\n      this._lfoL.start(time);\n      this._lfoR.start(time);\n      return this;\n    }\n    /**\n     * Stop the tremolo.\n     */\n  }, {\n    key: \"stop\",\n    value: function stop(time) {\n      this._lfoL.stop(time);\n      this._lfoR.stop(time);\n      return this;\n    }\n    /**\n     * Sync the effect to the transport.\n     */\n  }, {\n    key: \"sync\",\n    value: function sync() {\n      this._lfoL.sync();\n      this._lfoR.sync();\n      this.context.transport.syncSignal(this.frequency);\n      return this;\n    }\n    /**\n     * Unsync the filter from the transport\n     */\n  }, {\n    key: \"unsync\",\n    value: function unsync() {\n      this._lfoL.unsync();\n      this._lfoR.unsync();\n      this.context.transport.unsyncSignal(this.frequency);\n      return this;\n    }\n    /**\n     * The oscillator type.\n     */\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._lfoL.type;\n    },\n    set: function set(type) {\n      this._lfoL.type = type;\n      this._lfoR.type = type;\n    }\n    /**\n     * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n     * When set to 180, LFO's will be panned hard left and right respectively.\n     */\n  }, {\n    key: \"spread\",\n    get: function get() {\n      return this._lfoR.phase - this._lfoL.phase; // 180\n    },\n    set: function set(spread) {\n      this._lfoL.phase = 90 - spread / 2;\n      this._lfoR.phase = spread / 2 + 90;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Tremolo.prototype), \"dispose\", this).call(this);\n      this._lfoL.dispose();\n      this._lfoR.dispose();\n      this._amplitudeL.dispose();\n      this._amplitudeR.dispose();\n      this.frequency.dispose();\n      this.depth.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(StereoEffect.getDefaults(), {\n        frequency: 10,\n        type: \"sine\",\n        depth: 0.5,\n        spread: 180\n      });\n    }\n  }]);\n  return Tremolo;\n}(StereoEffect);","map":{"version":3,"mappings":"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","names":["StereoEffect","LFO","Gain","Signal","optionsFromArguments","readOnly","Tremolo","getDefaults","arguments","options","_lfoL","context","type","min","max","_lfoR","_amplitudeL","_amplitudeR","frequency","value","units","depth","connectEffectLeft","connectEffectRight","connect","gain","fan","amplitude","spread","time","start","stop","sync","transport","syncSignal","unsync","unsyncSignal","phase","dispose","Object","assign"],"sourceRoot":"","sources":["../../../Tone/effect/Tremolo.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}