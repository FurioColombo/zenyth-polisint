{"ast":null,"code":"import _classCallCheck from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/eliapirrello/Documents/GitHub/zenyth/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { Multiply } from \"./Multiply\";\nimport { SignalOperator } from \"./SignalOperator\";\n/**\n * Negate the incoming signal. i.e. an input signal of 10 will output -10\n *\n * @example\n * const neg = new Tone.Negate();\n * const sig = new Tone.Signal(-2).connect(neg);\n * // output of neg is positive 2.\n * @category Signal\n */\nexport var Negate = /*#__PURE__*/function (_SignalOperator) {\n  _inherits(Negate, _SignalOperator);\n  var _super = _createSuper(Negate);\n  function Negate() {\n    var _this;\n    _classCallCheck(this, Negate);\n    _this = _super.apply(this, arguments);\n    _this.name = \"Negate\";\n    /**\n     * negation is done by multiplying by -1\n     */\n    _this._multiply = new Multiply({\n      context: _this.context,\n      value: -1\n    });\n    /**\n     * The input and output are equal to the multiply node\n     */\n    _this.input = _this._multiply;\n    _this.output = _this._multiply;\n    return _this;\n  }\n  /**\n   * clean up\n   * @returns {Negate} this\n   */\n  _createClass(Negate, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Negate.prototype), \"dispose\", this).call(this);\n      this._multiply.dispose();\n      return this;\n    }\n  }]);\n  return Negate;\n}(SignalOperator);","map":{"version":3,"mappings":";;;;;;;AACA,SAASA,QAAQ,QAAQ,YAAY;AACrC,SAASC,cAAc,QAAQ,kBAAkB;AAEjD;;;;;;;;;AASA,WAAaC,MAAO;EAAA;EAAA;EAApB;IAAA;IAAA;;IAEU,UAAI,GAAW,QAAQ;IAEhC;;;IAGQ,eAAS,GAAa,IAAIF,QAAQ,CAAC;MAC1CG,OAAO,EAAE,MAAKA,OAAO;MACrBC,KAAK,EAAE,CAAC;KACR,CAAC;IAEF;;;IAGA,WAAK,GAAG,MAAKC,SAAS;IACtB,YAAM,GAAG,MAAKA,SAAS;IAAC;EAWzB;EATC;;;;EAAA;IAAA;IAAA,OAIA,mBAAO;MACN;MACA,IAAI,CAACA,SAAS,CAACC,OAAO,EAAE;MACxB,OAAO,IAAI;IACZ;EAAC;EAAA;AAAA,EA1B0BL,cAAoC","names":["Multiply","SignalOperator","Negate","context","value","_multiply","dispose"],"sourceRoot":"","sources":["../../../Tone/signal/Negate.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}