{"ast":null,"code":"import _objectSpread from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nexport var createBaseAudioContextConstructor = function createBaseAudioContextConstructor(addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, _decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor) {\n  return /*#__PURE__*/function (_minimalBaseAudioCont) {\n    _inherits(BaseAudioContext, _minimalBaseAudioCont);\n    var _super = _createSuper(BaseAudioContext);\n    function BaseAudioContext(_nativeContext, numberOfChannels) {\n      var _this;\n      _classCallCheck(this, BaseAudioContext);\n      _this = _super.call(this, _nativeContext, numberOfChannels);\n      _this._nativeContext = _nativeContext;\n      _this._audioWorklet = addAudioWorkletModule === undefined ? undefined : {\n        addModule: function addModule(moduleURL, options) {\n          return addAudioWorkletModule(_assertThisInitialized(_this), moduleURL, options);\n        }\n      };\n      return _this;\n    }\n    _createClass(BaseAudioContext, [{\n      key: \"audioWorklet\",\n      get: function get() {\n        return this._audioWorklet;\n      }\n    }, {\n      key: \"createAnalyser\",\n      value: function createAnalyser() {\n        return new analyserNodeConstructor(this);\n      }\n    }, {\n      key: \"createBiquadFilter\",\n      value: function createBiquadFilter() {\n        return new biquadFilterNodeConstructor(this);\n      }\n    }, {\n      key: \"createBuffer\",\n      value: function createBuffer(numberOfChannels, length, sampleRate) {\n        return new audioBufferConstructor({\n          length: length,\n          numberOfChannels: numberOfChannels,\n          sampleRate: sampleRate\n        });\n      }\n    }, {\n      key: \"createBufferSource\",\n      value: function createBufferSource() {\n        return new audioBufferSourceNodeConstructor(this);\n      }\n    }, {\n      key: \"createChannelMerger\",\n      value: function createChannelMerger() {\n        var numberOfInputs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 6;\n        return new channelMergerNodeConstructor(this, {\n          numberOfInputs: numberOfInputs\n        });\n      }\n    }, {\n      key: \"createChannelSplitter\",\n      value: function createChannelSplitter() {\n        var numberOfOutputs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 6;\n        return new channelSplitterNodeConstructor(this, {\n          numberOfOutputs: numberOfOutputs\n        });\n      }\n    }, {\n      key: \"createConstantSource\",\n      value: function createConstantSource() {\n        return new constantSourceNodeConstructor(this);\n      }\n    }, {\n      key: \"createConvolver\",\n      value: function createConvolver() {\n        return new convolverNodeConstructor(this);\n      }\n    }, {\n      key: \"createDelay\",\n      value: function createDelay() {\n        var maxDelayTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        return new delayNodeConstructor(this, {\n          maxDelayTime: maxDelayTime\n        });\n      }\n    }, {\n      key: \"createDynamicsCompressor\",\n      value: function createDynamicsCompressor() {\n        return new dynamicsCompressorNodeConstructor(this);\n      }\n    }, {\n      key: \"createGain\",\n      value: function createGain() {\n        return new gainNodeConstructor(this);\n      }\n    }, {\n      key: \"createIIRFilter\",\n      value: function createIIRFilter(feedforward, feedback) {\n        return new iIRFilterNodeConstructor(this, {\n          feedback: feedback,\n          feedforward: feedforward\n        });\n      }\n    }, {\n      key: \"createOscillator\",\n      value: function createOscillator() {\n        return new oscillatorNodeConstructor(this);\n      }\n    }, {\n      key: \"createPanner\",\n      value: function createPanner() {\n        return new pannerNodeConstructor(this);\n      }\n    }, {\n      key: \"createPeriodicWave\",\n      value: function createPeriodicWave(real, imag) {\n        var constraints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n          disableNormalization: false\n        };\n        return new periodicWaveConstructor(this, _objectSpread(_objectSpread({}, constraints), {}, {\n          imag: imag,\n          real: real\n        }));\n      }\n    }, {\n      key: \"createStereoPanner\",\n      value: function createStereoPanner() {\n        return new stereoPannerNodeConstructor(this);\n      }\n    }, {\n      key: \"createWaveShaper\",\n      value: function createWaveShaper() {\n        return new waveShaperNodeConstructor(this);\n      }\n    }, {\n      key: \"decodeAudioData\",\n      value: function decodeAudioData(audioData, successCallback, errorCallback) {\n        return _decodeAudioData(this._nativeContext, audioData).then(function (audioBuffer) {\n          if (typeof successCallback === 'function') {\n            successCallback(audioBuffer);\n          }\n          return audioBuffer;\n        }, function (err) {\n          if (typeof errorCallback === 'function') {\n            errorCallback(err);\n          }\n          throw err;\n        });\n      }\n    }]);\n    return BaseAudioContext;\n  }(minimalBaseAudioContextConstructor);\n};","map":{"version":3,"mappings":"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","names":["createBaseAudioContextConstructor","addAudioWorkletModule","analyserNodeConstructor","audioBufferConstructor","audioBufferSourceNodeConstructor","biquadFilterNodeConstructor","channelMergerNodeConstructor","channelSplitterNodeConstructor","constantSourceNodeConstructor","convolverNodeConstructor","decodeAudioData","delayNodeConstructor","dynamicsCompressorNodeConstructor","gainNodeConstructor","iIRFilterNodeConstructor","minimalBaseAudioContextConstructor","oscillatorNodeConstructor","pannerNodeConstructor","periodicWaveConstructor","stereoPannerNodeConstructor","waveShaperNodeConstructor","_nativeContext","numberOfChannels","_audioWorklet","undefined","addModule","moduleURL","options","length","sampleRate","numberOfInputs","numberOfOutputs","maxDelayTime","feedforward","feedback","real","imag","constraints","disableNormalization","audioData","successCallback","errorCallback","then","audioBuffer","err"],"sourceRoot":"","sources":["../../../src/factories/base-audio-context-constructor.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}