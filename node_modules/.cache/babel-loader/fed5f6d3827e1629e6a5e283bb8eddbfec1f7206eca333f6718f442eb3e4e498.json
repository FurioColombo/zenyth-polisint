{"ast":null,"code":"import _classCallCheck from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { Gain } from \"../core/context/Gain\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Signal } from \"./Signal\";\n/**\n * Multiply two incoming signals. Or, if a number is given in the constructor,\n * multiplies the incoming signal by that value.\n *\n * @example\n * // multiply two signals\n * const mult = new Tone.Multiply();\n * const sigA = new Tone.Signal(3);\n * const sigB = new Tone.Signal(4);\n * sigA.connect(mult);\n * sigB.connect(mult.factor);\n * // output of mult is 12.\n * @example\n * // multiply a signal and a number\n * const mult = new Tone.Multiply(10);\n * const sig = new Tone.Signal(2).connect(mult);\n * // the output of mult is 20.\n * @category Signal\n */\nexport var Multiply = /*#__PURE__*/function (_Signal) {\n  _inherits(Multiply, _Signal);\n  var _super = _createSuper(Multiply);\n  function Multiply() {\n    var _this;\n    _classCallCheck(this, Multiply);\n    _this = _super.call(this, Object.assign(optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"])));\n    _this.name = \"Multiply\";\n    /**\n     * Indicates if the value should be overridden on connection\n     */\n    _this.override = false;\n    var options = optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"]);\n    _this._mult = _this.input = _this.output = new Gain({\n      context: _this.context,\n      minValue: options.minValue,\n      maxValue: options.maxValue\n    });\n    _this.factor = _this._param = _this._mult.gain;\n    _this.factor.setValueAtTime(options.value, 0);\n    return _this;\n  }\n  _createClass(Multiply, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Multiply.prototype), \"dispose\", this).call(this);\n      this._mult.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Signal.getDefaults(), {\n        value: 0\n      });\n    }\n  }]);\n  return Multiply;\n}(Signal);","map":{"version":3,"mappings":";;;;;;;AAAA,SAASA,IAAI,QAAQ,sBAAsB;AAE3C,SAASC,oBAAoB,QAAQ,uBAAuB;AAC5D,SAASC,MAAM,QAAuB,UAAU;AAGhD;;;;;;;;;;;;;;;;;;;AAmBA,WAAaC,QAA4D;EAAA;EAAA;EAkCxE;IAAA;IAAA;IACC,0BAAMC,MAAM,CAACC,MAAM,CAACJ,oBAAoB,CAACE,QAAQ,CAACG,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IAjC/E,UAAI,GAAW,UAAU;IAElC;;;IAGS,cAAQ,GAAG,KAAK;IA6BxB,IAAMC,OAAO,GAAGP,oBAAoB,CAACE,QAAQ,CAACG,WAAW,EAAE,EAAEC,SAAS,EAAE,CAAC,OAAO,CAAC,CAAC;IAElF,MAAKE,KAAK,GAAG,MAAKC,KAAK,GAAG,MAAKC,MAAM,GAAG,IAAIX,IAAI,CAAC;MAChDY,OAAO,EAAE,MAAKA,OAAO;MACrBC,QAAQ,EAAEL,OAAO,CAACK,QAAQ;MAC1BC,QAAQ,EAAEN,OAAO,CAACM;KAClB,CAAC;IAEF,MAAKC,MAAM,GAAG,MAAKC,MAAM,GAAG,MAAKP,KAAK,CAACQ,IAAkC;IACzE,MAAKF,MAAM,CAACG,cAAc,CAACV,OAAO,CAACW,KAAK,EAAE,CAAC,CAAC;IAAC;EAC9C;EAAC;IAAA;IAAA,OAQD,mBAAO;MACN;MACA,IAAI,CAACV,KAAK,CAACW,OAAO,EAAE;MACpB,OAAO,IAAI;IACZ;EAAC;IAAA;IAAA,OAVD,uBAAkB;MACjB,OAAOhB,MAAM,CAACC,MAAM,CAACH,MAAM,CAACI,WAAW,EAAE,EAAE;QAC1Ca,KAAK,EAAE;OACP,CAAC;IACH;EAAC;EAAA;AAAA,EApD+EjB,MAAgB","names":["Gain","optionsFromArguments","Signal","Multiply","Object","assign","getDefaults","arguments","options","_mult","input","output","context","minValue","maxValue","factor","_param","gain","setValueAtTime","value","dispose"],"sourceRoot":"","sources":["../../../Tone/signal/Multiply.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}