{"ast":null,"code":"import \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport { Volume } from \"../../component/channel/Volume\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { onContextClose, onContextInit } from \"./ContextInitialization\";\nimport { Gain } from \"./Gain\";\nimport { connectSeries, ToneAudioNode } from \"./ToneAudioNode\";\n/**\n * A single master output which is connected to the\n * AudioDestinationNode (aka your speakers).\n * It provides useful conveniences such as the ability\n * to set the volume and mute the entire application.\n * It also gives you the ability to apply master effects to your application.\n *\n * @example\n * const oscillator = new Tone.Oscillator().start();\n * // the audio will go from the oscillator to the speakers\n * oscillator.connect(Tone.getDestination());\n * // a convenience for connecting to the master output is also provided:\n * oscillator.toDestination();\n * @category Core\n */\nexport class Destination extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Destination.getDefaults(), arguments));\n    this.name = \"Destination\";\n    this.input = new Volume({\n      context: this.context\n    });\n    this.output = new Gain({\n      context: this.context\n    });\n    /**\n     * The volume of the master output in decibels. -Infinity is silent, and 0 is no change.\n     * @example\n     * const osc = new Tone.Oscillator().toDestination();\n     * osc.start();\n     * // ramp the volume down to silent over 10 seconds\n     * Tone.getDestination().volume.rampTo(-Infinity, 10);\n     */\n    this.volume = this.input.volume;\n    const options = optionsFromArguments(Destination.getDefaults(), arguments);\n    connectSeries(this.input, this.output, this.context.rawContext.destination);\n    this.mute = options.mute;\n    this._internalChannels = [this.input, this.context.rawContext.destination, this.output];\n  }\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      mute: false,\n      volume: 0\n    });\n  }\n  /**\n   * Mute the output.\n   * @example\n   * const oscillator = new Tone.Oscillator().start().toDestination();\n   * setTimeout(() => {\n   * \t// mute the output\n   * \tTone.Destination.mute = true;\n   * }, 1000);\n   */\n  get mute() {\n    return this.input.mute;\n  }\n  set mute(mute) {\n    this.input.mute = mute;\n  }\n  /**\n   * Add a master effects chain. NOTE: this will disconnect any nodes which were previously\n   * chained in the master effects chain.\n   * @param args All arguments will be connected in a row and the Master will be routed through it.\n   * @example\n   * // route all audio through a filter and compressor\n   * const lowpass = new Tone.Filter(800, \"lowpass\");\n   * const compressor = new Tone.Compressor(-18);\n   * Tone.Destination.chain(lowpass, compressor);\n   */\n  chain(...args) {\n    this.input.disconnect();\n    args.unshift(this.input);\n    args.push(this.output);\n    connectSeries(...args);\n    return this;\n  }\n  /**\n   * The maximum number of channels the system can output\n   * @example\n   * console.log(Tone.Destination.maxChannelCount);\n   */\n  get maxChannelCount() {\n    return this.context.rawContext.destination.maxChannelCount;\n  }\n  /**\n   * Clean up\n   */\n  dispose() {\n    super.dispose();\n    this.volume.dispose();\n    return this;\n  }\n}\n//-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\nonContextInit(context => {\n  context.destination = new Destination({\n    context\n  });\n});\nonContextClose(context => {\n  context.destination.dispose();\n});","map":{"version":3,"mappings":";;AAAA,SAASA,MAAM,QAAQ,gCAAgC;AAEvD,SAASC,oBAAoB,QAAQ,kBAAkB;AACvD,SAASC,cAAc,EAAEC,aAAa,QAAQ,yBAAyB;AACvE,SAASC,IAAI,QAAQ,QAAQ;AAE7B,SAASC,aAAa,EAAEC,aAAa,QAA8B,iBAAiB;AAOpF;;;;;;;;;;;;;;;AAeA,OAAM,MAAOC,WAAY,SAAQD,aAAiC;EAkBjEE;IAEC,KAAK,CAACP,oBAAoB,CAACM,WAAW,CAACE,WAAW,EAAE,EAAEC,SAAS,CAAC,CAAC;IAlBzD,SAAI,GAAW,aAAa;IAErC,UAAK,GAAW,IAAIV,MAAM,CAAC;MAAEW,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE,CAAC;IACrD,WAAM,GAAS,IAAIP,IAAI,CAAC;MAAEO,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE,CAAC;IAElD;;;;;;;;IAQA,WAAM,GAAsB,IAAI,CAACC,KAAK,CAACC,MAAM;IAM5C,MAAMC,OAAO,GAAGb,oBAAoB,CAACM,WAAW,CAACE,WAAW,EAAE,EAAEC,SAAS,CAAC;IAE1EL,aAAa,CAAC,IAAI,CAACO,KAAK,EAAE,IAAI,CAACG,MAAM,EAAE,IAAI,CAACJ,OAAO,CAACK,UAAU,CAACC,WAAW,CAAC;IAE3E,IAAI,CAACC,IAAI,GAAGJ,OAAO,CAACI,IAAI;IACxB,IAAI,CAACC,iBAAiB,GAAG,CAAC,IAAI,CAACP,KAAK,EAAE,IAAI,CAACD,OAAO,CAACK,UAAU,CAACC,WAAW,EAAE,IAAI,CAACF,MAAM,CAAC;EACxF;EAEA,OAAON,WAAW;IACjB,OAAOW,MAAM,CAACC,MAAM,CAACf,aAAa,CAACG,WAAW,EAAE,EAAE;MACjDS,IAAI,EAAE,KAAK;MACXL,MAAM,EAAE;KACR,CAAC;EACH;EAEA;;;;;;;;;EASA,IAAIK,IAAI;IACP,OAAO,IAAI,CAACN,KAAK,CAACM,IAAI;EACvB;EACA,IAAIA,IAAI,CAACA,IAAa;IACrB,IAAI,CAACN,KAAK,CAACM,IAAI,GAAGA,IAAI;EACvB;EAEA;;;;;;;;;;EAUAI,KAAK,CAAC,GAAGC,IAAsC;IAC9C,IAAI,CAACX,KAAK,CAACY,UAAU,EAAE;IACvBD,IAAI,CAACE,OAAO,CAAC,IAAI,CAACb,KAAK,CAAC;IACxBW,IAAI,CAACG,IAAI,CAAC,IAAI,CAACX,MAAM,CAAC;IACtBV,aAAa,CAAC,GAAGkB,IAAI,CAAC;IACtB,OAAO,IAAI;EACZ;EAEA;;;;;EAKA,IAAII,eAAe;IAClB,OAAO,IAAI,CAAChB,OAAO,CAACK,UAAU,CAACC,WAAW,CAACU,eAAe;EAC3D;EAEA;;;EAGAC,OAAO;IACN,KAAK,CAACA,OAAO,EAAE;IACf,IAAI,CAACf,MAAM,CAACe,OAAO,EAAE;IACrB,OAAO,IAAI;EACZ;;AAGD;AACA;AACA;AAEAzB,aAAa,CAACQ,OAAO,IAAG;EACvBA,OAAO,CAACM,WAAW,GAAG,IAAIV,WAAW,CAAC;IAAEI;EAAO,CAAE,CAAC;AACnD,CAAC,CAAC;AAEFT,cAAc,CAACS,OAAO,IAAG;EACxBA,OAAO,CAACM,WAAW,CAACW,OAAO,EAAE;AAC9B,CAAC,CAAC","names":["Volume","optionsFromArguments","onContextClose","onContextInit","Gain","connectSeries","ToneAudioNode","Destination","constructor","getDefaults","arguments","context","input","volume","options","output","rawContext","destination","mute","_internalChannels","Object","assign","chain","args","disconnect","unshift","push","maxChannelCount","dispose"],"sourceRoot":"","sources":["../../../../Tone/core/context/Destination.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}