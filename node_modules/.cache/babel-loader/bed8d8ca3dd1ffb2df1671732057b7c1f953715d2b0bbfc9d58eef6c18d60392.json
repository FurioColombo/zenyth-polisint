{"ast":null,"code":"import _classCallCheck from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Home/Projects/Programmazione/WebStorm/myZenythPolisinT/zenyth_polisint/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { noOp } from \"../core/util/Interface\";\nimport { assert } from \"../core/util/Debug\";\n/**\n * Base class for fire-and-forget nodes\n */\nexport var OneShotSource = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(OneShotSource, _ToneAudioNode);\n  var _super = _createSuper(OneShotSource);\n  function OneShotSource(options) {\n    var _this;\n    _classCallCheck(this, OneShotSource);\n    _this = _super.call(this, options);\n    /**\n     * The callback to invoke after the\n     * source is done playing.\n     */\n    _this.onended = noOp;\n    /**\n     * The start time\n     */\n    _this._startTime = -1;\n    /**\n     * The stop time\n     */\n    _this._stopTime = -1;\n    /**\n     * The id of the timeout\n     */\n    _this._timeout = -1;\n    /**\n     * The public output node\n     */\n    _this.output = new Gain({\n      context: _this.context,\n      gain: 0\n    });\n    /**\n     * The output gain node.\n     */\n    _this._gainNode = _this.output;\n    /**\n     * Get the playback state at the given time\n     */\n    _this.getStateAtTime = function (time) {\n      var computedTime = this.toSeconds(time);\n      if (this._startTime !== -1 && computedTime >= this._startTime && (this._stopTime === -1 || computedTime <= this._stopTime)) {\n        return \"started\";\n      } else {\n        return \"stopped\";\n      }\n    };\n    _this._fadeIn = options.fadeIn;\n    _this._fadeOut = options.fadeOut;\n    _this._curve = options.curve;\n    _this.onended = options.onended;\n    return _this;\n  }\n  _createClass(OneShotSource, [{\n    key: \"_startGain\",\n    value:\n    /**\n     * Start the source at the given time\n     * @param  time When to start the source\n     */\n    function _startGain(time) {\n      var gain = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      assert(this._startTime === -1, \"Source cannot be started more than once\");\n      // apply a fade in envelope\n      var fadeInTime = this.toSeconds(this._fadeIn);\n      // record the start time\n      this._startTime = time + fadeInTime;\n      this._startTime = Math.max(this._startTime, this.context.currentTime);\n      // schedule the envelope\n      if (fadeInTime > 0) {\n        this._gainNode.gain.setValueAtTime(0, time);\n        if (this._curve === \"linear\") {\n          this._gainNode.gain.linearRampToValueAtTime(gain, time + fadeInTime);\n        } else {\n          this._gainNode.gain.exponentialApproachValueAtTime(gain, time, fadeInTime);\n        }\n      } else {\n        this._gainNode.gain.setValueAtTime(gain, time);\n      }\n      return this;\n    }\n    /**\n     * Stop the source node at the given time.\n     * @param time When to stop the source\n     */\n  }, {\n    key: \"stop\",\n    value: function stop(time) {\n      this.log(\"stop\", time);\n      this._stopGain(this.toSeconds(time));\n      return this;\n    }\n    /**\n     * Stop the source at the given time\n     * @param  time When to stop the source\n     */\n  }, {\n    key: \"_stopGain\",\n    value: function _stopGain(time) {\n      var _this2 = this;\n      assert(this._startTime !== -1, \"'start' must be called before 'stop'\");\n      // cancel the previous stop\n      this.cancelStop();\n      // the fadeOut time\n      var fadeOutTime = this.toSeconds(this._fadeOut);\n      // schedule the stop callback\n      this._stopTime = this.toSeconds(time) + fadeOutTime;\n      this._stopTime = Math.max(this._stopTime, this.context.currentTime);\n      if (fadeOutTime > 0) {\n        // start the fade out curve at the given time\n        if (this._curve === \"linear\") {\n          this._gainNode.gain.linearRampTo(0, fadeOutTime, time);\n        } else {\n          this._gainNode.gain.targetRampTo(0, fadeOutTime, time);\n        }\n      } else {\n        // stop any ongoing ramps, and set the value to 0\n        this._gainNode.gain.cancelAndHoldAtTime(time);\n        this._gainNode.gain.setValueAtTime(0, time);\n      }\n      this.context.clearTimeout(this._timeout);\n      this._timeout = this.context.setTimeout(function () {\n        // allow additional time for the exponential curve to fully decay\n        var additionalTail = _this2._curve === \"exponential\" ? fadeOutTime * 2 : 0;\n        _this2._stopSource(_this2.now() + additionalTail);\n        _this2._onended();\n      }, this._stopTime - this.context.currentTime);\n      return this;\n    }\n    /**\n     * Invoke the onended callback\n     */\n  }, {\n    key: \"_onended\",\n    value: function _onended() {\n      var _this3 = this;\n      if (this.onended !== noOp) {\n        this.onended(this);\n        // overwrite onended to make sure it only is called once\n        this.onended = noOp;\n        // dispose when it's ended to free up for garbage collection only in the online context\n        if (!this.context.isOffline) {\n          var disposeCallback = function disposeCallback() {\n            return _this3.dispose();\n          };\n          // @ts-ignore\n          if (typeof window.requestIdleCallback !== \"undefined\") {\n            // @ts-ignore\n            window.requestIdleCallback(disposeCallback);\n          } else {\n            setTimeout(disposeCallback, 1000);\n          }\n        }\n      }\n    }\n    /**\n     * Get the playback state at the current time\n     */\n  }, {\n    key: \"state\",\n    get: function get() {\n      return this.getStateAtTime(this.now());\n    }\n    /**\n     * Cancel a scheduled stop event\n     */\n  }, {\n    key: \"cancelStop\",\n    value: function cancelStop() {\n      this.log(\"cancelStop\");\n      assert(this._startTime !== -1, \"Source is not started\");\n      // cancel the stop envelope\n      this._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);\n      this.context.clearTimeout(this._timeout);\n      this._stopTime = -1;\n      return this;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(OneShotSource.prototype), \"dispose\", this).call(this);\n      this._gainNode.disconnect();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        curve: \"linear\",\n        fadeIn: 0,\n        fadeOut: 0,\n        onended: noOp\n      });\n    }\n  }]);\n  return OneShotSource;\n}(ToneAudioNode);","map":{"version":3,"mappings":"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","names":["Gain","ToneAudioNode","noOp","assert","OneShotSource","options","context","gain","output","time","computedTime","toSeconds","_startTime","_stopTime","_fadeIn","fadeIn","_fadeOut","fadeOut","_curve","curve","onended","fadeInTime","Math","max","currentTime","_gainNode","setValueAtTime","linearRampToValueAtTime","exponentialApproachValueAtTime","log","_stopGain","cancelStop","fadeOutTime","linearRampTo","targetRampTo","cancelAndHoldAtTime","clearTimeout","_timeout","setTimeout","additionalTail","_stopSource","now","_onended","isOffline","disposeCallback","dispose","window","requestIdleCallback","getStateAtTime","cancelScheduledValues","sampleTime","disconnect","Object","assign","getDefaults"],"sourceRoot":"","sources":["../../../Tone/source/OneShotSource.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}