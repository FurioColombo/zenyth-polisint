{"ast":null,"code":"import { normalizeStyle as _normalizeStyle, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createBlock as _createBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nvar _withScopeId = function _withScopeId(n) {\n  return _pushScopeId(\"data-v-1dd12caa\"), n = n(), _popScopeId(), n;\n};\nvar _hoisted_1 = {\n  \"class\": \"chainHeadsRow\"\n};\nvar _hoisted_2 = {\n  \"class\": \"fxGrid\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _this = this;\n  var _component_FxCell = _resolveComponent(\"FxCell\");\n  return _openBlock(), _createElementBlock(\"div\", {\n    style: _normalizeStyle(this.fxBack)\n  }, [_createElementVNode(\"div\", {\n    \"class\": \"fxHost\",\n    style: _normalizeStyle(this.fxHost)\n  }, [_createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"div\", {\n    \"class\": \"chainHead\",\n    style: _normalizeStyle(this.chainHead1)\n  }, null, 4), _createElementVNode(\"div\", {\n    \"class\": \"chainHead\",\n    style: _normalizeStyle(this.chainHead2)\n  }, null, 4), _createElementVNode(\"div\", {\n    \"class\": \"chainHead\",\n    style: _normalizeStyle(this.chainHead3)\n  }, null, 4)]), _createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.Fx_chain1, function (fx) {\n    return _openBlock(), _createBlock(_component_FxCell, {\n      ref_for: true,\n      ref: \"effects\",\n      chainId: fx.chainId,\n      id: fx.id,\n      item: fx\n    }, null, 8, [\"chainId\", \"id\", \"item\"]);\n  }), 256)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.Fx_chain2, function (fx) {\n    return _openBlock(), _createBlock(_component_FxCell, {\n      chainId: fx.chainId,\n      id: fx.id,\n      item: fx\n    }, null, 8, [\"chainId\", \"id\", \"item\"]);\n  }), 256)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.Fx_chain3, function (fx) {\n    return _openBlock(), _createBlock(_component_FxCell, {\n      chainId: fx.chainId,\n      id: fx.id,\n      item: fx,\n      onFxMounted: _cache[0] || (_cache[0] = function ($event) {\n        return _this.initFxConnections();\n      })\n    }, null, 8, [\"chainId\", \"id\", \"item\"]);\n  }), 256))]), _createElementVNode(\"div\", {\n    \"class\": \"gainList\",\n    style: _normalizeStyle(this.gainList)\n  }, [_createElementVNode(\"div\", {\n    id: \"gain1\",\n    \"class\": \"channelGain\",\n    style: _normalizeStyle($options.channelGain(0)),\n    onMousedown: _cache[1] || (_cache[1] = function ($event) {\n      return $options.gainMouseDown(0);\n    })\n  }, [_createElementVNode(\"div\", {\n    \"class\": \"channelGainFader\",\n    style: _normalizeStyle($options.computedFxGainKnobStyle(0))\n  }, null, 4)], 36), _createElementVNode(\"div\", {\n    id: \"gain2\",\n    \"class\": \"channelGain\",\n    style: _normalizeStyle($options.channelGain(1)),\n    onMousedown: _cache[2] || (_cache[2] = function ($event) {\n      return $options.gainMouseDown(1);\n    })\n  }, [_createElementVNode(\"div\", {\n    \"class\": \"channelGainFader\",\n    style: _normalizeStyle($options.computedFxGainKnobStyle(1))\n  }, null, 4)], 36), _createElementVNode(\"div\", {\n    id: \"gain3\",\n    \"class\": \"channelGain\",\n    style: _normalizeStyle($options.channelGain(2)),\n    onMousedown: _cache[3] || (_cache[3] = function ($event) {\n      return $options.gainMouseDown(2);\n    })\n  }, [_createElementVNode(\"div\", {\n    \"class\": \"channelGainFader\",\n    style: _normalizeStyle($options.computedFxGainKnobStyle(2))\n  }, null, 4)], 36)], 4)], 4)], 4);\n}","map":{"version":3,"mappings":";;;;;EAIS,SAAM;AAAe;;EAKrB,SAAM;AAAQ;;;;uBARrBA,oBA0BI;IA1BEC,KAAK,uBAAOC,MAAM;MACxBC,oBAwBM;IAxBD,SAAM,QAAQ;IAAEF,KAAK,uBAAOG,MAAM;MAErCD,oBAIM,OAJNE,UAIM,GAHJF,oBAAuD;IAAlD,SAAM,WAAY;IAAEF,KAAK,uBAAOK,UAAU;eAC/CH,oBAAuD;IAAlD,SAAM,WAAY;IAAEF,KAAK,uBAAOM,UAAU;eAC/CJ,oBAAuD;IAAlD,SAAM,WAAY;IAAEF,KAAK,uBAAOO,UAAU;iBAEjDL,oBAKM,OALNM,UAKM,sBAJJT,oBAAsGU,6BAA/EC,eAAS,YAAhBC,EAAE;yBAAlBC,aAAsGC;;MAApEC,GAAG,EAAC,SAAS;MAAEC,OAAO,EAAEJ,EAAE,CAACI,OAAO;MAAGC,EAAE,EAAEL,EAAE,CAACK,EAAE;MAAGC,IAAI,EAAEN;;gCACzFZ,oBAAwFU,6BAAjEC,eAAS,YAAhBC,EAAE;yBAAlBC,aAAwFC;MAArDE,OAAO,EAAEJ,EAAE,CAACI,OAAO;MAAGC,EAAE,EAAEL,EAAE,CAACK,EAAE;MAAGC,IAAI,EAAEN;;gCAC3EZ,oBACuDU,6BADhCC,eAAS,YAAhBC,EAAE;yBAAlBC,aACuDC;MADpBE,OAAO,EAAEJ,EAAE,CAACI,OAAO;MAAGC,EAAE,EAAEL,EAAE,CAACK,EAAE;MAAGC,IAAI,EAAEN,EAAE;MACpEO,WAAS;QAAA,aAAOC,iBAAiB;MAAA;;eAE5CjB,oBAUM;IAVD,SAAM,UAAU;IAAEF,KAAK,uBAAOoB,QAAQ;MACzClB,oBAEM;IAFDc,EAAE,EAAC,OAAO;IAAC,SAAM,aAAa;IAAEhB,KAAK,kBAAEqB,oBAAW;IAAMC,WAAS;MAAA,OAAED,sBAAa;IAAA;MACnFnB,oBAAwE;IAAnE,SAAM,kBAAkB;IAAEF,KAAK,kBAAEqB,gCAAuB;qBAE/DnB,oBAEM;IAFDc,EAAE,EAAC,OAAO;IAAC,SAAM,aAAa;IAAEhB,KAAK,kBAAEqB,oBAAW;IAAMC,WAAS;MAAA,OAAED,sBAAa;IAAA;MACnFnB,oBAAwE;IAAnE,SAAM,kBAAkB;IAAEF,KAAK,kBAAEqB,gCAAuB;qBAE/DnB,oBAEM;IAFDc,EAAE,EAAC,OAAO;IAAC,SAAM,aAAa;IAAEhB,KAAK,kBAAEqB,oBAAW;IAAMC,WAAS;MAAA,OAAED,sBAAa;IAAA;MACnFnB,oBAAwE;IAAnE,SAAM,kBAAkB;IAAEF,KAAK,kBAAEqB,gCAAuB","names":["_createElementBlock","style","fxBack","_createElementVNode","fxHost","_hoisted_1","chainHead1","chainHead2","chainHead3","_hoisted_2","_Fragment","$data","fx","_createBlock","_component_FxCell","ref","chainId","id","item","onFxMounted","initFxConnections","gainList","$options","onMousedown"],"sourceRoot":"","sources":["C:\\Home\\Projects\\Programmazione\\WebStorm\\myZenythPolisinT\\zenyth_polisint\\src\\views\\Synth\\Effects\\FxHost.vue"],"sourcesContent":["<template>\r\n  <div :style=\"this.fxBack\">\r\n  <div class=\"fxHost\" :style=\"this.fxHost\">\r\n\r\n    <div class=\"chainHeadsRow\">\r\n      <div class=\"chainHead \" :style=\"this.chainHead1\"></div>\r\n      <div class=\"chainHead \" :style=\"this.chainHead2\"></div>\r\n      <div class=\"chainHead \" :style=\"this.chainHead3\"></div>\r\n    </div>\r\n    <div class=\"fxGrid\">\r\n      <FxCell v-for=\"(fx) in Fx_chain1\" ref=\"effects\" :chainId=\"fx.chainId\" :id=\"fx.id\" :item=\"fx\"></FxCell>\r\n      <FxCell v-for=\"(fx) in Fx_chain2\" :chainId=\"fx.chainId\" :id=\"fx.id\" :item=\"fx\"></FxCell>\r\n      <FxCell v-for=\"(fx) in Fx_chain3\" :chainId=\"fx.chainId\" :id=\"fx.id\" :item=\"fx\"\r\n              @fxMounted=\"this.initFxConnections()\"></FxCell>\r\n    </div>\r\n    <div class=\"gainList\" :style=\"this.gainList\">\r\n      <div id=\"gain1\" class=\"channelGain\" :style=\"channelGain(0)\" @mousedown=\"gainMouseDown(0)\">\r\n        <div class=\"channelGainFader\" :style=\"computedFxGainKnobStyle(0)\"></div>\r\n      </div>\r\n      <div id=\"gain2\" class=\"channelGain\" :style=\"channelGain(1)\" @mousedown=\"gainMouseDown(1)\">\r\n        <div class=\"channelGainFader\" :style=\"computedFxGainKnobStyle(1)\"></div>\r\n      </div>\r\n      <div id=\"gain3\" class=\"channelGain\" :style=\"channelGain(2)\" @mousedown=\"gainMouseDown(2)\">\r\n        <div class=\"channelGainFader\" :style=\"computedFxGainKnobStyle(2)\"></div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport FxCell from '../Effects/FxCell.vue'\r\nimport {Gain, getDestination} from \"tone\";\r\n\r\nexport default {\r\n  name: \"FxHost\",\r\n  components: {FxCell},\r\n\r\n  data() {\r\n    return {\r\n      Fx_chain1: [],\r\n      Fx_chain2: [],\r\n      Fx_chain3: [],\r\n      isGainSelected: \"\",\r\n      chainsGains: \"\"\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    this.isGainSelected = Array(this.nFxChains).fill(false)\r\n    this.chainsGains = Array(this.nFxChains).fill(0);\r\n    this.chainsGains[0] = 0.8;\r\n    this.chainsGains[1] = 0.8;\r\n    this.chainsGains[2] = 0.8;\r\n    // note: refs are kept incremental through the chains, while everything else is indexed relatively to the chain\r\n    //console.log(\"creating fx\")\r\n    for (let i = 1; i <= this.nFxXchain; i++) {\r\n      this.Fx_chain1.push({id: i, ref: 'Fx' + i, chainId: 0});\r\n      this.Fx_chain2.push({id: i, ref: 'Fx' + i + this.nFxXchain, chainId: 1});\r\n      this.Fx_chain3.push({id: i, ref: 'Fx' + i + this.nFxXchain * 2, chainId: 2});\r\n      // console.log(i)\r\n    }\r\n\r\n    //console.log(this.fxChains)\r\n    for (let i = 0; i < this.nFxChains; i++) {\r\n      this.fxChains[i][0] = new Gain(1);\r\n      this.fxChains[i][this.nNodesXfxChain-1] = new Gain(+this.chainsGains[i]);\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    // -------------------- AUDIO -----------------------\r\n    initFxConnections() {\r\n      //console.log(this.fxChains)\r\n      for (let i = 0; i < this.nFxChains; i++) {\r\n        // structure: Gain Filter Filter Filter Filter Filter Gain [7]\r\n        for (let j = 0; j < this.nNodesXfxChain-2; j++) {\r\n          //console.log(\"i: \", i, \"j: \", j)\r\n          this.fxChains[i][j].connect(this.fxChains[i][j + 1].getToneReference())\r\n          // console.log(\"chain \", i ,\" id: \", j, \" into chain \", i , \" id: \", j+1)\r\n        }\r\n        // connect last filter to volume\r\n        this.fxChains[i][this.nNodesXfxChain-2].connect(this.fxChains[i][this.nNodesXfxChain-1])\r\n        // connect vol to destination\r\n        this.fxChains[i][this.nNodesXfxChain-1].connect(getDestination())\r\n        // console.log(\"chain \", i, \" id: \", this.nFxXchain-1, \" into getDestination()\")\r\n      }\r\n    },\r\n\r\n    // first node of each chain is a gain node - we set its volume to adjust whole chain gain\r\n    setChainVolume(chainId, volume) {\r\n      this.fxChains[chainId][this.nNodesXfxChain-1].gain = volume;\r\n\r\n    },\r\n\r\n    // --------------------  GESTURE -----------------------\r\n    gainMouseDown(gainId) {\r\n      this.isGainSelected[gainId] = true;\r\n      // console.log(\"fx gainMouseDown\")\r\n    },\r\n\r\n    handleMouseUp(e) {\r\n      //Actions to execute when mouseup happens on any part of the screen\r\n      this.isGainSelected.fill(false)\r\n      // console.log(\"fx gainMouseUP\")\r\n\r\n    },\r\n    handleMouseMove(e) {\r\n      this.isGainSelected.forEach((isSelected, index) => {\r\n        // console.log(\"fx gain vol knob mouse drag\")\r\n        if (isSelected) {\r\n          //console.log(\"fx gain vol knob mouse drag of \", isSelected);\r\n          this.chainsGains[index] = this.chainsGains[index] - Math.floor(e.movementY) / 100;\r\n          this.chainsGains[index] = Math.max(this.chainsGains[index], 0);\r\n          this.chainsGains[index] = Math.min(this.chainsGains[index], 1);\r\n          //console.log(this.chainsGains[index])\r\n          //console.log(this.fxChains[index][0])\r\n          this.fxChains[index][this.nNodesXfxChain-1].set({\r\n            gain: this.chainsGains[index]\r\n          })\r\n        }\r\n      })\r\n    },\r\n    computedFxGainKnobStyle(id) {\r\n      let color = ''; \r\n      if(id === 0) color = this.colors.purple.medium\r\n      if(id === 1) color = this.colors.green.medium\r\n      if(id === 2) color = this.colors.pink.medium\r\n      return {\r\n        height: 100 * this.chainsGains[id] + \"%\",\r\n        top: 50 * (1-this.chainsGains[id]) + \"%\",\r\n        left: 50 * (1-this.chainsGains[id]) + \"%\",\r\n      \r\n        background: color,\r\n      }\r\n    },\r\n    channelGain(id) {\r\n      let color = ''\r\n      if(id == 0) color = this.colors.purple.glow\r\n      if(id == 1) color = this.colors.green.glow\r\n      if(id == 2) color = this.colors.pink.glow\r\n      return {\r\n        background: color,\r\n      }\r\n    }\r\n  },\r\n\r\n  computed : {\r\n\r\n    fxHost(){\r\n      return {\r\n        background: this.colors.orange.glow,\r\n        border: '.1vw solid '+this.colors.orange.dark,\r\n        boxSizing: 'border-box'\r\n      }\r\n    },\r\n    gainList(){\r\n      return {\r\n        background: this.colors.orange.light,\r\n        borderTop: '.1vw solid '+this.colors.orange.dark,\r\n        boxSizing: 'border-box',\r\n        height: '100%'\r\n      }\r\n    },\r\n    chainHead1(){\r\n      return {\r\n        background: this.colors.purple.light\r\n      }\r\n    },\r\n    chainHead2(){\r\n      return {\r\n        background: this.colors.green.medium\r\n      }\r\n    },\r\n    chainHead3(){\r\n      return {\r\n        background: this.colors.pink.light\r\n      }\r\n    },\r\n    fxBack(){\r\n      return {\r\n        position: 'relative',\r\n        height: '100%',\r\n        width: '100%',\r\n        background: this.colors.orange.light\r\n      }\r\n    }\r\n    \r\n  }\r\n}\r\n\r\n</script>\r\n\r\n<style scoped>\r\n  .fxHost{\r\n    display: grid;\r\n    margin: .3vw;\r\n    height: calc(100% - .6vw);\r\n    border-radius: 1%;\r\n    opacity: 90%;\r\n    grid-template-columns: 1fr;\r\n    grid-template-rows: 10% 70% 20%;\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n  .fxGrid{\r\n    justify-content: center;\r\n    align-items: center;\r\n    justify-items: stretch;\r\n    height: 100%;\r\n    width: 100%;\r\n    flex: 1;\r\n    display: grid;\r\n    grid-column: auto;\r\n    grid-template-rows:  1fr 1fr 1fr 1fr 1fr ;\r\n    grid-template-columns: 1fr 1fr 1fr;\r\n    grid-auto-flow: column;\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  .gainList{\r\n    width: 100%;\r\n    position: relative;\r\n    display: flex;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n    flex-direction: row;\r\n  }\r\n\r\n.channelGainFader {\r\n  box-sizing: border-box;\r\n  position: relative;\r\n  left: 50%;\r\n  top: 50%;\r\n  aspect-ratio: 1;\r\n  border-radius: 50%;\r\n  align-self: center;\r\n}\r\n\r\n.channelGain {\r\n  box-sizing: border-box;\r\n  position: relative;\r\n  align-content: center;\r\n  height: 70%;\r\n  aspect-ratio: 1/1;\r\n  border-radius: 50%;\r\n  border: 0.06vw solid black;\r\n}\r\n\r\n.chainHeadsRow {\r\n  height: 60%;\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  flex-direction: row;\r\n  background-color: transparent;\r\n  margin-top: 2%;\r\n  box-sizing: border-box;;\r\n  border: 0;\r\n}\r\n\r\n\r\n  .chainHead {\r\n    height: 50%;\r\n    aspect-ratio: 1/1;\r\n    border: 0;\r\n    clip-path: circle(50%)\r\n  }\r\n\r\n  .head1 {\r\n    background-color: red;\r\n  }\r\n  .head2 {\r\n    background-color: green;\r\n  }\r\n  .head3 {\r\n    background-color: blue;\r\n  }\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}